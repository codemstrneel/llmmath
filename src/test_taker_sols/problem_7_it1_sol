def solution(n):
    import math
    d = len(str(abs(n)))
    lps = math.isqrt(max(n, 0))**2
    k = len(str(lps))
    seq = [i*i for i in range(1, k+1)]
    total = d*d
    arr = (seq * ((total + len(seq) - 1) // len(seq)))[:total]
    matrix = [[0]*d for _ in range(d)]
    top, left, bottom, right, idx = 0, 0, d-1, d-1, 0
    while top <= bottom and left <= right:
        for c in range(left, right+1):
            matrix[top][c] = arr[idx]
            idx += 1
        top += 1
        for r in range(top, bottom+1):
            matrix[r][right] = arr[idx]
            idx += 1
        right -= 1
        if top <= bottom:
            for c in range(right, left-1, -1):
                matrix[bottom][c] = arr[idx]
                idx += 1
            bottom -= 1
        if left <= right:
            for r in range(bottom, top-1, -1):
                matrix[r][left] = arr[idx]
                idx += 1
            left += 1
    bit_sum = sum(bin(matrix[r][c]).count('1') for r in range(d) for c in range(d))
    return matrix, bit_sum