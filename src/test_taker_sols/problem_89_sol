def solution(s, n, lst):
    import re
    from collections import defaultdict
    
    words = re.findall(r'[A-Z][a-z]*', s)
    count = len(words)
    
    def fibonacci(num):
        if num == 0:
            return 0
        elif num == 1:
            return 1
        a, b = 0, 1
        for _ in range(2, num + 1):
            a, b = b, a + b
        return b

    def is_isomorphic(str1, str2):
        map1, map2 = {}, {}
        for c1, c2 in zip(str1, str2):
            if map1.setdefault(c1, c2) != c2 or map2.setdefault(c2, c1) != c1:
                return False
        return True

    def can_transform_to_isomorphic(column):
        return all(is_isomorphic(column[0], col) for col in column)

    if count % 2 == 0:
        original = [tuple(row) for row in lst]
        sorted_col = sorted(original, key=lambda x: x[n])
        rotations = 0
        for i in range(len(lst)):
            if original[i] != sorted_col[i]:
                rotations += 1
        rotations //= 2
        return (rotations, fibonacci(count))
    else:
        column = [row[n] for row in lst]
        if can_transform_to_isomorphic(column):
            return sorted(column)
        else:
            return []