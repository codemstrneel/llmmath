def solution(tuples_list, input_string):
    import re
    from math import pi, floor

    def bell_number(n):
        bell = [[0 for i in range(n + 1)] for j in range(n + 1)]
        bell[0][0] = 1
        for i in range(1, n + 1):
            bell[i][0] = bell[i - 1][i - 1]
            for j in range(1, i + 1):
                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]
        return bell[n][0]

    def digit_sum(n):
        return sum(int(digit) for digit in str(n))

    words = re.sub(r'(?<!^)(?=[A-Z])', ' ', input_string).split()
    length_of_string = len(' '.join(words))
    number_of_words = len(words)
    results = []

    for radius, height in tuples_list:
        if length_of_string in (radius, height):
            if number_of_words % 2 == 0:
                results.append(bell_number(length_of_string))
            else:
                surface_area = pi * radius * (radius + (height ** 2 + radius ** 2) ** 0.5)
                results.append(digit_sum(floor(surface_area)))

    return results