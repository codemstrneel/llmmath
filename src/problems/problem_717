QUESTION

Create a Python function that takes a string representation of a timetable for a train/bus station and extracts all time intervals during which the platforms are in use. The timetable is represented as a list of strings, with each string containing arrival and departure times in the format "hh:mm-hh:mm". The function should use regular expressions to parse the time intervals and return a list of tuples. Each tuple should contain two elements: a time range string (e.g., "hh:mm-hh:mm") and the number of platforms needed within that time frame. If no platforms are needed for a particular time range, it should not appear in the output list.

You may assume the timetable strings are well-formed and occur in chronological order.

In crafting this question, I've combined the parsing and pattern matching aspect of extracting information using regex from Question 1 with the scheduling and resource allocation aspect related to platforms in Question 3.

SOL & TESTS

```<|Solution Begin|>
```python
import re
from collections import defaultdict

def extract_platform_usage(timetable):
    """
    Extracts platform usage intervals from a timetable.

    Parameters:
    - timetable (list): A list of strings formatted as "hh:mm-hh:mm".

    Returns:
    - list of tuples: Each tuple contains a time range (str) and 
                      the number of platforms needed (int).
    """
    time_pattern = re.compile(r'(\d{2}:\d{2})-(\d{2}:\d{2})')
    events = []

    # Extract time intervals and create events
    for entry in timetable:
        match = time_pattern.match(entry)
        if match:
            start, end = match.groups()
            events.append((start, 1))  # Increment on arrival
            events.append((end, -1))   # Decrement on departure

    # Sort events: primarily by time, secondarily by type (-1 departure before +1 arrival)
    events.sort(key=lambda x: (x[0], x[1]))

    current_usage = 0
    max_usage = 0
    intervals = []
    prev_time = None
    
    # Calculate platform usage over time intervals
    for time, effect in events:
        if prev_time is not None and current_usage > 0:
            intervals.append((f"{prev_time}-{time}", current_usage))
        current_usage += effect
        prev_time = time

    # Filter to only include intervals where platforms were in use
    return [(interval, usage) for interval, usage in intervals if usage > 0]
```
<|Solution End|>

<|Test Begin|>
```python
from solution import extract_platform_usage

def test_single_interval_usage():
    timetable = ["09:00-10:00"]
    result = extract_platform_usage(timetable)
    assert result == [("09:00-10:00", 1)]

def test_multiple_intervals_non_overlapping():
    timetable = ["09:00-10:00", "10:00-11:00", "11:00-12:00"]
    result = extract_platform_usage(timetable)
    assert result == [("09:00-10:00", 1), ("10:00-11:00", 1), ("11:00-12:00", 1)]

def test_multiple_intervals_overlapping():
    timetable = ["09:00-10:30", "10:00-11:00", "10:15-11:15"]
    result = extract_platform_usage(timetable)
    # Check breakdown intervals and platform usage
    assert result == [
        ("09:00-10:00", 1),
        ("10:00-10:15", 2),
        ("10:15-10:30", 3),
        ("10:30-11:00", 2),
        ("11:00-11:15", 1)
    ]

def test_no_usage_intervals():
    timetable = []
    result = extract_platform_usage(timetable)
    assert result == []

def test_full_day_usage():
    timetable = ["00:00-23:59"]
    result = extract_platform_usage(timetable)
    assert result == [("00:00-23:59", 1)]
```
<|Test End|>