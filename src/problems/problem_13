QUESTION

Create a function that accepts a list of dictionaries. Each dictionary contains two keys: "name" (a string) and "scores" (a list of floating-point numbers). Identify the dictionary with the "scores" list that has the highest average. Sort that list of floating-point numbers in ascending order and then multiply each element by the highest score found in that list. Return a tuple containing the "name" and the newly transformed "scores" list.

SOLUTION/TESTS

<|Solution Begin|>
def solution(data):
    """
    Identifies the dictionary with the highest average of scores,
    sorts that scores list in ascending order and multiplies each element
    by the highest score in that list, returning the name and transformed scores.

    :param data: List of dictionaries, where each dictionary has a 'name' (string)
                 and 'scores' (list of floats)
    :return: Tuple containing the name and the transformed scores list
    """
    max_avg = float('-inf')
    best_dict = None

    for item in data:
        if item['scores']:  # Ensure there is at least one score to calculate average
            average = sum(item['scores']) / len(item['scores'])
            if average > max_avg:
                max_avg = average
                best_dict = item

    if not best_dict:
        return None  # or handle empty or invalid input appropriately

    sorted_scores = sorted(best_dict['scores'])
    max_score = max(sorted_scores)
    transformed_scores = [x * max_score for x in sorted_scores]

    return (best_dict['name'], transformed_scores)
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_highest_avg():
    data = [
        {'name': 'Alice', 'scores': [72.5, 81, 66, 77]},
        {'name': 'Bob', 'scores': [85, 91.5, 100, 78]},
        {'name': 'Charlie', 'scores': [88, 92, 85]}
    ]
    assert solution(data) == ('Bob', [6630.0, 7937.5, 8500.0, 10000.0])

def test_empty_scores():
    data = [
        {'name': 'Alice', 'scores': []},
        {'name': 'Bob', 'scores': [75, 80]}
    ]
    assert solution(data) == ('Bob', [5625.0, 6400.0])

def test_single_dict():
    data = [
        {'name': 'Alice', 'scores': [85, 90, 95]}
    ]
    assert solution(data) == ('Alice', [7225.0, 8100.0, 9025.0])

def test_no_scores():
    data = []
    assert solution(data) == None

def test_equal_avg():
    data = [
        {'name': 'Alice', 'scores': [100, 100]},
        {'name': 'Bob', 'scores': [100, 100]}
    ]
    result = solution(data)
    assert result in [('Alice', [10000.0, 10000.0]), ('Bob', [10000.0, 10000.0])]

def test_negative_scores():
    data = [
        {'name': 'Alice', 'scores': [-10, -20, -30]},
        {'name': 'Bob', 'scores': [-5, -15, -25]}
    ]
    assert solution(data) == ('Bob', [625.0, 1875.0, 3125.0])

def test_mixed_scores():
    data = [
        {'name': 'Alice', 'scores': [10, -20, 30]},
        {'name': 'Bob', 'scores': [-5, 15, -25]}
    ]
    assert solution(data) == ('Alice', [100.0, 900.0, 900.0])
<|Test End|>