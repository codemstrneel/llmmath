QUESTION

Write a function that processes a list of elements, performing these tasks:

1. Shift the first element of the list to the end of the list.
2. Traverse the transformed list to identify and count elements up to, but not including, the first occurrence of a tuple. In this counted sublist, identify consecutive duplicates and construct a dictionary mapping each unique element to its frequency. If there are no tuples, perform the operations on the entire list.

The function should return a tuple containing two elements: 
- A dictionary reflecting the frequency of consecutive duplicates in the sublist (not including tuples).
- The number of elements counted before the first occurrence of a tuple.

For example, given the input list `[1, 2, 2, (3, 4), 3, 3, 2, 2, 1]`, the transformed list will be `[2, 2, (3, 4), 3, 3, 2, 2, 1, 1]`. The output should be `({'2': 2}, 2)`, where the dictionary `{'2': 2}` reflects the frequency of consecutive duplicates in the sublist `[2, 2]` leading up to the first tuple, and `2` indicates the count of elements before the first tuple.

SOL & TESTS

```markdown
<|Solution Begin|>
```python
def process_list(elements):
    # Shift the first element to the end.
    if not elements:
        return {}, 0

    transformed_list = elements[1:] + elements[:1]

    # Find the position of the first tuple.
    first_tuple_index = len(transformed_list)
    for idx, elem in enumerate(transformed_list):
        if isinstance(elem, tuple):
            first_tuple_index = idx
            break

    # Prepare the sublist up to the first tuple (or entire list if no tuple is found).
    sublist = transformed_list[:first_tuple_index]

    # Count consecutive duplicate elements
    frequency_dict = {}
    if sublist:
        current_elem = sublist[0]
        current_count = 1
        for elem in sublist[1:]:
            if elem == current_elem:
                current_count += 1
            else:
                if current_count > 1:
                    frequency_dict[str(current_elem)] = current_count
                current_elem = elem
                current_count = 1
        # Final check for the last set of elements
        if current_count > 1:
            frequency_dict[str(current_elem)] = current_count

    return frequency_dict, first_tuple_index
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_list

def test_example_case():
    assert process_list([1, 2, 2, (3, 4), 3, 3, 2, 2, 1]) == ({'2': 2}, 2)

def test_no_tuples():
    assert process_list([1, 1, 2, 2, 3, 3, 2, 2, 1]) == ({'1': 2, '2': 2, '3': 2}, 9)

def test_empty_list():
    assert process_list([]) == ({}, 0)

def test_single_element_list():
    assert process_list([5]) == ({}, 1)

def test_list_with_immediate_tuple():
    assert process_list([(3, 4), 1, 1, 2]) == ({}, 0)

def test_identical_elements_before_tuple():
    assert process_list([2, 2, 2, (3, 4), 1, 1]) == ({'2': 3}, 3)

def test_no_consecutive_duplicates():
    assert process_list([1, 2, 3, (3, 4), 2, 3, 4]) == ({}, 3)

def test_all_elements_are_tuples():
    assert process_list([(1, 2), (3, 4), (5, 6)]) == ({}, 0)
```
<|Test End|>
```