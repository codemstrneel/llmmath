QUESTION

Design a function that processes a list of dictionaries. Each dictionary has two keys: 'id', which maps to an integer representing a unique identifier, and 'values', which maps to a list of integers representing data points. The function should accomplish the following:

1. Sort the list of dictionaries in increasing order based on the sum of the 'values' list.
2. Identify the dictionary with the non-empty 'values' list and the lowest sum.
3. For the identified dictionary, compute the sum of the 'values' and subtract five from it, then multiply this result by the 'id'.
4. Return a tuple containing the 'id' from the identified dictionary and the final calculated value. 

The task emphasizes list manipulation, sorting based on computed sums, and arithmetic operations.

SOLUTION/TESTS

```python
<|Solution Begin|>
def solution(dicts):
    """
    Process a list of dictionaries to find the one with the smallest non-empty
    'values' list sum, then perform a calculation based on its 'id' and value sum.
    
    :param dicts: A list of dictionaries, each containing two keys, 'id' and 'values'.
    :return: A tuple (id, final_value) where 'id' is from the identified dictionary
             and 'final_value' is calculated as described in the problem.
    """
    # Sort the list of dictionaries by the sum of the 'values' list
    sorted_dicts = sorted(dicts, key=lambda d: sum(d['values']) if d['values'] else float('inf'))
    
    # Find the first dictionary with a non-empty 'values' list
    for d in sorted_dicts:
        if d['values']:
            values_sum = sum(d['values'])
            final_value = (values_sum - 5) * d['id']
            return (d['id'], final_value)
    
    # In case no dictionary has a non-empty 'values' list (though problem doesn't specify what to do)
    return (None, None)
<|Solution End|>

<|Test Begin|>
def test_solution_with_varied_data():
    data = [
        {'id': 1, 'values': [2, 3, 4]},  # sum = 9
        {'id': 2, 'values': [1, 1]},     # sum = 2
        {'id': 3, 'values': [1, 2]},     # sum = 3
    ]
    assert solution(data) == (2, -6)

def test_solution_with_empty_and_single_values():
    data = [
        {'id': 4, 'values': [10]},         # sum = 10
        {'id': 5, 'values': []},           # empty
        {'id': 3, 'values': [3, 2]},       # sum = 5 
        {'id': 2, 'values': [1]},          # sum = 1
        {'id': 1, 'values': []},           # empty
    ]
    assert solution(data) == (2, -20)

def test_solution_with_all_empty_values():
    data = [
        {'id': 1, 'values': []},
        {'id': 2, 'values': []},
    ]
    assert solution(data) == (None, None)

def test_solution_with_large_and_single_values():
    data = [
        {'id': 1, 'values': [1000]},
        {'id': 2, 'values': []},
        {'id': 3, 'values': [2]},
        {'id': 4, 'values': [5]},
    ]
    assert solution(data) == (3, -5)

def test_solution_with_same_value_sums_but_different_ids():
    data = [
        {'id': 3, 'values': [1, 1]},  # sum = 2
        {'id': 4, 'values': [1, 1]},  # sum = 2, higher ID than first
        {'id': 2, 'values': [1]},     # smallest single value
    ]
    assert solution(data) == (2, -5)
<|Test End|>
```