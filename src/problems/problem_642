QUESTION

Create a function that identifies a string starting with the letter 'x', followed by any sequence of alphanumeric characters, containing at least one digit, and ending with the letter 'y'.

SOL & TESTS

<|Solution Begin|>```python
import re

def matches_pattern(string):
    """
    Checks if the provided string starts with 'x', contains at least one digit,
    and ends with 'y'. The string can contain alphanumeric characters.
    """
    # Define the regular expression pattern
    pattern = r'^x[a-zA-Z0-9]*\d[a-zA-Z0-9]*y$'
    
    # Use re.fullmatch to determine if the entire string matches the pattern
    return re.fullmatch(pattern, string) is not None
```
<|Solution End|>
<|Test Begin|>
```python
from solution import matches_pattern

def test_starts_with_x_and_ends_with_y_with_digit():
    assert matches_pattern('x123y') == True
    assert matches_pattern('xab1y') == True
    assert matches_pattern('xx1y') == True

def test_does_not_start_with_x():
    assert matches_pattern('a123y') == False
    assert matches_pattern('y1x2y') == False

def test_does_not_end_with_y():
    assert matches_pattern('x123') == False
    assert matches_pattern('x1a3b') == False

def test_no_digit_present():
    assert matches_pattern('xabcdy') == False
    assert matches_pattern('xy') == False
    assert matches_pattern('xabcdyz') == False

def test_empty_and_short_strings():
    assert matches_pattern('x1y') == True
    assert matches_pattern('x2y') == True
    assert matches_pattern('xY') == False
    assert matches_pattern('YZ') == False
    assert matches_pattern('x') == False
    assert matches_pattern('y') == False

def test_complex_cases():
    assert matches_pattern('x12xy23z1y') == True
    assert matches_pattern('x12_?_y') == False  # contains non-alphanumeric character
    assert matches_pattern('xabcyx') == False  # ends incorrectly
```
<|Test End|>