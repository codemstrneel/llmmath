QUESTION

Write a Python function that takes as input a mixed list containing both numbers and strings, and a list of tuples, where each tuple consists of a string and a list of integers. The function should perform the following tasks:

1. From the mixed list, extract all unique numbers that are both even and divisible by three. Concatenate their string representations into a single number and invert its digits to create a new integer.
2. In the list of tuples, increment each integer in the sublists by the new integer obtained from step 1, then reverse the order of the integers in each list.
3. Finally, sort the tuples based on the alphabetic order of their string component in descending order.

Return the modified list of tuples and the new integer obtained from inverting the digits.

SOLUTION/TESTS

```python
<|Solution Begin|>
def solution(mixed_list, tuples_list):
    # Step 1: Extract unique numbers meeting the conditions
    unique_numbers = {x for x in mixed_list if isinstance(x, int) and x % 2 == 0 and x % 3 == 0}
    # Create a single concatenated number from these unique numbers
    concatenated_number_str = ''.join(str(num) for num in sorted(unique_numbers))
    # Reverse the digits to form a new integer if the concatenated string is not empty
    if concatenated_number_str:
        reversed_number = int(concatenated_number_str[::-1])
    else:
        reversed_number = 0

    # Step 2: Modify the tuples
    modified_tuples = []
    for s, numbers in tuples_list:
        modified_numbers = [x + reversed_number for x in numbers]
        modified_numbers.reverse()  # Reverse their order
        modified_tuples.append((s, modified_numbers))

    # Step 3: Sort the tuples by the string in descending order
    modified_tuples.sort(key=lambda x: x[0], reverse=True)

    return modified_tuples, reversed_number
<|Solution End|>
<|Test Begin|>
def test_solution():
    # Test case 1: Testing basic mixed list and tuple list
    mixed_list = [6, 'abc', 12, 'def', 18, 25, 3]
    tuples_list = [("banana", [5, 10]), ("apple", [1, 2, 3]), ("cherry", [20])]
    result = solution(mixed_list, tuples_list)
    assert result == ([('cherry', [2120]), ('banana', [2115, 2110]), ('apple', [2114, 2113, 2112])], 12186)

    # Test case 2: Empty mixed list and tuple list
    mixed_list = []
    tuples_list = []
    result = solution(mixed_list, tuples_list)
    assert result == ([], 0)

    # Test case 3: Mixed list with no numbers divisible by both 2 and 3
    mixed_list = ['string', 'another', 5, 7, 11]
    tuples_list = [("hello", [1, 2, 3])]
    result = solution(mixed_list, tuples_list)
    assert result == ([('hello', [3, 2, 1])], 0)

    # Test case 4: Single element meeting condition in mixed list
    mixed_list = [9, 25, 30]
    tuples_list = [("zebra", [0]), ("alpha", [100])]
    result = solution(mixed_list, tuples_list)
    assert result == ([('zebra', [3]), ('alpha', [103])], 3)

    # Test case 5: Multiple elements with similar results in mixed_list, test string representation and ordering
    mixed_list = [15, 18, 24, 24, 18]
    tuples_list = [("delta", [10]), ("epsilon", [20])]
    result = solution(mixed_list, tuples_list)
    assert result == ([('epsilon', [1410]), ('delta', [1400])], 42)

<|Test End|>
```