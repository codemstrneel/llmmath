QUESTION

Write a function to count the occurrences of the same element in two given lists. Ensure that your solution works efficiently for lists with up to 1,000 elements.

SOL & TESTS

```python
<|Solution Begin|>
def count_occurrences(list1, list2):
    """
    Counts the occurrences of the same element in two given lists.
    
    :param list1: First list of elements.
    :param list2: Second list of elements.
    :return: A dictionary where keys are elements common to both lists and values are the total occurrences in both lists.
    """
    from collections import Counter

    # Count elements for both lists
    count1 = Counter(list1)
    count2 = Counter(list2)

    # Find common elements and sum their counts
    common_counts = {el: count1[el] + count2[el] for el in count1 if el in count2}

    return common_counts
<|Solution End|>
```

```python
<|Test Begin|>
from solution import count_occurrences

def test_both_lists_empty():
    assert count_occurrences([], []) == {}

def test_one_list_empty():
    assert count_occurrences([1, 2, 3], []) == {}
    assert count_occurrences([], [1, 2, 3]) == {}

def test_no_common_elements():
    assert count_occurrences([1, 2, 3], [4, 5, 6]) == {}

def test_some_common_elements():
    assert count_occurrences([1, 2, 2, 3], [2, 3, 4, 4]) == {2: 3, 3: 2}

def test_all_common_elements():
    assert count_occurrences([1, 2, 3], [1, 2, 3, 1, 2, 3]) == {1: 3, 2: 3, 3: 3}

def test_repeated_elements():
    assert count_occurrences([1, 1, 1, 1, 2], [1, 2, 2, 2, 2]) == {1: 5, 2: 5}

def test_large_input_size_efficiency():
    list1 = [i for i in range(500)]*2  # 1000 elements
    list2 = [i for i in range(250, 750)]*2  # 1000 elements
    result = count_occurrences(list1, list2)
    expected_keys = set(range(250, 500))
    assert all(key in expected_keys for key in result.keys())
    assert all(result[key] == 4 for key in expected_keys)

<|Test End|>
```