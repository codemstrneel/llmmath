QUESTION

Create a function that takes a list of sentences and a range \((l, r)\) as input. The function should return a list of modified sentences where:
1. Each sentence has duplicate words removed.
2. Each sentence is split into substrings at uppercase letters.
3. The total length of the sentence (after processing) falls within the range \((l, r)\). Only include sentences that meet this criteria.

### Example:
```python
def process_sentences(sentences, l, r):
    # Your code here

input_sentences = [
    "The Quick Brown Fox Jumped Over The Lazy Dog",
    "Hello World HELLO WORLD",
    "Python Is Fun FUN and Easy EASY"
]

l = 5
r = 50

print(process_sentences(input_sentences, l, r))
```
### Expected Output:
```python
[
    ['The ', 'Quick ', 'Brown ', 'Fox ', 'Jumped ', 'Over ', 'The ', 'Lazy ', 'Dog'],
    ['Hello ', ' World ', 'HELLO ', ' WORLD'],
    ['Python ', ' Is ', ' Fun ', 'FUN ', ' and ', ' Easy ', 'EASY']
]
```
In this example, the total length of the sentences adjusted to split at uppercase letters would fall within the given range, thereby including them in the result.

SOL & TESTS

<|Solution Begin|>
```python
import re

def process_sentences(sentences, l, r):
    processed_sentences = []
    for sentence in sentences:
        # Step 1: Remove duplicate words
        words = sentence.split()
        seen = set()
        unique_words = []
        for word in words:
            word_lower = word.lower()
            if word_lower not in seen:
                unique_words.append(word)
                seen.add(word_lower)
        sentence_no_dupes = ' '.join(unique_words)
        
        # Step 2: Split sentence at uppercase letters
        split_at_uppercase = re.split(r'(?=[A-Z])', sentence_no_dupes.strip()) 
        
        # Step 3: Calculate total length and apply range check
        total_length = sum(len(part) for part in split_at_uppercase)
        if l <= total_length <= r:
            processed_sentences.append(split_at_uppercase)
    
    return processed_sentences
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_sentences

def test_process_sentences_all_conditions():
    input_sentences = [
        "The Quick Brown Brown Fox Jumped Over The Lazy Dog",
        "Hello Hello World HELLO WORLD",
        "Python Is Fun Fun FUN and Easy EASY"
    ]
    expected_output = [
        ['The ', ' Quick ', ' Brown ', 'Fox ', ' Jumped ', ' Over ', 'The ', ' Lazy ', ' Dog'],
        ['Hello ', ' World ', 'HELLO ', ' WORLD'],
        ['Python ', 'Is ', 'Fun ', 'FUN ', ' and ', ' Easy ', 'EASY']
    ]
    assert process_sentences(input_sentences, 5, 50) == expected_output

def test_process_sentences_empty_result():
    input_sentences = [
        "Python",
        "Short",
        "A B C"
    ]
    assert process_sentences(input_sentences, 15, 20) == []

def test_process_sentences_size_edge_cases():
    input_sentences = [
        "ThisIsASingleWord",
        "This Sentence Has Exactly Eleven Words Here Now",
        "Two Words"
    ]
    assert process_sentences(input_sentences, 15, 100) == [
        ['This', ' Is', ' A', ' Single', ' Word'],
        ['This ', 'Sentence ', 'Has ', 'Exactly ', 'Eleven ', 'Words ', 'Here ', 'Now']
    ]

def test_process_sentences_exclude_duplicates():
    input_sentences = [
        "Duplicate Duplicate words Words should Should not Not appear appear"
    ]
    expected_output = [['Duplicate ', 'words ', 'Words ', 'should ', 'Should ', 'not ', 'Not ', 'appear ', 'appear']]
    assert process_sentences(input_sentences, 1, 100) == expected_output

def test_process_sentences_edge_length():
    input_sentences = [
        "A long Sentence Long enough Sentence to be Trinity forty"
    ]
    expected_output = [['A ', 'long ', 'Sentence ', 'Long ', 'enough ', 'Sentence ', 'to ', 'be ', 'Trinity ', 'forty']]
    assert process_sentences(input_sentences, 40, 60) == expected_output
```
<|Test End|>