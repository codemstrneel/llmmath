QUESTION

Write a function that takes two arguments: a list of tuples and a string representing a date in yyyy-mm-dd format. The function should first convert the date to dd-mm-yyyy format, ensuring that it is a valid date. Then, for each tuple in the list, check if it is a subset of another tuple that has been created by splitting and structuring the newly formatted date string. The function should return a list of booleans, where each boolean indicates whether the corresponding tuple from the input list is a subset of the date-structured tuple.

SOLUTION/TESTS

To solve the problem, we need to:

1. Convert the input date from "yyyy-mm-dd" format to "dd-mm-yyyy" format.
2. Validate the converted date to ensure it is a valid and existing date.
3. Split the newly formatted date into a tuple of strings such as ("dd", "mm", "yyyy").
4. For each tuple in the given list, check if it is a subset of the date tuple.
5. Return a list of booleans indicating whether each tuple from the list is a subset of the date tuple.

Let's implement the `solution` function and corresponding unit tests as specified:

<|Solution Begin|>
```python
import datetime

def solution(tuples_list, date_str):
    # Convert date from 'yyyy-mm-dd' to 'dd-mm-yyyy'
    try:
        # Parse the date
        date_obj = datetime.datetime.strptime(date_str, '%Y-%m-%d')
        # Format the date in 'dd-mm-yyyy'
        formatted_date = date_obj.strftime('%d-%m-%Y')
    except ValueError:
        # If date is invalid, raise an error
        raise ValueError("Invalid date format or non-existent date")
    
    # Create a tuple from the formatted date
    date_tuple = tuple(formatted_date.split("-"))
    
    # Check if each tuple in the list is a subset of the date tuple
    result = [set(t).issubset(date_tuple) for t in tuples_list]
    
    return result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import solution
import pytest

def test_valid_date_and_tuples():
    tuples_list = [('12',), ('12', '11'), ('2023',)]
    date_str = '2023-11-12'
    assert solution(tuples_list, date_str) == [True, True, True]

def test_invalid_date_format():
    tuples_list = [('31',)]
    date_str = '2023-02-29'  # Invalid date as 2023 is not a leap year
    with pytest.raises(ValueError, match="Invalid date format or non-existent date"):
        solution(tuples_list, date_str)

def test_tuples_not_subset():
    tuples_list = [('13',), ('2022',), ('11', '13')]
    date_str = '2023-11-12' 
    assert solution(tuples_list, date_str) == [False, False, False]

def test_empty_tuples_list():
    tuples_list = []
    date_str = '2023-11-12'
    assert solution(tuples_list, date_str) == []

def test_empty_tuple():
    tuples_list = [()]
    date_str = '2023-11-12'
    assert solution(tuples_list, date_str) == [True]  # Empty tuple is subset of any tuple

def test_partial_subset():
    tuples_list = [('11',), ('2023', '12')]
    date_str = '2023-11-12'
    assert solution(tuples_list, date_str) == [True, False]
```
<|Test End|>