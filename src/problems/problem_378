QUESTION

Create a function that takes a list of mixed data inputs (containing both numbers and strings) and calculates a transformed value for each element using a lambda function. For numeric elements (integers or floats), raise them to the n-th power specified by an additional argument. For string elements, find all anagrams of the string from a provided list of strings. The function should return a tuple containing two lists: the first list with the transformed numeric elements as floats, and the second list with lists of anagrams for each string element. If a non-numeric, non-string element is encountered, raise a ValueError.

SOL & TESTS

```python
from typing import List, Union, Tuple

def transform_list(inputs: List[Union[int, float, str]], 
                   power: int, 
                   anagram_list: List[str]) -> Tuple[List[float], List[List[str]]]:
    """
    Transforms a list of mixed data inputs using a lambda function.
    
    - For numerical inputs (int or float), raise these to the `power` parameter and convert to float.
    - For string inputs, find all anagrams from `anagram_list`.
    - If an element is neither int, float, nor str, raise a ValueError.

    Returns a tuple containing a list of transformed numbers and a list of anagram lists.
    """
    
    def is_anagram(s1: str, s2: str) -> bool:
        return sorted(s1) == sorted(s2)
    
    anagrams = lambda s: [a for a in anagram_list if is_anagram(s, a)]
    
    numeric_results = []
    string_results = []
    
    for elem in inputs:
        if isinstance(elem, (int, float)):
            numeric_results.append(float(elem ** power))
        elif isinstance(elem, str):
            string_results.append(anagrams(elem))
        else:
            raise ValueError(f"Unsupported element type: {elem}")
    
    return numeric_results, string_results
```
<|Solution End|>
<|Test Begin|>
```python
import pytest
from solution import transform_list

def test_transform_list_all_numeric():
    assert transform_list([1, 2.5, 3], 2, [""]) == ([1.0, 6.25, 9.0], [])

def test_transform_list_all_strings():
    assert transform_list(["bat", "tab", "cat"], 2, ["bat", "tab", "tac", "act", "at"]) == ([], [["bat", "tab"], ["bat", "tab"], ["tac", "act"]])

def test_transform_list_mixed_inputs():
    inputs = [1, "bat", 2, "tab"]
    power = 2
    anagrams = ["bat", "tab", "tac", "act"]
    expected = ([1.0, 4.0], [["bat", "tab"], ["bat", "tab"]])
    assert transform_list(inputs, power, anagrams) == expected

def test_transform_list_empty_inputs():
    assert transform_list([], 3, ["bat", "tab"]) == ([], [])

def test_transform_list_unsupported_element():
    with pytest.raises(ValueError):
        transform_list([1, [2]], 2, ["bat", "tab"])
```
<|Test End|>