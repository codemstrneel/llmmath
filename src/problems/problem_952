QUESTION

Write a function to flatten a list of integers that may contain nested lists, with a maximum nesting depth of 2, into a single list of integers.

SOL & TESTS

```python
<|Solution Begin|>
def flatten_list(nested_list):
    """
    Flattens a nested list with a maximum nesting depth of 2
    into a single list of integers.
    
    :param nested_list: List containing integers and other lists.
    :return: A single list of integers.
    """
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(item)
        else:
            flattened.append(item)
    return flattened
```
<|Solution End|>

<|Test Begin|>
```python
def test_flatten_list_no_nesting():
    assert flatten_list([1, 2, 3]) == [1, 2, 3]
    
def test_flatten_list_single_level_nesting():
    assert flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]
    assert flatten_list([[1, 2], 3, 4]) == [1, 2, 3, 4]
    
def test_flatten_list_empty_nested_lists():
    assert flatten_list([1, [], 3]) == [1, 3]
    assert flatten_list([[], 2, [3, 4], []]) == [2, 3, 4]

def test_flatten_list_all_nested():
    assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4]
    assert flatten_list([[], [2, 3], []]) == [2, 3]

def test_flatten_list_shallow_elements():
    assert flatten_list([1, [2, [3], 4], 5]) == [1, 2, [3], 4, 5]
    
def test_flatten_list_nested_itself():
    assert flatten_list([[[1], 2], 3]) == [[1], 2, 3]
```
<|Test End|>