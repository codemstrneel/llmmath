QUESTION

Create a Python function to right rotate the bits of a given number.

SOL & TESTS

<|Solution Begin|> 
```python
def right_rotate_bits(n, k):
    """
    Right rotates the bits of the given integer n by k positions.
    
    :param n: The integer whose bits are to be rotated.
    :param k: The number of positions to rotate the bits.
    :return: The integer resulting from the right bit rotation.
    """
    # Calculate the number of bits in n
    bit_length = n.bit_length()
    if bit_length == 0:
        return 0  # Special case when n is 0

    # k might be larger than bit_length; in such a case, rotating by k
    # is the same as rotating by k % bit_length
    k = k % bit_length

    # Perform the rotation
    rotated_part = (n >> k) | (n << (bit_length - k))
    
    # Mask with bit_length number of 1s to remove overflowing bits
    rotated_part &= (1 << bit_length) - 1
    
    return rotated_part
```
<|Solution End|>
<|Test Begin|>
```python
from solution import right_rotate_bits

def test_right_rotate_bits_no_rotation():
    assert right_rotate_bits(0b1010, 0) == 0b1010

def test_right_rotate_bits_single_rotation():
    assert right_rotate_bits(0b1101, 1) == 0b1110

def test_right_rotate_with_complete_rotation():
    # If k is equal to bit length, result will be the same number
    assert right_rotate_bits(0b1011, 4) == 0b1011

def test_right_rotate_with_large_k():
    # If k is larger than bit length, it should be reduced modulo bit_length
    assert right_rotate_bits(0b111, 7) == 0b111

def test_right_rotate_all_bits():
    assert right_rotate_bits(0b1001, 2) == 0b0110

def test_right_rotate_bits_of_zero():
    # Rotating 0 by any number should still result in 0
    assert right_rotate_bits(0, 5) == 0

def test_right_rotate_large_number():
    n = 0b110110101111
    expected = 0b111011011010
    assert right_rotate_bits(n, 3) == expected
```
<|Test End|>