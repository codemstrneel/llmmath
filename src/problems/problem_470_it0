QUESTION

Write a Python function that takes a list of lists (sublists) and also accepts a range tuple. For each sublist, extract the last element and compute the modulo of that element with each element of a second provided tuple. If the modulo of any element is within the given range, replace that element with 20. Return a list of the modified sublists.

SOLUTION/TESTS

<|Solution Begin|>
def solution(sublists, range_tuple, mod_tuple):
    """
    For each sublist, extract the last element and compute the modulo of that element 
    with each element of mod_tuple. If the modulo of any element is within the given 
    range, replace that element with 20. Return a list of the modified sublists.
    """
    start, end = range_tuple
    modified_sublists = []

    for sublist in sublists:
        if not sublist:  # if sublist is empty, skip
            modified_sublists.append(sublist)
            continue
        last_element = sublist[-1]
        for i in range(len(sublist)):
            for mod_val in mod_tuple:
                if start <= last_element % mod_val <= end:
                    sublist[i] = 20
        modified_sublists.append(sublist)
    
    return modified_sublists
<|Solution End|>
<|Test Begin|>
def test_solution_empty_sublists():
    assert solution([[]], (0, 5), (3, 5)) == [[]]

def test_solution_single_sublists_in_range():
    assert solution([[1, 2, 6]], (0, 2), (4,)) == [[20, 20, 6]]

def test_solution_single_sublists_out_of_range():
    assert solution([[1, 2, 6]], (3, 5), (4,)) == [[20, 20, 20]]

def test_solution_multiple_sublists():
    assert solution([[1, 2, 6], [3, 4, 8], [5, 6, 10]], (1, 2), (3, 5)) == [
        [20, 20, 6], 
        [20, 20, 8], 
        [5, 6, 10]
    ]

def test_solution_no_modifications():
    assert solution([[1, 2, 3]], (10, 15), (2, 4)) == [[1, 2, 3]]

def test_solution_all_modifications():
    assert solution([[4, 8, 12]], (0, 3), (5,)) == [[20, 20, 20]]
<|Test End|>