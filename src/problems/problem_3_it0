QUESTION

Write a function that, given a string containing multiple float numbers (comma-separated) and a list of indices, converts the string into a list of tuples. Each tuple should contain a float from the string and a boolean indicating whether the float's position in the original string matches any position specified in the list of indices.

SOLUTION/TESTS

<|Solution Begin|>
def solution(numbers_string, indices):
    """
    Converts a comma-separated string of numbers into a list of tuples.
    Each tuple contains a float and a boolean indicating whether its position
    is present in the list of indices.
    
    :param numbers_string: A comma-separated string containing float numbers.
    :param indices: A list of indices.
    :return: A list of tuples (float, boolean).
    """
    numbers = numbers_string.split(',')
    result = []
    for i, number in enumerate(numbers):
        is_in_indices = i in indices
        result.append((float(number), is_in_indices))
    return result
<|Solution End|>

<|Test Begin|>
def test_solution_basic():
    assert solution("1.0,2.5,3.3", [1]) == [(1.0, False), (2.5, True), (3.3, False)]

def test_solution_empty_string():
    assert solution("", []) == []

def test_solution_no_indices():
    assert solution("2.4,5.6,7.8", []) == [(2.4, False), (5.6, False), (7.8, False)]

def test_solution_all_indices():
    assert solution("1.1,1.2,1.3", [0, 1, 2]) == [(1.1, True), (1.2, True), (1.3, True)]

def test_solution_out_of_range_indices():
    assert solution("3.3,4.4,5.5", [5, 6]) == [(3.3, False), (4.4, False), (5.5, False)]

def test_solution_mixed_indices():
    assert solution("9.8,7.6,5.4,3.2", [0, 2]) == [(9.8, True), (7.6, False), (5.4, True), (3.2, False)]

def test_solution_repeat_indices():
    assert solution("1.0,2.0,3.0,4.0", [1, 1, 3]) == [(1.0, False), (2.0, True), (3.0, False), (4.0, True)]

def test_solution_non_floats():
    try:
        solution("a,b,c", [0, 1, 2])
        assert False, "Expected ValueError"
    except ValueError:
        pass
<|Test End|>