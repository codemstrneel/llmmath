QUESTION

Write a Python function that performs the following tasks:

1. Takes as input a grid represented as a list of lists of numeric values and a single tuple representing a point in a coordinate plane. Each element in the grid is a potential obstacle when it equals zero.

2. Calculate the Euclidean distance from the center of the grid (assume the center if grid dimensions are odd, or the approximate center for even dimensions) to the given point, and store the distance value.

3. Implement a modified breadth-first search approach to find the number of valid paths from the top-left corner to the bottom-right corner of the grid. Paths can only move right or down and should not include cells with zero values. Furthermore, if a cell's value is less than or equal to the calculated Euclidean distance, consider it an obstacle as well and skip that path.

4. Return the number of valid paths along with a message indicating the total paths found.

SOL & TESTS

```markdown
<|Solution Begin|>
```python
import math
from collections import deque

def euclidean_distance(center, point):
    """
    Calculate Euclidean distance between two points.
    """
    return math.sqrt((center[0] - point[0]) ** 2 + (center[1] - point[1]) ** 2)

def number_of_valid_paths(grid, point):
    """
    Calculate the number of valid paths from the top-left to the bottom-right corner of the grid.
    """
    if not grid or not grid[0]:
        return (0, "Total paths found: 0")
    
    rows, cols = len(grid), len(grid[0])
    center = (rows / 2, cols / 2)
    distance = euclidean_distance(center, point)
    
    if grid[0][0] == 0 or grid[-1][-1] == 0:
        return (0, "Total paths found: 0")
    
    def is_valid(x, y):
        """
        Check if a cell is valid for movement.
        """
        return (0 <= x < rows and 0 <= y < cols and 
                grid[x][y] != 0 and grid[x][y] > distance)
    
    # BFS approach to count valid paths
    queue = deque([(0, 0)])
    path_count = 0
    
    while queue:
        x, y = queue.popleft()
        
        # If we have reached the bottom-right corner
        if (x, y) == (rows - 1, cols - 1):
            path_count += 1
            continue
        
        # Try moving right
        if is_valid(x, y + 1):
            queue.append((x, y + 1))
        
        # Try moving down
        if is_valid(x + 1, y):
            queue.append((x + 1, y))
    
    return (path_count, f"Total paths found: {path_count}")
```
<|Solution End|>

<|Test Begin|>
```python
from solution import number_of_valid_paths

def test_empty_grid():
    assert number_of_valid_paths([], (0, 0)) == (0, "Total paths found: 0")

def test_single_element_grid():
    assert number_of_valid_paths([[1]], (0, 0)) == (1, "Total paths found: 1")
    assert number_of_valid_paths([[0]], (0, 0)) == (0, "Total paths found: 0")

def test_no_valid_paths_due_to_obstacles():
    grid = [
        [1, 0, 1],
        [1, 0, 1],
        [1, 1, 1]
    ]
    assert number_of_valid_paths(grid, (1, 1)) == (0, "Total paths found: 0")

def test_all_paths_clear():
    grid = [
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]
    ]
    assert number_of_valid_paths(grid, (1, 1)) == (6, "Total paths found: 6")

def test_valid_paths_with_distance_obstacles():
    grid = [
        [5, 6, 7],
        [3, 2, 1],
        [1, 1, 1]
    ]
    assert number_of_valid_paths(grid, (0, 0)) == (1, "Total paths found: 1")
    
    # Center (1.5, 1.5), distance to (1, 1) is ~0.71; testing with different point
    grid = [
        [5, 6, 7],
        [3, 2, 4],
        [1, 5, 1]
    ]
    assert number_of_valid_paths(grid, (2, 2)) == (2, "Total paths found: 2")
```
<|Test End|>
```