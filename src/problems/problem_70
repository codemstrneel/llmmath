QUESTION

Write a Python function to calculate the nth Motzkin number. The Motzkin numbers are a sequence of integers that describe the number of different ways of drawing non-intersecting chords between n points on a circle (not necessarily touching every point with a chord). The sequence of Motzkin numbers starts with M(0) = 1, M(1) = 1, and further values are determined using the recurrence relation:

M(n) = M(n-1) + sum(M(k) * M(n-2-k) for k in range(n-1)) for n >= 2

Implement a function `motzkin_number(n: int) -> int` that takes a non-negative integer `n` and returns the nth Motzkin number.

SOLUTION/TESTS

Sure! Below is the implementation of the function to calculate the nth Motzkin number, along with the unit tests.

<|Solution Begin|>
def motzkin_number(n):
    """
    Calculate the nth Motzkin number.
    """
    if n < 0:
        raise ValueError("n must be a non-negative integer.")
    
    motzkin = [0] * (n+1)
    if n >= 0: motzkin[0] = 1
    if n >= 1: motzkin[1] = 1
    
    for i in range(2, n+1):
        motzkin[i] = motzkin[i-1]
        for k in range(i-1):
            motzkin[i] += motzkin[k] * motzkin[i-2-k]
    
    return motzkin[n]
<|Solution End|>

<|Test Begin|>
def test_motzkin_number_base_cases():
    assert motzkin_number(0) == 1
    assert motzkin_number(1) == 1

def test_motzkin_number_small_cases():
    assert motzkin_number(2) == 2
    assert motzkin_number(3) == 4
    assert motzkin_number(4) == 9

def test_motzkin_number_larger_cases():
    assert motzkin_number(5) == 21
    assert motzkin_number(6) == 51
    assert motzkin_number(7) == 127

def test_motzkin_number_invalid_cases():
    try:
        motzkin_number(-1)
        assert False, "Expected ValueError for negative input"
    except ValueError as e:
        assert str(e) == "n must be a non-negative integer."
<|Test End|>

These tests ensure both correctness for various values of `n` and proper handling of invalid input cases.