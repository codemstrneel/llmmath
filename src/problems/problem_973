QUESTION

Write a function to calculate the average (mean) of a list of numbers, and ensure that the function can handle input lists containing both integers and floating-point numbers, as well as handle potential division by zero errors when the list is empty.

SOL & TESTS

<|Solution Begin|>
```python
def calculate_average(numbers):
    """
    Returns the average of a list of numbers.
    If the list is empty, it returns 0 to handle division by zero error.
    Handles both integers and floating-point numbers.
    """
    if not numbers:
        return 0
    total_sum = sum(numbers)
    count = len(numbers)
    return total_sum / count
```
<|Solution End|>
<|Test Begin|>
```python
from solution import calculate_average

def test_average_with_integers():
    assert calculate_average([1, 2, 3, 4, 5]) == 3
    assert calculate_average([10, 20, 30, 40, 50]) == 30

def test_average_with_floats():
    assert calculate_average([1.5, 2.5, 3.5]) == 2.5
    assert calculate_average([10.0, 20.0, 25.0]) == 18.333333333333332

def test_average_with_mixed_numbers():
    assert calculate_average([1, 2.5, 3]) == 2.1666666666666665
    assert calculate_average([0.5, 1.5, 2]) == 1.3333333333333333

def test_average_with_empty_list():
    assert calculate_average([]) == 0

def test_average_with_single_number():
    assert calculate_average([5]) == 5
    assert calculate_average([7.5]) == 7.5
```
<|Test End|>