QUESTION

Write a function that first extracts words from a given sentence, verifies that their length is even, and checks if they contain the letter 'z' (not at the start or end). Then, for each qualifying word, treat its length as a column index and calculate the sum of these indices in a given list of lists.

SOLUTION/TESTS

<|Solution Begin|>
def solution(sentence, list_of_lists):
    """
    Extracts words from a sentence, filters them based on specific criteria, 
    and calculates the sum of column indices specified by the lengths of 
    qualifying words.
    
    Parameters:
    - sentence: a string containing the sentence to be processed.
    - list_of_lists: a list of lists of integers.
    
    Returns:
    - Sum of values from the specified column indices in the list_of_lists.
    """
    words = sentence.split()
    qualifying_word_lengths = [len(word) for word in words 
                               if len(word) % 2 == 0 and 'z' in word[1:-1]]  # Not at start or end

    total_sum = 0

    for length in qualifying_word_lengths:
        if length < len(list_of_lists[0]):  # Ensure the index is within bounds
            for row in list_of_lists:
                total_sum += row[length]

    return total_sum
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_no_qualifying_words():
    sentence = "Hello world with no z inside"
    list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    assert solution(sentence, list_of_lists) == 0

def test_with_one_qualifying_word():
    sentence = "The size of the puzzle is amazing"
    list_of_lists = [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9]]
    assert solution(sentence, list_of_lists) == (3 + 7)

def test_multiple_qualifying_words_and_length():
    sentence = "Fizzle or buzz in the zizzling puzzle"
    list_of_lists = [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]]
    # Qualifying words are "fizzle" (6), "puzzle" (6)
    assert solution(sentence, list_of_lists) == (6 + 6) * 2

def test_boundary_of_index():
    sentence = "Size does matter in dazzling maze"
    list_of_lists = [[1, 2, 3, 4], [4, 3, 2, 1]]
    # The word "dazzling" (8) will not qualify even though it meets the z criteria due to out of bounds
    assert solution(sentence, list_of_lists) == 0

def test_empty_sentence():
    sentence = ""
    list_of_lists = [[1, 2], [3, 4]]
    assert solution(sentence, list_of_lists) == 0

def test_empty_list_of_lists():
    sentence = "The size of the puzzle is amazing"
    list_of_lists = []
    # No valid columns can be processed
    assert solution(sentence, list_of_lists) == 0

<|Test End|>