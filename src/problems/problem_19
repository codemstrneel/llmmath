QUESTION

Create a function that takes a list of elements, where each element is a tuple consisting of a string, a list of positive integers, and a list of angles. For each tuple, calculate the sum of its integers and the sum of its angles. Identify the tuple with the integer list having the maximum sum. For this tuple, check if the angle list can form a valid triangle with a positive area. Return the string associated with this tuple, the sum of the integers, and a boolean indicating whether a valid triangle is possible.

SOLUTION/TESTS

<|Solution Begin|>
def solution(tuples_list):
    """
    Takes a list of tuples, identifies the tuple with the max integer sum, and checks if its angles can form a valid triangle.
    
    Args:
        tuples_list: A list of tuples. 
                     Each tuple consists of a string, a list of integers, and a list of angles.
                     
    Returns:
        A tuple with the string from the identified tuple, the sum of its integers, 
        and a boolean indicating if the angles can form a valid triangle.
    """
    
    def is_valid_triangle(angles):
        """
        Checks if three angles can form a valid triangle.
        
        Args:
            angles: A list of three angles.
            
        Returns:
            True if the angles can form a valid triangle, False otherwise.
        """
        if len(angles) != 3:
            return False
        if sum(angles) != 180:
            return False
        return all(angle > 0 for angle in angles)
    
    max_sum = -1
    result_tuple = ('', 0, False)
    
    for name, int_list, angles in tuples_list:
        current_sum = sum(int_list)
        if current_sum > max_sum:
            max_sum = current_sum
            valid_triangle = is_valid_triangle(angles)
            result_tuple = (name, current_sum, valid_triangle)
    
    return result_tuple
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_solution_simple_case():
    input_data = [("First", [1, 2, 3], [60, 60, 60]), 
                  ("Second", [4, 5, 6], [30, 60, 90])]
    assert solution(input_data) == ("Second", 15, True)

def test_solution_no_valid_triangle():
    input_data = [("First", [0, 0, 0], [0, 0, 0]), 
                  ("Second", [4, 5, 6], [30, 60, 100])]
    assert solution(input_data) == ("Second", 15, False)

def test_solution_one_element():
    input_data = [("Single", [4, 5, 6], [50, 60, 70])]
    assert solution(input_data) == ("Single", 15, True)

def test_solution_identical_sums():
    input_data = [("First", [1, 2, 12], [60, 60, 60]),
                  ("Second", [4, 5, 6], [60, 60, 60])]
    assert solution(input_data) == ("First", 15, True)

def test_solution_negative_or_zero_integers():
    input_data = [("Negative", [-1, -2, -3], [60, 60, 60]), 
                  ("Zero", [0, 0, 0], [60, 60, 60])]
    assert solution(input_data) == ("Negative", -6, True)

def test_solution_no_angles():
    input_data = [("NoAngles", [4, 5, 6], [])]
    assert solution(input_data) == ("NoAngles", 15, False)
<|Test End|>