QUESTION

Write a Python function that takes a list containing integers, floating-point numbers, and strings. The function should return a list of dictionaries, where each dictionary contains the following three key-value pairs:

1. `'numeric_info'`: A tuple with two elements. The first element is a list of all distinct integers (including those from rounding floating-point numbers) that are odd, sorted in decreasing order. The second element is the minimum value of the periodic function `cos(x) - sin(3*x)` evaluated at each of these integers.

2. `'string_summary'`: A dictionary where each key is a unique character found across all strings in the input list, and each value is the sum of ASCII values of all occurrences of that character in all strings.

3. `'subsequence_lengths'`: A list of lengths of contiguous sub-sequences found in the list formed by sorting all unique numbers derived by converting every character of each string into its corresponding Unicode value. Each character's Unicode value is treated as a separate unique number, and only distinct values should be evaluated for sequence identification.

The function should effectively collate, evaluate, and return these diverse data characteristics integrated into a singular cohesive output.

SOL & TESTS

```markdown
<|Solution Begin|>
```python
from math import cos, sin

def process_list(input_list):
    # Helper function to evaluate the periodic function
    def periodic_function(x):
        return cos(x) - sin(3 * x)
    
    integers = set()
    floating_points = set()
    strings = []
    
    # Separate elements into their respective categories
    for item in input_list:
        if isinstance(item, int):
            integers.add(item)
        elif isinstance(item, float):
            floating_points.add(item)
        elif isinstance(item, str):
            strings.append(item)
    
    # Combine integers and floored floating point numbers for odd check
    odd_integers = {int(floor_item) for floor_item in floating_points if int(floor_item) % 2 != 0}
    odd_integers.update({integer for integer in integers if integer % 2 != 0})
    odd_integers = sorted(odd_integers, reverse=True)
    
    # Calculate minimum value of the periodic function for these integers
    periodic_function_values = [periodic_function(x) for x in odd_integers]
    min_periodic_value = min(periodic_function_values) if periodic_function_values else None
    
    # Build character ASCII value dictionary
    char_summary = {}
    for string in strings:
        for char in string:
            if char in char_summary:
                char_summary[char] += ord(char)
            else:
                char_summary[char] = ord(char)
    
    # Create a list of unicode values for unique characters and determine subsequences
    unicode_values = sorted(set(ord(char) for string in strings for char in string))
    subsequence_lengths = []
    if unicode_values:
        current_subsequence_length = 1
        for i in range(1, len(unicode_values)):
            if unicode_values[i] == unicode_values[i-1] + 1:
                current_subsequence_length += 1
            else:
                subsequence_lengths.append(current_subsequence_length)
                current_subsequence_length = 1
        subsequence_lengths.append(current_subsequence_length)  # Append the last subsequence length
    
    return [{
        'numeric_info': (odd_integers, min_periodic_value),
        'string_summary': char_summary,
        'subsequence_lengths': subsequence_lengths
    }]
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_list

def test_process_list():
    # Test with a mixed input
    result = process_list([
        1, 3, 4.7, 'hello', 'world', 14.2, -3.1, 9, 'test', 'Python!'
    ])
    assert result == [{
        'numeric_info': ([9, 3, 1], pytest.approx(-1.404783184, rel=1e-2)),
        'string_summary': {
            'h': 104, 'e': 101, 'l': 216, 'o': 218, 
            'w': 119, 'r': 114, 'd': 100, 't': 232, 
            's': 115, 'P': 80, 'y': 121, 'n': 110, 
            '!': 33
        },
        'subsequence_lengths': [1, 2, 3]
    }]

    # Test with no integers, only strings
    result = process_list(['abc', 'defg'])
    assert result == [{
        'numeric_info': ([], None),
        'string_summary': {
            'a': 97, 'b': 98, 'c': 99, 
            'd': 100, 'e': 101, 'f': 102, 'g': 103
        },
        'subsequence_lengths': [7]
    }]

    # Test with only integers
    result = process_list([1, 2, 3, 4, 5])
    assert result == [{
        'numeric_info': ([5, 3, 1], pytest.approx(-1.0, rel=1e-2)),
        'string_summary': {},
        'subsequence_lengths': []
    }]

    # Test with only floats
    result = process_list([1.5, 2.5, 3.5])
    assert result == [{
        'numeric_info': ([1, 3], pytest.approx(-1.0, rel=1e-2)),
        'string_summary': {},
        'subsequence_lengths': []
    }]

    # Test with empty list
    result = process_list([])
    assert result == [{
        'numeric_info': ([], None),
        'string_summary': {},
        'subsequence_lengths': []
    }]

```
<|Test End|>
```