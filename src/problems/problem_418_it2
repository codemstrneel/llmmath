QUESTION

Write a function that checks if two given lists are isomorphic, meaning that there is a one-to-one mapping possible between elements of the first list and elements of the second list. Also, ensure that the function returns a new list which contains the common elements at corresponding indices from both the lists.

SOLUTION/TESTS

The failure in the tests seems to stem from incorrect test case expectations or implementation. Let's review and correct the logic, especially for extracting common elements at corresponding indices, ensuring it's robust against various list pairs. Additionally, let's ensure that our tests precisely reflect the expected results according to the task definition about the isomorphic structure and common elements at identical indices.

I'll adjust the `solution` function and tests accordingly.

<|Solution Begin|>
def solution(list1, list2):
    """
    Checks if the two lists are isomorphic and returns a list of common elements at corresponding indices.
    """
    # Check if lengths are the same
    if len(list1) != len(list2):
        return False, []

    map1 = {}
    map2 = {}
    for item1, item2 in zip(list1, list2):
        if (item1 in map1 and map1[item1] != item2) or (item2 in map2 and map2[item2] != item1):
            return False, []

        map1[item1] = item2
        map2[item2] = item1
    
    # Collect common elements at corresponding indices
    common_elements = [item1 for item1, item2 in zip(list1, list2) if item1 == item2]
    
    return True, common_elements
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_isomorphic_equal_lists():
    assert solution([1, 2, 3], [1, 2, 3]) == (True, [1, 2, 3])

def test_isomorphic_different_lists_without_common():
    assert solution([1, 2, 3], [4, 5, 6]) == (True, [])

def test_isomorphic_different_lists_with_some_common():
    assert solution(['a', 'b', 'c', 'a'], ['x', 'y', 'c', 'a']) == (True, ['c', 'a'])

def test_non_isomorphic_lists_due_to_repetition():
    assert solution([1, 2, 2], [1, 2, 3]) == (False, [])

def test_non_isomorphic_lists_due_to_different_lengths():
    assert solution([1, 2, 3], [1, 2]) == (False, [])

def test_non_isomorphic_inverse_mappings():
    assert solution(['a', 'b', 'b'], ['x', 'y', 'x']) == (False, [])
<|Test End|>

These tests ensure that:
- The function identifies pairs with the same length as isomorphic if mapping criteria are met.
- The function collects the correct common elements at identical indices.
- The function properly identifies non-isomorphic pairs due to repetition issues or mismatched lengths.