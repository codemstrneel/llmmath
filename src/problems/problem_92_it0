QUESTION

Write a Python function that takes two lists of integers and an integer `n`. First, rotate the first list `n` positions to the right, and rotate the second list `n` positions to the left. Then, find all elements that are unique to either one of the rotated lists, but not both. Calculate the sum of these unique elements, and return the result. If no unique elements exist, return 0.

SOLUTION/TESTS

<|Solution Begin|>
def solution(list1, list2, n):
    """
    Rotate the first list `n` positions to the right, and rotate the second list `n` positions to the left.
    Then, find all elements that are unique to either one of the rotated lists, but not both.
    Calculate the sum of these unique elements, and return the result. If no unique elements exist, return 0.
    """
    
    def rotate_right(lst, num):
        num %= len(lst)
        return lst[-num:] + lst[:-num]

    def rotate_left(lst, num):
        num %= len(lst)
        return lst[num:] + lst[:num]

    rotated_list1 = rotate_right(list1, n)
    rotated_list2 = rotate_left(list2, n)

    unique_elements = set(rotated_list1).symmetric_difference(set(rotated_list2))
    
    return sum(unique_elements)

<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_basic():
    assert solution([1, 2, 3, 4], [3, 4, 5, 6], 1) == 15  # unique elements are 1, 2, 5, 6

def test_solution_all_unique():
    assert solution([1, 2, 3], [4, 5, 6], 2) == 21  # all elements are unique

def test_solution_no_unique():
    assert solution([1, 2, 3], [1, 2, 3], 1) == 0   # no unique elements

def test_solution_with_zero_rotation():
    assert solution([1, 2, 3], [3, 2, 1], 0) == 0   # no unique elements, even with no rotation

def test_solution_different_lengths():
    assert solution([1, 2, 3, 4], [5, 6, 7, 8, 9], 2) == 28  # unique elements are 1, 2, 8, 9

def test_solution_single_element_lists():
    assert solution([1], [2], 3) == 3  # unique elements are 1 and 2

def test_solution_large_rotation():
    assert solution([1, 2, 3, 4], [4, 5, 6, 7], 10) == 15  # same as rotation 2, unique are 1, 2, 5, 6

<|Test End|>