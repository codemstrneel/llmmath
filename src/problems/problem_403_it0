QUESTION

Create a function that groups elements of a list into consecutive sublists of length n, discarding any leftover elements that do not fit into a complete sublist. Additionally, ensure that each sublist is sorted in ascending order.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst, n):
    """
    Groups elements of a list into consecutive sublists of length n, discarding any leftover elements,
    and ensures each sublist is sorted in ascending order.
    
    :param lst: The list of elements to be grouped.
    :param n: The length of each sublist.
    :return: A list of sorted consecutive sublists of length n.
    """
    grouped = [sorted(lst[i:i+n]) for i in range(0, len(lst), n) if len(lst[i:i+n]) == n]
    return grouped
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_group_exact_division():
    assert solution([4, 1, 3, 2, 8, 7, 5, 6], 4) == [[1, 2, 3, 4], [5, 6, 7, 8]]

def test_group_with_remainder():
    assert solution([10, 22, 21, 20, 11, 23, 24], 3) == [[10, 20, 21], [11, 22, 23]]

def test_group_large_n():
    assert solution([2, 4, 1, 3, 5], 5) == [[1, 2, 3, 4, 5]]

def test_group_no_valid_sublists():
    assert solution([4, 3, 2, 1], 5) == []

def test_group_single_full_sublists():
    assert solution([9, 7, 6, 5, 10], 5) == [[5, 6, 7, 9, 10]]

def test_group_empty_list():
    assert solution([], 3) == []

def test_group_n_is_one():
    assert solution([3, 1, 2], 1) == [[3], [1], [2]]
<|Test End|>