QUESTION

Design a function that processes a list of mixed data types (i.e., integers, floating-point numbers, and strings) and returns a detailed summary comprising two elements:

1. A dictionary where each key is a unique string from the list, and its corresponding value is either the frequency of that string or its rank as the second most frequent string among all strings detected in the list.

2. Another dictionary where each key is a unique floating-point number from the list. The associated value should be a tuple consisting of the frequency of that number (consider only positive numbers and use a lambda function), and a list of the longest sub-sequence of consecutive integers derived from rounding all floating-point numbers (both positive and negative) in the list.

Implement this function such that it effectively integrates the identification and counting of elements, frequency ranking, and sequence detection in a cohesive manner, as inspired by the provided concepts.

SOL & TESTS

```python
<|Solution Begin|>
def process_mixed_data(data):
    from collections import Counter
    from itertools import groupby
    
    # Separate strings and floats
    str_counts = Counter(s for s in data if isinstance(s, str))
    float_counts = Counter(x for x in data if isinstance(x, float) and x > 0) 
    
    # Finding "second" most common string
    str_freq = str_counts.most_common()
    str_dict = {}
    if len(str_freq) >= 2:
        second_most_common_count = str_freq[1][1]
    else:
        second_most_common_count = 0
    
    for word, count in str_freq:
        if count == second_most_common_count:
            str_dict[word] = 'second most frequent'
        else:
            str_dict[word] = count
    
    # Rounding float numbers and finding longest consecutive sequence
    float_numbers = [round(x) for x in data if isinstance(x, float)]
    float_sequence = []
    float_sequence_dict = {}
    for k, g in groupby(enumerate(sorted(float_numbers)), lambda x:x[1] - x[0]):
        float_sequence.append(list(map(lambda x: x[1], g)))
    
    longest_subsequence = max(float_sequence, key=len) if float_sequence else []
    
    # applying the lambda condition to decide values in dict for float_freq
    float_dict = {num: (count, longest_subsequence) for num, count in float_counts.items()}
    
    return str_dict, float_dict
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_mixed_data

def test_process_mixed_data_basic():
    data = ['apple', 'banana', 'apple', 'orange', 'banana', 'banana', 1.5, 1.6, 1.7, 2.5, 2.6]
    expected_str_dict = {'apple': 2, 'banana': 'second most frequent', 'orange': 1}
    expected_float_dict = {1.5: (1, [1, 2]), 2.5: (1, [1, 2])}
    assert process_mixed_data(data) == (expected_str_dict, expected_float_dict)

def test_process_mixed_data_no_second_frequent():
    data = ['apple', 'orange', 'orange', 1.1, 1.2, 5.1, 5.2]
    expected_str_dict = {'apple': 1, 'orange': 2}
    expected_float_dict = {1.1: (1, [1, 5]), 5.1: (1, [1, 5])}
    assert process_mixed_data(data) == (expected_str_dict, expected_float_dict)

def test_process_mixed_data_only_strings():
    data = ['apple', 'banana', 'apple']
    expected_str_dict = {'apple': 'second most frequent', 'banana': 1}
    expected_float_dict = {}
    assert process_mixed_data(data) == (expected_str_dict, expected_float_dict)

def test_process_mixed_data_only_floats():
    data = [3.1, 1.2, 1.3, 1.5]
    expected_str_dict = {}
    expected_float_dict = {3.1: (1, [1, 3]), 1.2: (1, [1, 3])}
    assert process_mixed_data(data) == (expected_str_dict, expected_float_dict)

def test_process_mixed_data_empty():
    data = []
    expected_str_dict = {}
    expected_float_dict = {}
    assert process_mixed_data(data) == (expected_str_dict, expected_float_dict)

def test_process_mixed_data_single_string():
    data = ['apple']
    expected_str_dict = {'apple': 1}
    expected_float_dict = {}
    assert process_mixed_data(data) == (expected_str_dict, expected_float_dict)

def test_process_mixed_data_single_float():
    data = [1.1]
    expected_str_dict = {}
    expected_float_dict = {1.1: (1, [1])}
    assert process_mixed_data(data) == (expected_str_dict, expected_float_dict)
```
<|Test End|>