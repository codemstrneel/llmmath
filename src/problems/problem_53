QUESTION

Write a Python function that takes two inputs: a dictionary where the keys are strings representing different items and the values are mixed lists (containing integers, strings, and/or other data types), and a target character as a string. The function should extract all unique even integer values from all mixed lists, remove any duplicates, and then form a single string by concatenating these even numbers. Finally, the function should return the number of times the target character appears in this concatenated string.

SOLUTION/TESTS

<|Solution Begin|>
def solution(data_dict, target_char):
    """
    Extracts all unique even integers from mixed lists in data_dict,
    concatenates them into a string, and counts the occurrences
    of target_char in the concatenated string.
    """
    unique_evens = set()
    
    for values in data_dict.values():
        for value in values:
            if isinstance(value, int) and value % 2 == 0:
                unique_evens.add(value)
    
    # Create a single string from the unique even integers
    concatenated_string = ''.join(str(num) for num in sorted(unique_evens))
    
    # Count occurrences of target_char in the concatenated string
    return concatenated_string.count(target_char)
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_basic():
    data_dict = {
        "item1": [2, "a", 4, 3.14],
        "item2": [4, 2, 6, "b"],
        "item3": ["text", 8, 2, "c", 10]
    }
    target_char = "2"
    assert solution(data_dict, target_char) == 1  # "246810" -> one "2"

def test_solution_no_target_occurrences():
    data_dict = {
        "item1": [1, 3, 5],
        "item2": [7, 9],
        "item3": [11, 13]
    }
    target_char = "0"
    assert solution(data_dict, target_char) == 0  # No even numbers

def test_solution_multiple_target_occurrences():
    data_dict = {
        "item1": [20, 40],
        "item2": [40, 60],
        "item3": [80, 100]
    }
    target_char = "0"
    assert solution(data_dict, target_char) == 3  # "20406080100" -> three "0"

def test_solution_mixed_data_types():
    data_dict = {
        "item1": ["hello", 2, False],
        "item2": [{1, 2, 3}, 4.0],
        "item3": [(1,), 6, 8.8]
    }
    target_char = "8"
    assert solution(data_dict, target_char) == 1  # "246" -> no "8"

def test_solution_empty_dict():
    data_dict = {}
    target_char = "1"
    assert solution(data_dict, target_char) == 0  # No data

<|Test End|>