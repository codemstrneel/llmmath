QUESTION

Create a function that takes a dictionary and an integer n as input. The dictionary has strings as keys and lists of integers as values. The function should first compute the sum of the integers in each list and find the highest product of two sums among all the lists. Then for each original list, replicate that list's sum n times, and add these replicated sums to a list. Return a tuple containing this list and the highest product previously calculated.

SOLUTION/TESTS

<|Solution Begin|>
def solution(d, n):
    """
    Given a dictionary with string keys and list of integers as values, and an integer n,
    compute the required tuple as per the problem statement.
    
    :param d: Dictionary with string keys and list of integers as values.
    :param n: Number of times to replicate each list's sum.
    :return: A tuple containing a list of sums replicated n times and the highest product of two sums.
    """
    # Dictionary to hold sums of each list
    sums = {key: sum(value) for key, value in d.items()}
    
    # List of sums
    sums_list = list(sums.values())
    
    # Compute the highest product of two different sums
    max_product = float('-inf')
    
    for i in range(len(sums_list)):
        for j in range(i + 1, len(sums_list)):
            product = sums_list[i] * sums_list[j]
            if product > max_product:
                max_product = product

    # Replicate each sum n times
    replicated_sums = []
    for value_sum in sums_list:
        replicated_sums.extend([value_sum] * n)

    return (replicated_sums, max_product)
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_basic_case():
    data = {'a': [1, 2, 3], 'b': [4, 5], 'c': [1, 1, 1]}
    result = solution(data, 2)
    assert result == ([6, 6, 9, 9, 3, 3], 54), "Test failed for basic case"

def test_empty_dict():
    data = {}
    result = solution(data, 3)
    assert result == ([], float('-inf')), "Test failed for empty dictionary"

def test_single_element_lists():
    data = {'a': [1], 'b': [2], 'c': [3]}
    result = solution(data, 1)
    assert result == ([1, 2, 3], 6), "Test failed for single element lists"

def test_large_n():
    data = {'a': [1, 2, 3]}
    result = solution(data, 5)
    assert result == ([6, 6, 6, 6, 6], float('-inf')), "Test failed for large n with single list"

def test_with_negative_values():
    data = {'a': [-2, -3], 'b': [4, 5]}
    result = solution(data, 2)
    assert result == ([-5, -5, 9, 9], 45), "Test failed with negative values"

def test_identical_sums():
    data = {'a': [2, 3], 'b': [1, 4]}
    result = solution(data, 2)
    assert result == ([5, 5, 5, 5], 25), "Test failed for identical sums in different lists"

<|Test End|>