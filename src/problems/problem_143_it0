QUESTION

Write a function that takes two arrays as input. First, check if every element in the first array appears at least once in the second array, regardless of order. If this condition is met, concatenate the two arrays into a nested structure where the first array appears as a subset inside the second array, but rotated left by a number of positions equal to the greatest common divisor (gcd) of the lengths of the two arrays. Finally, return this nested structure.

SOLUTION/TESTS

Below is the implementation and unit tests for the given task. The function `solution` will take two arrays as input and perform the required operations according to the problem statement.

```python
<|Solution Begin|>
import math
from collections import Counter

def solution(arr1, arr2):
    """
    Concatenates two arrays into a nested structure where the first array appears as a subset
    inside the second array rotated to the left by the gcd of the lengths of the two arrays,
    provided every element in arr1 appears in arr2.
    
    Args:
    arr1 (list): The first array of elements.
    arr2 (list): The second array of elements.

    Returns:
    list: The nested structure combining both arrays if arr1 elements are in arr2, else None.
    """
    # Check if every element in arr1 appears in arr2
    count1 = Counter(arr1)
    count2 = Counter(arr2)

    for elem in count1:
        if count1[elem] > count2.get(elem, 0):
            return None
    
    # Calculate the rotation based on gcd of array sizes
    length1 = len(arr1)
    length2 = len(arr2)
    rotation_steps = math.gcd(length1, length2)

    # Rotate arr2 by the calculated steps
    rotated_arr2 = arr2[rotation_steps:] + arr2[:rotation_steps]

    # Return the nested structure
    return [arr1, rotated_arr2]
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_solution_elements_in_arr1_in_arr2():
    # Normal test case where all elements are in arr2
    assert solution([1, 2], [2, 1, 3, 4]) == [[1, 2], [4, 2, 1, 3]]

def test_solution_element_not_in_arr2():
    # An element is not present in arr2, hence should return None
    assert solution([1, 5], [2, 1, 3, 4]) == None

def test_solution_rotation_empty_arr1():
    # Edge case where arr1 is empty
    assert solution([], [2, 1, 3, 4]) == [[], [1, 3, 4, 2]]

def test_solution_rotation_empty_arr2():
    # Edge case where arr2 is empty
    assert solution([1, 2], []) == None

def test_solution_identical_arrays():
    # Identical arrays
    assert solution([1, 2], [1, 2]) == [[1, 2], [1, 2]]

def test_solution_non_integer_elements():
    # Case with non-integer elements
    assert solution(['a', 'b'], ['b', 'a', 'c']) == [['a', 'b'], ['c', 'b', 'a']]
<|Test End|>
```

### Explanation:
1. The function `solution` checks if each element in `arr1` is present in `arr2` by using `collections.Counter` for counting occurrences and comparing counts.
2. It calculates the number of positions to rotate `arr2` based on the gcd of the lengths of `arr1` and `arr2`.
3. If the condition is met, it rotates `arr2` and returns the required nested list structure.
4. The unit tests cover various cases, including normal cases, edge cases with empty arrays, and non-integer elements to ensure the implementation works correctly.