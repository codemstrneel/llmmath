QUESTION

Create a function to reorganize the given array so that all 0s come first, followed by all 1s, and then all 2s. The array contains only the elements 0, 1, and 2.

SOL & TESTS

<|Solution Begin|> 
```python
def sort_012_array(arr):
    """
    Reorganizes the given array so that all 0s come first, followed by all 1s, and then all 2s.
    The array contains only the elements 0, 1, and 2.
    """
    count_0 = 0
    count_1 = 0
    count_2 = 0
    
    # Count occurrences of 0s, 1s and 2s
    for num in arr:
        if num == 0:
            count_0 += 1
        elif num == 1:
            count_1 += 1
        elif num == 2:
            count_2 += 1
    
    # Update array based on counts
    arr[:count_0] = [0] * count_0
    arr[count_0:count_0 + count_1] = [1] * count_1
    arr[count_0 + count_1:] = [2] * count_2
    
    return arr
```
<|Solution End|>

<|Test Begin|>
```python
from solution import sort_012_array

def test_sort_012_array_all_same():
    assert sort_012_array([0, 0, 0]) == [0, 0, 0]
    assert sort_012_array([1, 1, 1]) == [1, 1, 1]
    assert sort_012_array([2, 2, 2]) == [2, 2, 2]

def test_sort_012_array_already_sorted():
    assert sort_012_array([0, 1, 2]) == [0, 1, 2]
    assert sort_012_array([0, 0, 1, 1, 2, 2]) == [0, 0, 1, 1, 2, 2]

def test_sort_012_array_reverse_sorted():
    assert sort_012_array([2, 1, 0]) == [0, 1, 2]
    assert sort_012_array([2, 2, 1, 1, 0, 0]) == [0, 0, 1, 1, 2, 2]

def test_sort_012_array_unsorted():
    assert sort_012_array([0, 2, 1, 0, 1, 2]) == [0, 0, 1, 1, 2, 2]
    assert sort_012_array([2, 0, 0, 1, 2, 1]) == [0, 0, 1, 1, 2, 2]

def test_sort_012_array_empty():
    assert sort_012_array([]) == []

def test_sort_012_array_single_element():
    assert sort_012_array([0]) == [0]
    assert sort_012_array([1]) == [1]
    assert sort_012_array([2]) == [2]
```
<|Test End|>