QUESTION

**New Question:**

Create a function that takes a dictionary, where the keys represent different geometric shapes and the values are lists of tuples. Each tuple represents the dimensions needed to define a shape (like sides for triangles). The function should do the following:

1. For keys representing triangles, determine the type of each triangle ("equilateral", "isosceles", or "scalene") using the tuples of side lengths provided.
2. For each type of triangle, determine the number of unique triangle types and store this information.
3. For all other shapes, calculate the greatest common divisor (gcd) of the sums of the dimensions within each shape's list of tuples. Assume dimension sums can be meaningfully compared for gcd computation.
4. Finally, return a dictionary with keys sorted in alphabetical order. The values should be:
   - For triangles, a dictionary mapping triangle types ("equilateral", "isosceles", "scalene") to their count of unique representations.
   - For other shapes, the computed gcd of the dimension sums.

Example input:

```python
shapes = {
    "triangle": [(3, 3, 3), (3, 4, 5), (5, 5, 5), (5, 5, 8)],
    "rectangle": [(4, 6), (8, 10), (6, 6)],
    "pentagon": [(5, 5, 3), (9, 10, 11)]
}
```

Expected output:

```python
{
    "pentagon": [gcd_of_dimension_sums],
    "rectangle": [gcd_of_dimension_sums],
    "triangle": {"equilateral": 1, "isosceles": 2, "scalene": 1},
}
``` 

This problem combines concepts of processing structured data such as dictionaries with the mathematical analysis of shapes and number theory through gcd calculations.

SOL & TESTS

```python
<|Solution Begin|>
from math import gcd
from collections import Counter
from functools import reduce

def triangle_type(sides):
    a, b, c = sorted(sides)
    if a == b == c:
        return "equilateral"
    elif a == b or b == c or c == a:
        return "isosceles"
    else:
        return "scalene"

def gcd_of_dimensions(dimensions):
    sums = [sum(d) for d in dimensions]
    if sums:
        return reduce(gcd, sums)
    return 0

def analyze_shapes(shapes):
    result = {}
    
    for shape in sorted(shapes.keys()):
        if shape == "triangle":
            type_count = Counter(triangle_type(sides) for sides in shapes[shape])
            result[shape] = dict(type_count)
        else:
            result[shape] = gcd_of_dimensions(shapes[shape])
            
    return result
```
<|Solution End|>

```python
<|Test Begin|>
from solution import analyze_shapes
from math import gcd

def test_analyze_shapes_triangle_types():
    input_data = {
        "triangle": [(3, 3, 3), (3, 4, 5), (5, 5, 5), (5, 5, 8)]
    }
    expected_output = {
        "triangle": {"equilateral": 1, "isosceles": 2, "scalene": 1},
    }
    assert analyze_shapes(input_data) == expected_output

def test_analyze_shapes_with_rectangle():
    input_data = {
        "rectangle": [(4, 6), (8, 10), (6, 6)]
    }
    expected_gcd = gcd(gcd(10, 18), 16)
    expected_output = {
        "rectangle": expected_gcd,
    }
    assert analyze_shapes(input_data) == expected_output

def test_analyze_shapes_with_mixed_shapes():
    input_data = {
        "triangle": [(3, 4, 5), (5, 5, 5)],
        "rectangle": [(4, 6)],
        "pentagon": [(5, 5, 3)]
    }
    expected_triangle_output = {"equilateral": 1, "scalene": 1}
    expected_rectangle_gcd = gcd(10)
    expected_pentagon_gcd = gcd(13)
    
    expected_output = {
        "pentagon": expected_pentagon_gcd,
        "rectangle": expected_rectangle_gcd,
        "triangle": expected_triangle_output,
    }
    assert analyze_shapes(input_data) == expected_output

def test_empty_shapes():
    input_data = {}
    expected_output = {}
    assert analyze_shapes(input_data) == expected_output

def test_no_triangle_shapes():
    input_data = {
        "pentagon": [(5, 7, 8)],
        "rectangle": [(3, 9)],
    }
    expected_pentagon_gcd = gcd(20)
    expected_rectangle_gcd = gcd(12)
    expected_output = {
        "pentagon": expected_pentagon_gcd,
        "rectangle": expected_rectangle_gcd,
    }
    assert analyze_shapes(input_data) == expected_output

def test_single_entry_non_triangle_shape():
    input_data = {
        "hexagon": [(10, 10)]
    }
    expected_output = {
        "hexagon": gcd(20)
    }
    assert analyze_shapes(input_data) == expected_output
```
<|Test End|>