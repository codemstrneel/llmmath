QUESTION

Create a Python function that takes a list of tuples as input. Each tuple contains three elements: a number, a string, and another number. The function should perform the following tasks:

1. Find and return the tuple where the first element is the maximum among all first elements of the tuples.
2. Use a lambda function to filter the tuples where the first or the third element is a multiple of a given number \( d \).
3. For the tuples that pass this filter, count the number of vowels in the string element of each tuple and return the compiled list of these counts.

Your function should handle edge cases where the list may be empty, or the tuples may have `None` values. Ensure that the operations are performed only on valid tuples.

SOL & TESTS

```python
<|Solution Begin|>
def process_tuples(tuples_list, d):
    """
    Processes a list of tuples (num_a, string, num_b) by performing the following:
    1. Finds and returns the tuple with the maximum first element.
    2. Filters tuples where the first or third element is a multiple of d
       and returns a list of counts of vowels in the string of those tuples.
    
    :param tuples_list: List of tuples to process.
    :param d: The divisor used to filter tuples.
    :return: Tuple with max first element, list of counts of vowels in filtered tuples.
    """
    
    # Filter out invalid tuples
    valid_tuples = [t for t in tuples_list if t is not None and len(t) == 3
                    and all(element is not None for element in t)]
    
    if not valid_tuples:
        return None, []
    
    # Step 1: Find the tuple with the maximum first element
    max_tuple = max(valid_tuples, key=lambda x: x[0])

    # Step 2: Filter tuples with elements that are multiples of d
    filtered_tuples = filter(lambda x: x[0] % d == 0 or x[2] % d == 0, valid_tuples)
    
    # Count vowels in the string part of each filtered tuple
    vowel_counts = [sum(1 for char in t[1].lower() if char in 'aeiou') for t in filtered_tuples]

    return max_tuple, vowel_counts
```
<|Solution End|>
<|Test Begin|>
```python
def test_process_tuples():
    # Importing the function directly for testing purposes
    from solution import process_tuples

    # Test case 1: Normal list of tuples
    tuples_list = [
        (5, "hello", 10),
        (2, "world", 8),
        (15, "example", 9)
    ]
    result = process_tuples(tuples_list, 5)
    assert result == ((15, "example", 9), [2, 3])

    # Test case 2: Check with empty list
    result = process_tuples([], 3)
    assert result == (None, [])

    # Test case 3: Include tuples with None values
    tuples_list = [
        (None, "none", 3),
        (4, None, 8),
        None,
        (10, "apple", None),
        (7, "test", 14)
    ]
    result = process_tuples(tuples_list, 2)
    assert result == ((7, "test", 14), [1])

    # Test case 4: All tuples are multiples of given number
    tuples_list = [
        (10, "a", 20),
        (15, "e", 30),
        (20, "i", 40)
    ]
    result = process_tuples(tuples_list, 5)
    assert result == ((20, "i", 40), [1, 1, 1])

    # Test case 5: No tuples pass the filter
    tuples_list = [
        (1, "only", 2),
        (3, "one", 7),
        (4, "tuple", 6)
    ]
    result = process_tuples(tuples_list, 10)
    assert result == ((4, "tuple", 6), [])

    # Test case 6: Tie in max first element
    tuples_list = [
        (10, "test", 20),
        (10, "another", 15),
        (4, "again", 7)
    ]
    result = process_tuples(tuples_list, 5)
    assert result == ((10, "test", 20), [1, 3])
```
<|Test End|>