QUESTION

Create a Python function that takes in three arguments: a list of strings, a list of numbers, and a keyword substring for filtering. The function should perform the following tasks:

1. **Remove Duplicate Words**: From the list of strings, first normalize each string by removing consecutive duplicate characters (e.g., "aabbcc" becomes "abc"). Then, remove duplicate words while preserving the order of their first occurrence in the list.

2. **String Filtering and Analysis**:
   - Filter the normalized, deduplicated list of strings to include only those that start with the specified keyword substring using regular expressions.
   - Identify the second most frequent word from this filtered list (or return `None` if there are not enough unique words).

3. **Sum String Lengths**: Calculate the sum of the lengths of the strings in the filtered list using a lambda function.

4. **Number Sequence Analysis**:
   - Identify and return the lengths of sequences of consecutive numbers in the list of numbers, where each number in a sequence is exactly one more than the previous number.
   - Additionally, count the frequency of numbers considering consecutive identical numbers as one occurrence, and return this frequency as a dictionary.

The function should return a tuple with three elements:
- The list of strings after normalization, deduplication, and filtering.
- The second most frequent word from this processed list of strings (or `None` if not enough unique words are present).
- A dictionary with two keys: `"lengths_of_number_sequences"`, containing the list of lengths of the increasing number sequences, and `"consecutive_frequency"`, representing the frequency count of the distinct consecutive numbers.

Here's a sample function signature:

```python
def process_data(list_of_strings, list_of_numbers, keyword_substring):
    # Implementation here
    pass
```

This question combines aspects of string normalization and duplicate removal, filtering using regex, calculating string-related metrics, and analyzing sequences and frequency in a list of numbers.

SOL & TESTS

```python
<|Solution Begin|>
import re
from collections import Counter

def normalize_string(s):
    """Removes consecutive duplicate characters in a string."""
    normalized = []
    previous_char = ""
    for char in s:
        if char != previous_char:
            normalized.append(char)
            previous_char = char
    return ''.join(normalized)

def process_data(list_of_strings, list_of_numbers, keyword_substring):
    # Normalize and deduplicate strings
    seen_words = set()
    deduped_strings = []
    
    for s in list_of_strings:
        normalized = normalize_string(s)
        if normalized not in seen_words:
            seen_words.add(normalized)
            deduped_strings.append(normalized)
    
    # Filter strings by keyword substring
    filtered_strings = [s for s in deduped_strings if re.match(f"^{keyword_substring}", s)]
    
    # Identify second most frequent word
    counter = Counter(filtered_strings)
    most_common = counter.most_common(2)
    second_most_freq_word = most_common[1][0] if len(most_common) > 1 else None

    # Sum of string lengths
    sum_lengths = sum(map(lambda x: len(x), filtered_strings))
    
    # Analyze number sequences
    lengths_of_number_sequences = []
    consec_length = 1
    
    i = 1
    while i < len(list_of_numbers):
        if list_of_numbers[i] == list_of_numbers[i - 1] + 1:
            consec_length += 1
        else:
            if consec_length > 1:
                lengths_of_number_sequences.append(consec_length)
            consec_length = 1
        i += 1
    
    if consec_length > 1:
        lengths_of_number_sequences.append(consec_length)
    
    # Count frequency of consecutive numbers
    consecutive_frequency = {}
    
    if list_of_numbers:
        current = list_of_numbers[0]
        count = 1
        
        for i in range(1, len(list_of_numbers)):
            if list_of_numbers[i] == current:
                continue
            else:
                if current not in consecutive_frequency:
                    consecutive_frequency[current] = 0
                consecutive_frequency[current] += 1
                current = list_of_numbers[i]
        
        # Update the last counted number
        if current not in consecutive_frequency:
            consecutive_frequency[current] = 0
        consecutive_frequency[current] += 1

    return (filtered_strings, second_most_freq_word, {
        "lengths_of_number_sequences": lengths_of_number_sequences,
        "consecutive_frequency": consecutive_frequency
    })

<|Solution End|>
<|Test Begin|>
```python
from solution import process_data

def test_process_data_example_1():
    strings = ["aabbcc", "abc", "abcabc", "aabca", "xyzzz", "xyzz"]
    numbers = [1, 2, 3, 5, 6, 7, 7, 7, 8, 9, 0, 0, 1]
    keyword = "a"
    result = process_data(strings, numbers, keyword)
    
    assert result[0] == ["abc", "a"]
    assert result[1] == "a"
    assert result[2]["lengths_of_number_sequences"] == [3, 3]
    assert result[2]["consecutive_frequency"] == {1: 2, 5: 1, 7: 1, 8: 1, 0: 1}

def test_process_data_no_keyword_match():
    strings = ["hello", "world", "test", "example"]
    numbers = [1, 1, 1, 2, 3, 5, 5, 5]
    keyword = "z"
    result = process_data(strings, numbers, keyword)
    
    assert result[0] == []
    assert result[1] == None
    assert result[2]["lengths_of_number_sequences"] == [3]
    assert result[2]["consecutive_frequency"] == {1: 1, 5: 1}

def test_process_data_no_consecutive_numbers():
    strings = ["aaaa", "bbbb", "cccc"]
    numbers = [10, 20, 30, 40]
    keyword = "c"
    result = process_data(strings, numbers, keyword)
    
    assert result[0] == ["c"]
    assert result[1] == "c"
    assert result[2]["lengths_of_number_sequences"] == []
    assert result[2]["consecutive_frequency"] == {10: 1, 20: 1, 30: 1, 40: 1}

def test_process_data_single_number():
    strings = ["hello", "hhello"]
    numbers = [5]
    keyword = "h"
    result = process_data(strings, numbers, keyword)
    
    assert result[0] == ["helo"]
    assert result[1] == None
    assert result[2]["lengths_of_number_sequences"] == []
    assert result[2]["consecutive_frequency"] == {5: 1}

```
<|Test End|>