QUESTION

Write a Python function to process a mixed data type list comprising integers, floating-point numbers, and strings. The function should return a tuple containing the following two elements:

1. A dictionary where each key is a unique string from the list, and its value is a tuple of the frequency of the string and the smallest missing integer derived from converting each character of the string to its ASCII value and creating an ordered set from those values.

2. Another dictionary where each key is a unique integer derived by rounding floating-point numbers in the list. The associated value should be a tuple, consisting firstly of the minimum possible value of the periodic function `sin(x) + cos(2*x)` calculated for all integers derived from rounding, and secondly, a list representing the chunked sub-sequences of consecutive integers present after rounding all floating-point numbers and filtering through positive integers only.

New Instruction: Finally, add a mechanism to handle potential data type mismatches in the list by raising a custom exception and ensuring that this does not interrupt the processing of valid data types.

SOL & TESTS

```python
class MixedDataTypeProcessingError(Exception):
    """Custom exception for mixed data type processing errors."""
    def __init__(self, invalid_item):
        self.message = f"Invalid data type encountered: {invalid_item}."
        super().__init__(self.message)

def process_mixed_list(data):
    """
    Processes a mixed list of ints, floats, and strings and returns a tuple containing two dictionaries:
    1. A dictionary for strings with frequency and smallest missing integer based on ASCII values.
    2. A dictionary for rounded integers derived from floats with the minimum of a specific function
       and chunked sub-sequences of consecutive integers.
    """
    from math import sin, cos

    string_dict = {}
    int_dict = {}
    seen_integers = set()

    for item in data:
        if isinstance(item, str):
            if item in string_dict:
                string_dict[item] = (string_dict[item][0] + 1, string_dict[item][1])
            else:
                ascii_values = sorted(set(ord(char) for char in item))
                for missing_int in range(ascii_values[0], ascii_values[-1] + 1):
                    if missing_int not in ascii_values:
                        break
                else:
                    missing_int = ascii_values[-1] + 1

                string_dict[item] = (1, missing_int)

        elif isinstance(item, (int, float)):
            rounded = round(item)
            seen_integers.add(rounded)

        else:
            raise MixedDataTypeProcessingError(item)

    if seen_integers:
        sorted_integers = sorted(seen_integers)
        min_function_values = {
            i: sin(i) + cos(2 * i) for i in sorted_integers if i >= 0
        }
        if min_function_values:
            min_value = min(min_function_values.values())
        else:
            min_value = float('inf')

        chunks = []
        current_chunk = []

        for i in range(len(sorted_integers)):
            if i == 0 or sorted_integers[i] == sorted_integers[i-1] + 1:
                current_chunk.append(sorted_integers[i])
            else:
                if current_chunk:
                    chunks.append(current_chunk)
                current_chunk = [sorted_integers[i]]

        if current_chunk:
            chunks.append(current_chunk)

        int_dict = {i: (min_value, chunks) for i in sorted_integers}

    return (string_dict, int_dict)
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_mixed_list, MixedDataTypeProcessingError

def test_valid_data():
    data = ['apple', 'banana', 3.6, 'apple', 2.1, 'banana', 'carrot', 5.0, -7.6, 2.4]
    result = process_mixed_list(data)
    
    expected_string_dict = {
        'apple': (2, ord('a')),   # Smallest missing ASCII value for 'a', 'l', 'p', 'e'
        'banana': (2, ord('a')),  # All ASCII values present in 'banana'
        'carrot': (1, ord('a'))   # Smallest missing ASCII value for 'a', 'c', 'r', 'o', 't'
    }
    expected_int_dict = {
        3: (-1.9799859936347575, [[2, 3, 5]]),
        2: (-1.9799859936347575, [[2, 3, 5]]),
        -8: (-1.9799859936347575, [[2, 3, 5]]),
        5: (-1.9799859936347575, [[2, 3, 5]])
    }
    
    assert result[0] == expected_string_dict
    assert result[1] == expected_int_dict

def test_with_invalid_data():
    data = ['apple', 5.5, 'banana', {}, 'carrot']
    try:
        process_mixed_list(data)
    except MixedDataTypeProcessingError as e:
        assert str(e) == "Invalid data type encountered: {}."

def test_with_no_strings():
    data = [3.6, 2.1, 5.0, -7.6, 2.4]
    result = process_mixed_list(data)
    assert result[0] == {}
    assert len(result[1]) > 0

def test_empty_list():
    assert process_mixed_list([]) == ({}, {})

def test_no_floats():
    data = [3, 2, 'banana']
    result = process_mixed_list(data)
    expected_string_dict = {
        'banana': (1, ord('a')),
    }
    expected_int_dict = {
        3: (-2.165320019593306, [[2, 3]]),
        2: (-2.165320019593306, [[2, 3]])
    }
    assert result[0] == expected_string_dict
    assert result[1] == expected_int_dict
```
<|Test End|>