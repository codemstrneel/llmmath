QUESTION

Create a function that takes a list of strings and a list of integers as input. This function should perform the following operations:

1. For each string in the list of strings:
   - Remove any duplicate words from the string while preserving the order of their first occurrences.
   - Count the number of vowels in the string.
   - If the string starts with 'a' and has zero or more 'b's immediately following, calculate the sum of the ASCII values of all characters in the string. If this sum falls within a specified numeric range (inclusive), store the length of the string instead of the sum.
   
2. For the list of integers:
   - Filter out all perfect squares using a lambda function.
   - Remove duplicate numbers while preserving the order of their first occurrences.
   
3. Return a tuple consisting of:
   - A list of dictionaries for each processed string, where each dictionary contains the original string, the modified string with duplicates removed, the vowel count, and either the ASCII sum or the string length as applicable.
   - A new list of integers after removing perfect squares and duplicates.

This problem combines elements from list manipulation, duplicate removal while preserving order, numerical operations with condition checks, and filtering through lambda functions.

SOL & TESTS

```python
def process_strings_and_integers(strings, integers, ascii_range=None):
    if ascii_range is None:
        ascii_range = (0, float('inf'))

    def remove_duplicates(s):
        seen = set()
        words = s.split()
        result = []
        for word in words:
            if word not in seen:
                seen.add(word)
                result.append(word)
        return ' '.join(result)

    def count_vowels(s):
        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        return sum(1 for char in s if char in vowels)

    def ascii_sum_or_length(s):
        ascii_sum = sum(ord(c) for c in s)
        if s.startswith('a') or s.startswith('A'):
            if all(c == 'b' or c == 'B' for c in s[1:len(s)-1]):
                if ascii_range[0] <= ascii_sum <= ascii_range[1]:
                    return len(s)
        return ascii_sum

    def is_not_perfect_square(n):
        return int(n**0.5)**2 != n

    processed_strings = []
    for string in strings:
        modified_string = remove_duplicates(string)
        vowel_count = count_vowels(string)
        ascii_or_length = ascii_sum_or_length(string)
        processed_strings.append({
            'original': string,
            'modified': modified_string,
            'vowel_count': vowel_count,
            'ascii_or_length': ascii_or_length
        })

    processed_integers = list(dict.fromkeys(filter(is_not_perfect_square, integers)))

    return (processed_strings, processed_integers)
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_strings_and_integers

def test_strings_with_duplicates():
    strings = ["a b a", "hello world world"]
    integers = [1, 2, 3, 4, 5]
    expected_strings = [
        {'original': 'a b a', 'modified': 'a b', 'vowel_count': 1, 'ascii_or_length': 195},
        {'original': 'hello world world', 'modified': 'hello world', 'vowel_count': 3, 'ascii_or_length': 1663}
    ]
    expected_integers = [2, 3, 5] # 1 and 4 are perfect squares
    result = process_strings_and_integers(strings, integers)
    assert result[0] == expected_strings
    assert result[1] == expected_integers

def test_ascii_sum_in_range():
    strings = ["abbbb", "ab"]
    integers = [16, 18, 25, 26]
    expected_strings = [
        {'original': 'abbbb', 'modified': 'abbbb', 'vowel_count': 1, 'ascii_or_length': 5},
        {'original': 'ab', 'modified': 'ab', 'vowel_count': 1, 'ascii_or_length': 2}
    ]
    expected_integers = [18, 26] # 16 and 25 are perfect squares
    result = process_strings_and_integers(strings, integers, ascii_range=(0, 500))
    assert result[0] == expected_strings
    assert result[1] == expected_integers

def test_no_vowels():
    strings = ["b c b c", "xyz"]
    integers = [0, 1, 3, 4, 5, 9]
    expected_strings = [
        {'original': 'b c b c', 'modified': 'b c', 'vowel_count': 0, 'ascii_or_length': 197},
        {'original': 'xyz', 'modified': 'xyz', 'vowel_count': 0, 'ascii_or_length': 362}
    ]
    expected_integers = [0, 3, 5] # 1, 4, 9 are perfect squares
    result = process_strings_and_integers(strings, integers)
    assert result[0] == expected_strings
    assert result[1] == expected_integers

def test_complex_strings_and_integers():
    strings = ["a", "abbbbb"]
    integers = [64, 100, 2, 36, 37]
    expected_strings = [
        {'original': 'a', 'modified': 'a', 'vowel_count': 1, 'ascii_or_length': 1},
        {'original': 'abbbbb', 'modified': 'abbbbb', 'vowel_count': 1, 'ascii_or_length': 6}
    ]
    expected_integers = [2, 37] # 64, 100, 36 are perfect squares
    result = process_strings_and_integers(strings, integers)
    assert result[0] == expected_strings
    assert result[1] == expected_integers
```
<|Test End|>