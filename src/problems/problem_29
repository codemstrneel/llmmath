QUESTION

Write a function to check if a quadrilateral with positive area is possible with the given angles.

SOLUTION/TESTS

To determine if a quadrilateral with a positive area is possible based on given angles, we need to recall that the sum of the internal angles of any quadrilateral must equal 360 degrees. If the given angles satisfy this condition, then a quadrilateral can exist.

Let us implement a function `solution(angles)` which checks if the angles provided can form a valid quadrilateral with positive area. The function will take a list of four angles as input and return `True` if they sum to exactly 360 degrees, otherwise it will return `False`.

Here is the complete code:

<|Solution Begin|>
```python
def solution(angles):
    """
    Check if a quadrilateral with given angles is possible.

    A quadrilateral is possible if the sum of its internal angles is 360 degrees.
    
    :param angles: A list of four positive integers representing the angles.
    :return: A boolean value indicating if a quadrilateral is possible.
    """
    return sum(angles) == 360
```
<|Solution End|>

Now, let's write some unit tests to verify our solution. We'll test for various scenarios including:
- Possible cases where angles add up to 360.
- Impossible cases where the sum isn't 360.

<|Test Begin|>
```python
def test_possible_quadrilateral():
    assert solution([90, 90, 90, 90]) == True
    assert solution([120, 100, 80, 60]) == True
    assert solution([180, 60, 60, 60]) == True

def test_impossible_quadrilateral():
    assert solution([90, 90, 90, 89]) == False
    assert solution([0, 90, 180, 90]) == False
    assert solution([361, 0, 0, 0]) == False

def test_varied_angles():
    assert solution([108, 108, 72, 72]) == True
    assert solution([90, 85, 90, 95]) == False

```
<|Test End|>

These tests will check the correctness of our function for cases with exact and varied angle sums for forming a valid quadrilateral.