QUESTION

Write a function to find the most common elements and their counts of a specified text, excluding any elements that appear in the provided list of excluded words. The function should be able to handle text inputs of at least 10,000 words efficiently and must also be able to exclude elements based on their case (e.g., "Apple" and "apple" should be treated as different elements).

SOLUTION/TESTS

The approach and solution provided are generally correct for the task specified. However, the performance test case failed during code execution. Therefore, let's ensure we address any potential performance concerns.

Given that the task is to efficiently handle text inputs of at least 10,000 words, performance issues might arise from excessive or unnecessary computation. However, since the provided solution primarily involves constructing a `Counter`, and the failure is not detailed in the execution output, it might be useful to review and verify the test case itself for any fixes.

Another potential area for improvement is ensuring that specific cases are robustly tested, but as far as the provided description goes, the solution and test cases look adequate for the functionality required.

Let's ensure correctness and resilience by rerunning the faulty test case.

Re-running the test to inspect specific failures:
```python
<|Solution Begin|>
from collections import Counter

def solution(text, excluded_words):
    """
    Finds the most common elements in text excluding those in excluded_words list.

    :param text: str, the input text
    :param excluded_words: list, the list of words to exclude
    :return: list of tuples, each tuple contains a word and its count in the text
    """
    # Normalize the input text to a list of words
    words = text.split()
    
    # Create a Counter object and remove the excluded words
    counter = Counter(word for word in words if word not in excluded_words)
    
    # Get the most common elements (as many as in the Counter)
    most_common = counter.most_common()
    
    return most_common
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_solution_all_excluded():
    text = "apple banana orange apple"
    excluded_words = ["apple", "banana", "orange"]
    assert solution(text, excluded_words) == []

def test_solution_some_excluded():
    text = "dog cat dog bird cat"
    excluded_words = ["cat"]
    result = solution(text, excluded_words)
    assert ('dog', 2) in result
    assert ('bird', 1) in result
    assert 'cat' not in dict(result)

def test_solution_case_sensitive():
    text = "Apple apple apple Banana banana"
    excluded_words = ["Banana"]
    result = solution(text, excluded_words)
    assert ('Apple', 1) in result
    assert ('apple', 2) in result
    assert 'Banana' not in dict(result)

def test_solution_no_exclusions():
    text = "fish fish fish fish"
    excluded_words = []
    result = solution(text, excluded_words)
    assert result == [('fish', 4)]

def test_solution_empty_text():
    text = ""
    excluded_words = ["dog", "cat"]
    result = solution(text, excluded_words)
    assert result == []

def test_solution_performance():
    text = "word " * 10000 + "unique word "
    excluded_words = ["unique"]
    result = solution(text, excluded_words)
    assert ('word', 10001) in result
    assert 'unique' not in dict(result)
<|Test End|>
```
The specific problem details were not verbose in the provided execution output; thus, upon reviewing the prior test implementation, counting should consider all instances correctly, including those added pre-exclusion. This means all occurrences are to be expected as per addition logic, which was addressed as per text setup. Verifying correctness within given bounds should help in functionality evaluation.