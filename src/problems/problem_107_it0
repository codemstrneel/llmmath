QUESTION

Write a function that takes a list of strings and a tuple of two integers as input. The function should perform two tasks: 

1. For each string in the list, if the string contains any numeric values, increment each numeric value by the first integer from the tuple.
2. Return the total number of strings that contain numeric values and have a length less than or equal to the second integer from the tuple. 

Ensure that the increment operation is robust and handles multiple scenarios, such as negative numbers or multiple numbers within a single string.

SOLUTION/TESTS

<|Solution Begin|>
import re

def solution(strings, params):
    increment, length_limit = params
    count = 0
    
    def increment_numbers_in_string(s, inc):
        return re.sub(
            r'-?\d+',
            lambda match: str(int(match.group()) + inc),
            s
        )
    
    for string in strings:
        new_string = increment_numbers_in_string(string, increment)
        if re.search(r'\d', new_string) and len(new_string) <= length_limit:
            count += 1
    
    return count
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_no_numeric_strings():
    strings = ["hello", "world", "python", "pytest"]
    params = (3, 6)
    assert solution(strings, params) == 0

def test_all_numeric_strings_without_incremented_values():
    strings = ["abc123", "def456", "ghi789"]
    params = (0, 10)
    assert solution(strings, params) == 3

def test_mixed_strings():
    strings = ["hello2", "world3", "a5b", "longtext9", "no10"]
    params = (2, 6)
    assert solution(strings, params) == 3  # Only "hello2" -> "hello4", "world3" -> "world5", "a5b" -> "a7b" meet length <= 6 

def test_large_increment():
    strings = ["number-5", "value-98", "score10"]
    params = (10, 15)
    assert solution(strings, params) == 3  # All increment and lengths remain below or at 15

def test_negative_increment():
    strings = ["decrease-50", "reduce-10", "increase30"]
    params = (-5, 10)
    assert solution(strings, params) == 1  # Only "decrease-50" -> "decrease-55" is <= 10

def test_zero_increment():
    strings = ["zero0", "empty11", "nil9"]
    params = (0, 8)
    assert solution(strings, params) == 3  # All strings have same length and contain numbers

def test_no_numeric_values():
    strings = ["no_number_here", "still_no_number"]
    params = (5, 15)
    assert solution(strings, params) == 0

def test_complex_scenario():
    strings = ["complex-1text", "mixture45of68", "data2collection9"]
    params = (3, 20)
    assert solution(strings, params) == 3  # All strings have numbers and lengths are <= 20
<|Test End|>