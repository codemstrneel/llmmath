QUESTION

Write a Python function that takes a mixed list containing both numbers and strings, as well as a list of tuples where each tuple contains a string and a list of integers. The function should perform the following tasks:

1. From the mixed list, extract numbers that are divisible by three and even. Ensure that the extracted numbers are unique, removing duplicates if necessary.
2. In the list of tuples, increment each integer in the lists by the maximum number obtained from step 1. Then, sort the tuples based on the alphabetic order of their string component.

Return the modified list of tuples and the list of extracted numbers.

SOLUTION/TESTS

<|Solution Begin|>
def solution(mixed_list, tuple_list):
    # Step 1: Extract unique even numbers divisible by three
    unique_numbers = set()
    for item in mixed_list:
        if isinstance(item, int) and item % 3 == 0 and item % 2 == 0:
            unique_numbers.add(item)

    unique_numbers = sorted(unique_numbers)

    # Determine the maximum number to be used for increment
    max_number = max(unique_numbers) if unique_numbers else 0

    # Step 2: Increment tuples' numbers and sort tuples
    modified_tuples = []
    for string, numbers in tuple_list:
        incremented_numbers = [n + max_number for n in numbers]
        modified_tuples.append((string, incremented_numbers))

    # Sort the modified tuples
    modified_tuples.sort(key=lambda x: x[0])

    return modified_tuples, unique_numbers

<|Solution End|>

<|Test Begin|>
def test_solution():
    # Test case 1: General case
    mixed_list = [6, 'apple', 12, 'banana', 18, 24, 30, 30, 12]
    tuple_list = [('b', [1, 2, 3]), ('a', [4, 5])]
    expected_result = ([('a', [34, 35]), ('b', [31, 32, 33])], [6, 12, 18, 24, 30])
    assert solution(mixed_list, tuple_list) == expected_result

    # Test case 2: No even numbers divisible by 3
    mixed_list = [5, 'orange', 13, 'grape']
    tuple_list = [('b', [1, 2, 3]), ('a', [4, 5])]
    expected_result = ([('a', [4, 5]), ('b', [1, 2, 3])], [])
    assert solution(mixed_list, tuple_list) == expected_result

    # Test case 3: Empty lists
    assert solution([], []) == ([], [])

    # Test case 4: Tuple list with no numbers
    mixed_list = [6, 12, 24]
    tuple_list = [('a', []), ('b', [])]
    expected_result = ([('a', []), ('b', [])], [6, 12, 24])
    assert solution(mixed_list, tuple_list) == expected_result

    # Test case 5: Single element that fits criteria
    mixed_list = [6]
    tuple_list = [('b', [1]), ('a', [4])]
    expected_result = ([('a', [10]), ('b', [7])], [6])
    assert solution(mixed_list, tuple_list) == expected_result
    
    # Test case 6: Mixed list with multiple data types
    mixed_list = [36, 'hello', 60, 90, 'world', 60, 66]
    tuple_list = [('x', [10, 20]), ('z', [-10]), ('y', [0])]
    expected_result = ([('x', [100, 110]), ('y', [80]), ('z', [70])], [36, 60, 66, 90])
    assert solution(mixed_list, tuple_list) == expected_result

<|Test End|>