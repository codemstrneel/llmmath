QUESTION

Write a Python function that takes a list of integers and a positive integer `n` as input. The function should first move all zeroes to the end of the list while preserving the order of non-zero elements. Then, it should perform a left rotation of the bits of each non-zero integer in the list by `n` positions. If the list contains only zeroes, return the list as-is.

SOLUTION/TESTS

<|Solution Begin|>
def solution(numbers, n):
    def left_rotate_bits(num, n):
        # get the number of bits required to represent the number
        num_bits = num.bit_length()
        # Left rotate the bits of num by n positions
        n %= num_bits  # Ensure the rotation doesn't exceed the number of bits
        return ((num << n) | (num >> (num_bits - n))) & ((1 << num_bits) - 1)

    # Separate non-zero and zero elements
    non_zeroes = [num for num in numbers if num != 0]
    zeroes = [num for num in numbers if num == 0]

    # Perform the bitwise rotation on non-zero elements
    rotated_non_zeroes = [left_rotate_bits(num, n) for num in non_zeroes]

    # Combine the non-zero elements followed by zeroes
    return rotated_non_zeroes + zeroes
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_no_zeroes():
    assert solution([1, 2, 3], 1) == [2, 4, 6]

def test_all_zeroes():
    assert solution([0, 0, 0], 3) == [0, 0, 0]

def test_mixed_zeroes():
    assert solution([0, 1, 0, 3, 0, 0, 2], 2) == [4, 12, 8, 0, 0, 0, 0]

def test_no_rotation():
    assert solution([4, 1], 0) == [4, 1]

def test_large_rotation():
    assert solution([1, 3, 7], 32) == [1, 3, 7]

def test_single_element():
    assert solution([9], 1) == [3]

def test_single_zero():
    assert solution([0], 5) == [0]

def test_empty_list():
    assert solution([], 3) == []

<|Test End|>