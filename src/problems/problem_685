QUESTION

Certainly! Here's a new coding question that combines core concepts from the provided questions:

---

**New Question:**

Create a Python function that processes a list of mixed data types and a list of tuples, where each tuple contains two integers. The function should perform the following tasks:

1. **Mixed Data List Processing:**
   - Accept a list containing integers, floats, strings, and `None` values.
   - Replace each `None` value with the string `"None_Substituted"`.
   - If the list contains at least one integer and one float, multiply the first integer by the first float and store the result.

2. **Tuple List Processing:**
   - For each tuple, generate a sublist of integers representing a range between the two numbers (inclusive).
   - Check if each sublist contains an even number whose digits sum up to a square number. Return `True` if found, otherwise `False`.
   - Calculate the product of all integers in the sublist. If a sublist is empty, consider the product as `None`.

3. **Return Structure:**
   - Return a dictionary with the keys:
     - `"processed_list"`: Represents the mixed data list with `None` values replaced.
     - `"integer_float_product"`: The product of the first integer and first float if both are present, otherwise `None`.
     - `"tuple_operations"`: A list of tuples, each containing:
       - A boolean indicating if an even number with a digit sum that is a square was found.
       - The product of integers in the sublist or `None` if the sublist is empty.

**Example:**

```python
def complex_tuple_and_list_operations(mixed_list, tuple_list):
    # Your implementation here

# Example usage
result = complex_tuple_and_list_operations(
    [None, 4, 'hello', 3.5, None, 'world'],
    [(1, 5), (10, 13), (2, 2)]
)
print(result)
# Output:
# {
#   "processed_list": ["None_Substituted", 4, "hello", 3.5, "None_Substituted", "world"],
#   "integer_float_product": 14.0,
#   "tuple_operations": [
#     (True, 120),
#     (False, 17160),
#     (False, 2)
#   ]
# }
```

This novel question tests the ability to manipulate mixed data types, process ranges based on tuple inputs, and perform checks and calculations based on numeric properties and python data structures.

SOL & TESTS

<|Solution Begin|>
```python
import math

def is_square(n):
    """ Check if a number is a perfect square. """
    if n < 0:
        return False
    return int(math.sqrt(n))**2 == n

def digit_sum(n):
    """ Calculate the sum of the digits of a number. """
    return sum(int(digit) for digit in str(n))

def complex_tuple_and_list_operations(mixed_list, tuple_list):
    # Mixed Data List Processing
    processed_list = ["None_Substituted" if x is None else x for x in mixed_list]
    
    first_integer = None
    first_float = None
    for x in mixed_list:
        if isinstance(x, int) and first_integer is None:
            first_integer = x
        elif isinstance(x, float) and first_float is None:
            first_float = x
        if first_integer is not None and first_float is not None:
            break

    integer_float_product = None
    if first_integer is not None and first_float is not None:
        integer_float_product = first_integer * first_float

    # Tuple List Processing
    tuple_operations = []

    for a, b in tuple_list:
        sublist = list(range(a, b + 1))
        has_even_square_digit_sum = any(
            n % 2 == 0 and is_square(digit_sum(n)) for n in sublist
        )
        sublist_product = None if not sublist else math.prod(sublist)
        tuple_operations.append((has_even_square_digit_sum, sublist_product))

    return {
        "processed_list": processed_list,
        "integer_float_product": integer_float_product,
        "tuple_operations": tuple_operations,
    }
```
<|Solution End|>

<|Test Begin|>
```python
from solution import complex_tuple_and_list_operations

def test_mixed_list_processing():
    result = complex_tuple_and_list_operations(
        [None, 4, 'hello', 3.5, None, 'world'],
        []
    )
    assert result["processed_list"] == ["None_Substituted", 4, "hello", 3.5, "None_Substituted", "world"]
    assert result["integer_float_product"] == 14.0

def test_tuple_processing_single_tuple():
    result = complex_tuple_and_list_operations(
        [],
        [(2, 5)]
    )
    assert len(result["tuple_operations"]) == 1
    assert result["tuple_operations"][0] == (True, 120)

def test_tuple_processing_multiple_tuples():
    result = complex_tuple_and_list_operations(
        [],
        [(1, 5), (10, 13), (6, 6)]
    )
    assert len(result["tuple_operations"]) == 3
    assert result["tuple_operations"][0] == (True, 120)
    assert result["tuple_operations"][1] == (False, 17160)
    assert result["tuple_operations"][2] == (False, 6)

def test_no_integer_or_float():
    result = complex_tuple_and_list_operations(
        ['a', 'b', None],
        []
    )
    assert result["integer_float_product"] is None

def test_empty_data():
    result = complex_tuple_and_list_operations(
        [],
        []
    )
    assert result["processed_list"] == []
    assert result["integer_float_product"] is None
    assert result["tuple_operations"] == []
```
<|Test End|>