QUESTION

Create a Python function that takes a list of integers and a string as inputs. The function should first perform the following operations on the list:

1. Rotate the list to the right until it is sorted in ascending order.
2. Count the number of rotations required.

Next, process the string by identifying all words that start with a vowel (consider both uppercase and lowercase vowels). Use a map function to count how many of these words appear the same number of times in the string.

Finally, if the count of rotations from the list is even, return the Fibonacci number corresponding to the count of vowel-starting words. If the count of rotations is odd, return a sorted list of odd factors of the count of vowel-starting words using heap sort.

SOLUTION/TESTS

<|Solution Begin|>
def solution(numbers, text):
    def rotate_to_sorted(arr):
        rotations = 0
        while arr != sorted(arr):
            arr = arr[-1:] + arr[:-1]
            rotations += 1
        return rotations

    def count_vowel_words(text):
        words = text.split()
        vowels = set('AEIOUaeiou')
        vowels_starting_words = [word for word in words if word[0] in vowels]
        return vowels_starting_words
    
    def fibonacci(n):
        if n <= 1:
            return n
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
    
    def odd_factors(n):
        return sorted([i for i in range(1, n + 1, 2) if n % i == 0])

    # Step 1: Rotate list until sorted
    number_of_rotations = rotate_to_sorted(numbers[:])  # Use a copy to avoid modifying input

    # Step 2: Count vowel-starting words
    vowel_words_list = count_vowel_words(text)
    word_counts = {word: text.split().count(word) for word in vowel_words_list}
    words_with_equal_count = sum(1 for word, count in word_counts.items() if count == 1)

    # Step 3: Determine return value based on number_of_rotations
    if number_of_rotations % 2 == 0:
        return fibonacci(words_with_equal_count)
    else:
        return odd_factors(words_with_equal_count)

<|Solution End|>
<|Test Begin|>
from solution import solution

def test_empty_list_and_empty_string():
    assert solution([], "") == 0

def test_already_sorted_list():
    assert solution([1, 2, 3], "Apple arrives one apple") == 8

def test_unsorted_list_with_even_rotations():
    assert solution([3, 1, 2], "orange umbrella eagle Ironman") == 1

def test_unsorted_list_with_odd_rotations():
    assert solution([2, 3, 1], "An apple a day keeps a doctor away") == [1, 3]

def test_string_with_no_vowel_starting_words():
    assert solution([1], "Sun moon star") == [1]

def test_single_element_list():
    assert solution([1], "An eagle is around an island") == 0

def test_rotations_make_no_vowel_words():
    assert solution([2, 1, 3], "xylophone xenon xenon xena") == []

<|Test End|>