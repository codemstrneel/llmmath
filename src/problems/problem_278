QUESTION

Write a function to identify the most frequently occurring word(s) in a given string using the collections module. If there are multiple words with the same maximum frequency, return them as a list in the order they first appeared in the string. Consider words to be case-insensitive, but return them in their original form as they appear in the input string.

SOL & TESTS

<|Solution Begin|> 
```python
from collections import Counter

def most_frequent_words(text):
    words = text.split()
    normalized_words = [word.lower() for word in words]
    
    word_count = Counter(normalized_words)
    max_frequency = max(word_count.values())
    
    most_frequent = [
        word for word in words
        if word_count[word.lower()] == max_frequency
    ]
    
    # Maintain the order of appearance
    seen = set()
    result = []
    for word in most_frequent:
        if word.lower() not in seen:
            seen.add(word.lower())
            result.append(word)
            
    return result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import most_frequent_words

def test_single_most_frequent_word():
    text = "hello world hello"
    assert most_frequent_words(text) == ["hello"]

def test_multiple_most_frequent_words():
    text = "apple banana apple orange banana banana"
    assert most_frequent_words(text) == ["banana"]

def test_case_insensitivity():
    text = "Apple apple banana BANANA"
    assert most_frequent_words(text) == ["Apple", "banana"]

def test_all_unique_words():
    text = "one two three four"
    assert most_frequent_words(text) == ["one", "two", "three", "four"]

def test_empty_string():
    text = ""
    assert most_frequent_words(text) == []

def test_preserve_order():
    text = "a b a b c"
    assert most_frequent_words(text) == ["a", "b"]

def test_punctuation_ignored():
    text = "hello, hello; hello: hello!"
    assert most_frequent_words(text) == ["hello,", "hello;", "hello:", "hello!"]
```
<|Test End|>