QUESTION

Write a function that identifies all words in a sentence that contain the letter 'z' (not at the start or end) and then calculates the sum of those words' lengths, if these words were treated as numbers representing column indices in a two-dimensional list of lists.

SOLUTION/TESTS

It looks like there are some issues with the implementation which are highlighted by the failed test cases. The core logic of identifying words with 'z' not at the start or end was misunderstood in the test cases. Let's correct the solution and adjust test cases appropriately:

### Solution
Understanding that the `solution` function identifies the words containing 'z' in the middle (i.e., not at the start or the end), let's ensure the code works as intended and revise it if necessary.

### Test Adjustment
The test `test_mixed_case_with_inner_z` seems to be failing because it expected the program to find words with 'z' in the middle without regard to the case. However, as 'z' and 'Z' are the same character regardless of their position, the function should consider all such cases equally.

Additionally, in the `test_non_alphabetic_characters`, the word "middle-z" should not be considered since it ends with 'z', and the test should reflect this.

Let's make necessary corrections and add more meaningful test cases.

### Corrected Solution and Tests

```python
<|Solution Begin|>
def solution(sentence):
    """
    Identifies words in a sentence containing the letter 'z',
    not at the start or end, and calculates the sum of those
    words' lengths as numeric indices for a column grid.
    """
    words = sentence.split()
    valid_words = [word for word in words if 'z' in word[1:-1] or 'Z' in word[1:-1]]
    total_length_as_indices = sum(len(word) for word in valid_words)
    return total_length_as_indices
<|Solution End|>
```

```python
<|Test Begin|>
from solution import solution

def test_no_words_with_inner_z():
    assert solution("hello world") == 0
    
def test_words_with_inner_z():
    assert solution("amazeband dazzle puzzle") == len("amazeband") + len("dazzle") + len("puzzle")

def test_words_with_z_at_edge_only():
    assert solution("zebra zulu bonanza") == len("bonanza")

def test_mixed_case_with_inner_z():
    assert solution("laZy blaze hazel") == len("laZy") + len("blaze") + len("hazel")

def test_empty_string():
    assert solution("") == 0

def test_non_alphabetic_characters():
    assert solution("z! a!z b?z c#z middle-z easy-z") == len("easy-z")

def test_single_word_with_inner_z():
    assert solution("buzz") == len("buzz")

def test_case_sensitive_z():
    assert solution("fizZ Fuzz FUzZ") == len("fizZ") + len("FUzZ")

def test_z_not_at_edges_including_numbers():
    assert solution("1z2 3z4 5zz6 7z789") == len("1z2") + len("3z4") + len("7z789")
<|Test End|>
```

This revised version of the solution function now considers both uppercase and lowercase 'z' forms, and the test cases are adjusted to query different scenarios accurately complying with task requirements.