QUESTION

Write a function that takes an integer `n` and a list of integers as input. The function should calculate the sum of the series 1²+2²+3²+…+n², and also determine if the sum is equal to the product of the most common digit in the integers from the list, counting both odd and even position digits. If there is a tie in frequency, consider the smallest digit.

SOLUTION/TESTS

```python
<|Solution Begin|>
def solution(n, int_list):
    """
    Computes the sum of the squares of numbers from 1 to n.
    Also checks if this sum equals the product of the most common digit
    found in the list of integers, considering both odd and even positioned digits in each number.
    
    :param n: int, the limit of the series i.e., 1²+2²+3²+…+n²
    :param int_list: list of integers whose digits are analyzed
    :return: tuple, (sum_of_squares, common_digit_product, is_equal)
    """
    # Compute the sum of squares from 1 to n
    sum_of_squares = sum(i**2 for i in range(1, n+1))

    # Count the frequency of each digit in the list
    from collections import Counter
    
    digit_count = Counter()
    for num in int_list:
        digits_in_num = str(abs(num))  # Get positive representation of the number as a string
        digit_count.update(digits_in_num)
    
    # Find the most common digit and its frequency
    most_common_digit, _ = min(digit_count.items(), key=lambda item: (-item[1], int(item[0])))

    # Compute the product of the most common digit
    common_digit_product = sum_of_squares * int(most_common_digit)

    return (sum_of_squares, common_digit_product, sum_of_squares == common_digit_product)
<|Solution End|>

<|Test Begin|>
from solution import solution
import pytest

def test_positive_case():
    n = 3
    int_list = [22, 13, 3]
    assert solution(n, int_list) == (14, 28, False)
    
def test_most_common_digit():
    n = 5
    int_list = [23, 13, 23]
    assert solution(n, int_list) == (55, 55, True)  # because the most common digit is '2'

def test_tied_frequencies_smallest_digit():
    n = 2
    int_list = [12, 21]
    assert solution(n, int_list) == (5, 10, False)  # both 1 and 2 are common, but the smallest is '1'

def test_no_common_digit():
    n = 1
    int_list = [0]
    assert solution(n, int_list) == (1, 0, False)  # the most common digit is 0 as it's the only digit

def test_large_series():
    n = 10
    int_list = [113, 224, 335]
    assert solution(n, int_list) == (385, 770, False)  # the sum of squares is 385, common digit is 3 (appears once in total)

<|Test End|>
```