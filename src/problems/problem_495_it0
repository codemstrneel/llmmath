QUESTION

Write a Python function that takes a mixed list of integers and strings and returns a list of values extracted as follows: 

1. Check if each integer is a perfect square.
2. Extract strings that appear within quotation marks using regex.

The function should return a list of results consisting of boolean values indicating whether each integer is a perfect square and a list of extracted strings from the quoted sections. If an element doesn't fit either category, it should be ignored in the output.

For example, given the input list `[16, 'She said, "hello"', "Test 'this'", 5, '8']`, the function should return `[True, ['hello']]`.

SOLUTION/TESTS

<|Solution Begin|>
import re
import math
from typing import List, Union

def solution(mixed_list: List[Union[int, str]]) -> List[Union[bool, List[str]]]:
    perfect_squares = []
    extracted_strings = []

    for item in mixed_list:
        if isinstance(item, int):
            # Check if the number is a perfect square
            if is_perfect_square(item):
                perfect_squares.append(True)
            else:
                perfect_squares.append(False)
        elif isinstance(item, str):
            # Extract quoted strings using regex
            quotes = re.findall(r'["\'](.*?)["\']', item)
            extracted_strings.extend(quotes)
    
    return perfect_squares + [extracted_strings]

def is_perfect_square(number: int) -> bool:
    if number < 0:
        return False
    sqrt = math.isqrt(number)
    return sqrt * sqrt == number
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_mixed_list_with_perfect_squares_and_strings():
    assert solution([16, 'She said, "hello"', "Test 'this'", 5, '8']) == [True, False, ['hello', 'this']]

def test_if_no_strings_no_perfect_squares():
    assert solution([2, 3, 'Not "quoted"', 10]) == [False, False, [ ]]

def test_only_strings_with_quotes():
    assert solution(['"Quoted"', "'also'", 'Normal']) == [[], ['Quoted', 'also']]

def test_no_strings_no_integers():
    assert solution([[], {}, ()]) == []

def test_all_input_types_with_perfect_squares():
    assert solution([1, 4, 9, 16, 'Test', 'Say "hi"', 'Nothing here']) == [True, True, True, True, ['hi']]

def test_empty_string_and_zero():
    assert solution(['', 0]) == [True, []]

def test_negative_numbers():
    assert solution([-1, -4, -9, '"Negative"']) == [False, False, False, ['Negative']]
<|Test End|>