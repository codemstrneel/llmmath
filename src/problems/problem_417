QUESTION

Create a Python function that takes in a list of strings and a list of numbers. The function should perform the following tasks:

1. Normalize each string in the list by replacing any character that appears consecutively with a single instance of that character. For example, the string `"aabbcc"` becomes `"abc"`. 

2. Check if each normalized string starts with a certain substring using regular expressions. The substring will be specified as a parameter to the function.

3. Identify sequences of consecutive numbers in the list of numbers, where each number in a sequence is exactly one more than the previous number, and return the lengths of these sequences. For example, in the list `[4, 5, 6, 8, 9, 10, 12]`, the sequences are `[4, 5, 6]` and `[8, 9, 10]`.

The function should return a dictionary with two keys: `"normalized_strings"`, containing the list of strings after normalization and regex filtering, and `"lengths_of_number_sequences"`, containing the list of lengths of the increasing number sequences. The function should only include strings that start with the specified substring in the `"normalized_strings"` list.

SOL & TESTS

```python
<|Solution Begin|>
def process_strings_and_numbers(strings, numbers, substring):
    import re
    
    # Function to normalize a string
    def normalize_string(s):
        return re.sub(r'(.)\1+', r'\1', s)

    # Normalize the strings and filter based on the substring
    normalized_strings = [
        normalize_string(s) for s in strings
        if re.match(f"^{re.escape(substring)}", normalize_string(s))
    ]

    # Function to find lengths of consecutive number sequences
    def find_consecutive_sequences(nums):
        if not nums:
            return []
        
        nums.sort()
        sequences = []
        current_length = 1

        for i in range(1, len(nums)):
            if nums[i] == nums[i - 1] + 1:
                current_length += 1
            else:
                if current_length > 1:
                    sequences.append(current_length)
                current_length = 1
        
        if current_length > 1:
            sequences.append(current_length)
            
        return sequences

    lengths_of_number_sequences = find_consecutive_sequences(numbers)

    return {
        "normalized_strings": normalized_strings,
        "lengths_of_number_sequences": lengths_of_number_sequences
    }

```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_strings_and_numbers

def test_process_strings_and_numbers_normalization_and_filter():
    strings = ["aabbcc", "aaabbbcc", "abc", "abccba"]
    numbers = []
    substring = "ab"
    result = process_strings_and_numbers(strings, numbers, substring)
    assert result["normalized_strings"] == ["abc", "abc"], "Failed on normalization and regex filtering"

def test_process_strings_and_numbers_number_sequences():
    strings = []
    numbers = [4, 5, 6, 8, 9, 10, 12, 1, 2]
    substring = ""
    result = process_strings_and_numbers(strings, numbers, substring)
    assert result["lengths_of_number_sequences"] == [3, 3, 2], "Failed on finding consecutive number sequences"

def test_process_strings_and_numbers_single_element_sequences():
    strings = []
    numbers = [10, 20, 30]
    substring = ""
    result = process_strings_and_numbers(strings, numbers, substring)
    assert result["lengths_of_number_sequences"] == [], "Failed on sequences with single elements"

def test_process_strings_and_numbers_mixed():
    strings = ["helloooo", "heyy", "noon", "nyello"]
    numbers = [1, 2, 3, 7, 8, 15, 16, 17, 18]
    substring = "he"
    result = process_strings_and_numbers(strings, numbers, substring)
    assert result["normalized_strings"] == ["helo", "hey"], "Failed on mixed input - normalization and regex filtering"
    assert result["lengths_of_number_sequences"] == [3, 2, 4], "Failed on mixed input - finding consecutive number sequences"

def test_process_strings_and_numbers_empty_inputs():
    strings = []
    numbers = []
    substring = ""
    result = process_strings_and_numbers(strings, numbers, substring)
    assert result["normalized_strings"] == [], "Failed on empty string input"
    assert result["lengths_of_number_sequences"] == [], "Failed on empty number input"
```
<|Test End|>