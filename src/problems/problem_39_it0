QUESTION

Write a function that takes two lists of integers, `list1` and `list2`, of potentially different lengths. The function should return a list of tuples where each tuple contains two elements that raise each other to produce a specified integer `n`, using one element from `list1` and one from `list2`. In addition, recursively calculate the Fibonacci sequence up to the length of this resulting list of tuples. If no such pairs exist, return two empty lists.

SOLUTION/TESTS

<|Solution Begin|>
def solution(list1, list2, n):
    """
    Returns a list of tuples with elements from lists list1 and list2 that raise each other to produce an integer n.
    Also, returns a Fibonacci sequence up to the length of the resulting list of tuples.
    """
    # Find all pairs of elements from list1 and list2 such that a**b == n or b**a == n
    pairs = [(a, b) for a in list1 for b in list2 if a**b == n or b**a == n]
    
    # Function to generate fibonacci sequence up to a given length
    def fibonacci_sequence(length):
        if length == 0:
            return []
        if length == 1:
            return [0]
        fib_seq = [0, 1]
        while len(fib_seq) < length:
            fib_seq.append(fib_seq[-1] + fib_seq[-2])
        return fib_seq[:length]
    
    # Generate the fibonacci sequence up to the length of pairs
    fib_sequence = fibonacci_sequence(len(pairs))

    return pairs, fib_sequence
<|Solution End|>
<|Test Begin|>
def test_solution_pairs_and_fibonacci():
    pairs, fib_sequence = solution([1, 2, 3], [1, 2, 3, 4], 4)
    assert pairs == [(2, 2)]
    assert fib_sequence == [0]

def test_solution_no_pairs():
    pairs, fib_sequence = solution([1, 2], [3, 4], 10)
    assert pairs == []
    assert fib_sequence == []

def test_solution_multiple_pairs():
    pairs, fib_sequence = solution([2], [1, 2], 4)
    assert pairs == [(2, 2)]
    assert fib_sequence == [0]

def test_solution_pair_with_zero():
    pairs, fib_sequence = solution([0], [1, 2], 0)
    assert pairs == [(0, 1)]
    assert fib_sequence == [0]

def test_solution_large_fibonacci():
    pairs, fib_sequence = solution([1, 2], [1, 2, 3], 1)
    assert pairs == [(1, 1), (1, 1)]
    assert fib_sequence == [0, 1]

def test_solution_single_element_lists():
    pairs, fib_sequence = solution([2], [2], 4)
    assert pairs == [(2, 2)]
    assert fib_sequence == [0]
<|Test End|>