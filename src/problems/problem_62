QUESTION

Write a Python function to convert a list of single-digit integers into a single integer, and ensure the function handles cases where the list may include non-integer elements by filtering them out before conversion.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst):
    """
    Converts a list of single-digit integers to a single integer.
    Non-integer elements are filtered out.
    """
    filtered_numbers = [str(num) for num in lst if isinstance(num, int) and 0 <= num <= 9]
    return int(''.join(filtered_numbers)) if filtered_numbers else 0
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_single_digit_integers():
    assert solution([1, 2, 3, 4]) == 1234
    assert solution([9, 0, 8]) == 908

def test_with_non_integer_elements():
    assert solution([1, 'a', 2, None, 3.5, 4]) == 124
    assert solution([5, 'x', 3]) == 53

def test_all_invalid_elements():
    assert solution(['a', None, 3.5, '4']) == 0

def test_no_elements():
    assert solution([]) == 0

def test_with_leading_zeros():
    assert solution([0, 0, 1, 2, 3]) == 123
    assert solution([0, 0, 0, 9]) == 9

def test_with_only_zero():
    assert solution([0]) == 0
<|Test End|>