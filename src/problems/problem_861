QUESTION

Create a Python function to find the first position of an element in a sorted array.

SOL & TESTS

```python
<|Solution Begin|>
def find_first_position(arr, target):
    """
    Find the first position of the target in a sorted array.
    :param arr: List[int] - A sorted list of integers.
    :param target: int - The target integer to find.
    :return: int - The index of the first position of target in arr, or -1 if not found.
    """
    low, high = 0, len(arr) - 1
    result = -1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            result = mid
            high = mid - 1  # search in the left half
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return result
<|Solution End|>
```

```python
<|Test Begin|>
from solution import find_first_position

def test_first_position_found():
    assert find_first_position([1, 2, 3, 4, 5], 3) == 2

def test_first_position_not_found():
    assert find_first_position([1, 2, 3, 4, 5], 6) == -1

def test_first_position_at_beginning():
    assert find_first_position([1, 1, 2, 3, 4], 1) == 0

def test_first_position_at_end():
    assert find_first_position([1, 2, 3, 4, 5], 5) == 4

def test_empty_array():
    assert find_first_position([], 1) == -1

def test_single_element_found():
    assert find_first_position([1], 1) == 0

def test_single_element_not_found():
    assert find_first_position([2], 1) == -1

def test_duplicate_elements():
    assert find_first_position([1, 2, 2, 2, 3], 2) == 1

def test_all_elements_same():
    assert find_first_position([2, 2, 2, 2, 2], 2) == 0
<|Test End|>
```