QUESTION

Write a function that first rotates two lists by a specified number of items to the right, then checks if there are any elements common to both rotated lists, and if so, returns the sum of those common elements. If no common elements exist, return 0.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst1, lst2, rotate_by):
    """
    Rotates two lists by a specified number of items to the right, then checks 
    for common elements in both rotated lists and returns the sum of those elements. 
    Returns 0 if there are no common elements.
    """
    # Function to rotate a list to the right by n steps
    def rotate(lst, n):
        if not lst:
            return lst
        n = n % len(lst)
        return lst[-n:] + lst[:-n]

    # Rotate both lists
    rotated_lst1 = rotate(lst1, rotate_by)
    rotated_lst2 = rotate(lst2, rotate_by)

    # Find common elements
    common_elements = set(rotated_lst1).intersection(set(rotated_lst2))

    # Return the sum of common elements
    return sum(common_elements)

<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_no_common_elements():
    assert solution([1, 2, 3], [4, 5, 6], 1) == 0

def test_solution_with_common_elements():
    assert solution([1, 2, 3], [3, 2, 1], 1) == 3  # Rotated lists [3, 1, 2], [1, 2, 3] have common elements {1, 2, 3}

def test_solution_all_elements_common():
    assert solution([1, 2, 3], [1, 2, 3], 2) == 6  # All elements are common

def test_solution_empty_lists():
    assert solution([], [], 3) == 0

def test_solution_one_empty_list():
    assert solution([1, 2, 3], [], 1) == 0
    assert solution([], [1, 2, 3], 1) == 0

def test_solution_no_rotation():
    assert solution([1, 2, 3], [3, 4, 5], 0) == 3

def test_solution_large_rotation():
    assert solution([1, 2, 3], [3, 4, 5], 100) == 3  # Rotation is effectively 1 step due to length

def test_solution_common_with_negative_numbers():
    assert solution([-1, -2, 3], [3, -2, -5], 2) == 1  # Rotated: [3, -1, -2] and [3, -2, -5]
<|Test End|>