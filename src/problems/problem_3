QUESTION

Write a Python function to find the maximum value from a list of values generated by evaluating a provided periodic function on a fixed set of input points.

SOL & TESTS

To solve the problem of finding the maximum value from a list of values generated by evaluating a provided periodic function on a fixed set of input points, we can define a function that accepts the periodic function, the input points (as a list), and calculates the maximum function value from those points.

### Solution

The following Python function implements this solution:

<|Solution Begin|>
```python
def find_maximum_value(periodic_function, input_points):
    """
    Returns the maximum value obtained by evaluating the periodic_function
    over the specified input_points.

    :param periodic_function: A function that takes one argument and returns a numerical value.
    :param input_points: A list of numerical values to be used as input to the periodic function.
    :return: The maximum value obtained by evaluating the function on the input points.
    """
    return max(periodic_function(x) for x in input_points)
```
<|Solution End|>

### Unit Tests

Below are the unit tests for the `find_maximum_value` function using the pytest syntax. These tests are implementation-independent, meaning they only rely on the behavior defined by the problem statement rather than any specific implementation details.

<|Test Begin|>
```python
from solution import find_maximum_value
import math

def test_maximum_of_sine_function():
    input_points = [0, math.pi/2, math.pi, 3*math.pi/2, 2*math.pi]
    assert find_maximum_value(math.sin, input_points) == 1

def test_maximum_of_cosine_function():
    input_points = [0, math.pi/2, math.pi, 3*math.pi/2, 2*math.pi]
    assert find_maximum_value(math.cos, input_points) == 1

def test_maximum_of_linear_function():
    def linear_function(x):
        return 2 * x + 1
    
    input_points = [-1, 0, 1, 2, 3]
    assert find_maximum_value(linear_function, input_points) == 7

def test_maximum_of_quadratic_function():
    def quadratic_function(x):
        return -(x - 1) ** 2 + 3
    
    input_points = [-2, -1, 0, 1, 2, 3]
    assert find_maximum_value(quadratic_function, input_points) == 3

def test_maximum_of_empty_input():
    with pytest.raises(ValueError):
        find_maximum_value(math.sin, [])
```
<|Test End|>

These tests cover various types of functions, including trigonometric, linear, and quadratic functions, as well as handling edge cases such as empty input lists. Note that we should ensure to handle empty inputs properly, hence raising a `ValueError` when the input list is empty is considered.