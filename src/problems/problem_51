QUESTION

Write a python function that takes a list of tuples, where each tuple can contain a mix of integers and strings. First, remove any duplicate values from the tuples while keeping the order of their first occurrence. Then, interchange the first and last element of each tuple. Finally, return a flattened list containing only the last element of each modified tuple.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst_of_tuples):
    """
    This function takes a list of tuples, removes duplicate values from each tuple,
    then interchanges the first and last element of each tuple, and finally returns
    a list containing only the last element of each modified tuple.
    """
    def remove_duplicates(seq):
        seen = set()
        result = []
        for item in seq:
            if item not in seen:
                seen.add(item)
                result.append(item)
        return result
    
    modified_tuples = []
    
    for tup in lst_of_tuples:
        unique_items = remove_duplicates(tup)
        if len(unique_items) >= 2:
            unique_items[0], unique_items[-1] = unique_items[-1], unique_items[0]
        modified_tuples.append(unique_items)
    
    return [tup[-1] for tup in modified_tuples if tup]

<|Solution End|>
<|Test Begin|>
def test_solution_single_tuple():
    assert solution([('a', 1, 'a', 2, 2, 3)]) == [1]

def test_solution_multiple_tuples():
    assert solution([('a', 1, 'a', 2, 2, 3), (1, 'b', 'b', 2), (3, 3, 3)]) == [1, 1, 3]

def test_solution_no_duplicates():
    assert solution([(1, 2, 3), ('x', 'y', 'z')]) == [1, 'x']

def test_solution_with_empty_tuple():
    assert solution([]) == []

def test_solution_with_all_duplicate_tuple():
    assert solution([(1, 1, 1), ('a', 'a')]) == [1, 'a']

def test_solution_with_int_and_str_mixed():
    assert solution([(1, 'a', 2, 'b', 'a', 2)]) == [1]

def test_solution_with_single_element_tuples():
    assert solution([(1,), ('a',), ('b',)]) == [1, 'a', 'b']
<|Test End|>