QUESTION

**New Question:**

Create a function that receives a list of mixed data types, which can include sentences (as strings), numbers, and dictionaries. The function should:

1. Traverse the list to achieve the following:
    - For each sentence (string):
      - Reverse the order of words while maintaining the character order within each word.
      - Extract alphabets, and for each word, record the frequency of consecutive duplicate characters.
    - For numbers:
      - Calculate the bitwise left rotation of each number.
      - Sum the result of these rotations.
    - For dictionaries:
      - Merge them into a single dictionary, handling nested dictionaries by recursively merging common keys.

2. After processing:
    - Return three values:
      - A list of modified sentences (with reversed word order and frequency of consecutive duplicates noted).
      - The sum of all left-rotated numbers.
      - A single merged dictionary.
    - Additionally, compare the sum of the left-rotated numbers and the total count of extracted characters from sentences. If the sum is greater, convert all words in the sentences to uppercase before returning the modified list of sentences. 

### Example Function Signature:
```python
def process_mixed_data(data_list):
    # Implementation here
    pass
```

### Example:
```python
data_list = [
    "hello world",
    7,
    {"a": 1, "b": {"c": 2}},
    "test this string test",
    3,
]

# After processing:
# - The word order in sentences is reversed ("world hello", "string this test").
# - Words report duplicate frequencies ("w2o1r1l1d1 h1e1l2o1").
# - Numbers are left-rotated and summed.
# - Dictionaries are merged.

result = process_mixed_data(data_list)
```

This problem incorporates concepts from handling strings, numeric operations like bit manipulation, and merging dictionaries with a focus on recursion for nested structures.

SOL & TESTS

```python
def process_mixed_data(data_list):
    def reverse_and_count_duplicates(sentence):
        words = sentence.split()
        reversed_words = words[::-1]
        result = []
        
        for word in reversed_words:
            counts = []
            i = 0
            while i < len(word):
                char = word[i]
                count = 1
                while i + 1 < len(word) and word[i + 1] == char:
                    count += 1
                    i += 1
                counts.append(f"{char}{count if count > 1 else ''}")
                i += 1
            result.append(''.join(counts))
        
        return ' '.join(result)
    
    def bitwise_left_rotate(num):
        bit_length = num.bit_length() 
        return ((num << 1) & ((1 << bit_length) - 1)) | (num >> (bit_length - 1))
    
    def merge_dicts(dict1, dict2):
        result = dict1.copy()
        for key, value in dict2.items():
            if (
                key in result 
                and isinstance(result[key], dict) 
                and isinstance(value, dict)
            ):
                result[key] = merge_dicts(result[key], value)
            else:
                result[key] = value
        return result
    
    modified_sentences = []
    number_sum = 0
    merged_dict = {}
    char_count = 0
    
    for item in data_list:
        if isinstance(item, str):
            modified_sentence = reverse_and_count_duplicates(item)
            modified_sentences.append(modified_sentence)
            char_count += sum(char.isalpha() for char in modified_sentence)
        elif isinstance(item, (int, float)):
            number_sum += bitwise_left_rotate(int(item))
        elif isinstance(item, dict):
            merged_dict = merge_dicts(merged_dict, item)
    
    if number_sum > char_count:
        modified_sentences = [sentence.upper() for sentence in modified_sentences]
    
    return modified_sentences, number_sum, merged_dict
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_mixed_data

def test_process_mixed_data():
    data_list = [
        "hello world",
        7,
        {"a": 1, "b": {"c": 2}},
        "test this string test",
        3,
    ]
    
    modified_sentences, number_sum, merged_dict = process_mixed_data(data_list)
    
    expected_sentences = ["world h1e1l2o", "string this t1e1s2t"]
    expected_number_sum = 26 # 7 -> 11 (1101 -> 1011), 3 -> 6 (0011 -> 0110)
    expected_merged_dict = {"a": 1, "b": {"c": 2}}
    
    assert modified_sentences == [sentence.upper() for sentence in expected_sentences]
    assert number_sum == expected_number_sum
    assert merged_dict == expected_merged_dict

def test_empty_list():
    assert process_mixed_data([]) == ([], 0, {})

def test_only_numbers():
    data_list = [1, 2, 3]
    modified_sentences, number_sum, merged_dict = process_mixed_data(data_list)
    assert modified_sentences == []
    assert number_sum == 4 # All rotated sums 1 -> 1, 2 -> 2, 3 -> 4
    assert merged_dict == {}

def test_only_strings():
    data_list = ["alpha beta", "gamma delta"]
    modified_sentences, number_sum, merged_dict = process_mixed_data(data_list)
    
    expected_sentences = ["b1e1t1a a1l1p1h1a", "d1e1l1t1a g1a1m1m1a"]
    
    assert modified_sentences == expected_sentences
    assert number_sum == 0
    assert merged_dict == {}

def test_only_dicts():
    data_list = [{"x": 1, "y": {"z": 2}}, {"y": {"a": 3}, "b": 4}]
    modified_sentences, number_sum, merged_dict = process_mixed_data(data_list)
    
    expected_dict = {"x": 1, "y": {"z": 2, "a": 3}, "b": 4}
    
    assert modified_sentences == []
    assert number_sum == 0
    assert merged_dict == expected_dict
```
<|Test End|>