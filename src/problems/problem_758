QUESTION

Create a function that processes a list of strings in the following way:

1. Use regular expressions to filter out strings that end with a letter followed by zero or more numbers (e.g., "abc123" or "x9").
2. For each filtered string, convert it from camelCase to snake_case.
3. Return a tuple containing two elements:
   - A list of processed strings (converted to snake_case).
   - A dictionary mapping each original string (before conversion) in the filtered list to the count of its consecutive duplicate characters.

This question integrates regex pattern matching (from Questions 1 and 4), camelCase to snake_case conversion (from Question 3), and counting consecutive duplicates (from Question 5).

SOL & TESTS

<|Solution Begin|> 
```python
import re

def camel_to_snake(camel_str):
    """Convert a camelCase string to snake_case."""
    snake_str = re.sub(r'(?<!^)(?=[A-Z])', '_', camel_str).lower()
    return snake_str

def process_strings(strings):
    """
    Processes a list of strings to filter, convert, and count duplicates.
    
    1. Filters strings ending with letter followed by zero or more numbers.
    2. Converts these strings from camelCase to snake_case.
    3. Counts consecutive duplicate characters in each string.
    
    Args:
    - strings (list of str): The input list of strings.
    
    Returns:
    tuple: A list of processed strings in snake_case and a dictionary with originals mapped to
    their consecutive duplicate counts.
    """
    # Pattern to filter strings that end with a letter followed by zero or more numbers
    pattern = r'[a-zA-Z]+\d*$'
    
    processed_strings = []
    duplicates_count = {}
    
    for string in strings:
        if re.fullmatch(pattern, string):
            snake_str = camel_to_snake(string)
            processed_strings.append(snake_str)
            
            # Count consecutive duplicate characters
            count_dict = {}
            prev_char = ''
            count = 0
            for char in snake_str:
                if char == prev_char:
                    count += 1
                else:
                    if count > 1:  # Only consider duplicates
                        if prev_char in count_dict:
                            count_dict[prev_char] += count
                        else:
                            count_dict[prev_char] = count
                    prev_char = char
                    count = 1
            
            # Check last accumulated sequence
            if count > 1:
                if prev_char in count_dict:
                    count_dict[prev_char] += count
                else:
                    count_dict[prev_char] = count
            
            duplicates_count[string] = count_dict
    
    return processed_strings, duplicates_count
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_strings

def test_process_strings_basic():
    strings = ["myVar123", "anotherTest9", "simple100Test", "notMatched", "endWithX"]
    expected_processed = ["my_var123", "another_test9", "simple100_test"]
    expected_duplicates_count = {
        "myVar123": {},
        "anotherTest9": {'t': 2},
        "simple100Test": {'t': 2}
    }
    result_processed, result_duplicates_count = process_strings(strings)
    assert result_processed == expected_processed
    assert result_duplicates_count == expected_duplicates_count

def test_process_strings_empty():
    strings = []
    expected_processed = []
    expected_duplicates_count = {}
    result_processed, result_duplicates_count = process_strings(strings)
    assert result_processed == expected_processed
    assert result_duplicates_count == expected_duplicates_count

def test_process_strings_no_matching_ends():
    strings = ["simpleCase", "TestString123", "invalidEnd@", "AnotherInvalid999!"]
    expected_processed = []
    expected_duplicates_count = {}
    result_processed, result_duplicates_count = process_strings(strings)
    assert result_processed == expected_processed
    assert result_duplicates_count == expected_duplicates_count

def test_process_strings_with_multiple_duplicates():
    strings = ["repeatingCharracters555", "multipleEs7", "consecutiveLetters8"]
    expected_processed = ["repeating_charracters555", "multiple_es7", "consecutive_letters8"]
    expected_duplicates_count = {
        "repeatingCharracters555": {'r': 2},
        "multipleEs7": {'e': 2},
        "consecutiveLetters8": {'e': 2, 't': 2}
    }
    result_processed, result_duplicates_count = process_strings(strings)
    assert result_processed == expected_processed
    assert result_duplicates_count == expected_duplicates_count

def test_process_strings_only_numbers():
    strings = ["123", "abc489", "num2000"]
    expected_processed = ["abc489", "num2000"]
    expected_duplicates_count = {
        "abc489": {},
        "num2000": {'0': 3}
    }
    result_processed, result_duplicates_count = process_strings(strings)
    assert result_processed == expected_processed
    assert result_duplicates_count == expected_duplicates_count
```
<|Test End|>