QUESTION

Write a function that takes a list of lists and performs two operations:

1. For each inner list, sort it in descending order.
2. Then, for the sorted list, check if it contains any consecutive duplicate elements and return the count of such duplicates for each inner list.

The function should return a list containing the count of consecutive duplicates for each processed inner list.

SOL & TESTS

<|Solution Begin|>
```python
def process_lists(list_of_lists):
    """
    Processes a list of lists by sorting each inner list in descending order
    and then counting consecutive duplicates.

    :param list_of_lists: List of lists to be processed
    :return: List of counts of consecutive duplicates for each inner list
    """
    def count_consecutive_duplicates(lst):
        """Counts the consecutive duplicates in a list."""
        if not lst:
            return 0
        
        count = 0
        previous = lst[0]
        
        for current in lst[1:]:
            if current == previous:
                count += 1
            previous = current
        
        return count

    result = []
    for sublist in list_of_lists:
        sorted_sublist = sorted(sublist, reverse=True)
        count_duplicates = count_consecutive_duplicates(sorted_sublist)
        result.append(count_duplicates)
    
    return result
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_lists

def test_process_lists_empty():
    assert process_lists([]) == []

def test_process_lists_no_duplicates():
    assert process_lists([[5, 3, 1], [10, 8, 6]]) == [0, 0]

def test_process_lists_with_duplicates():
    assert process_lists([[2, 2, 1], [3, 3, 3, 1], [4, 6, 6, 5]]) == [1, 2, 1]

def test_process_lists_mixed():
    assert process_lists([[9, 5, 5, 2], [7, 6, 4, 6, 6]]) == [1, 1]

def test_process_lists_single_element_lists():
    assert process_lists([[1], [2], [3]]) == [0, 0, 0]

def test_process_lists_large_numbers():
    assert process_lists([[100, 100, 5], [3000, 3000, 3000, 2000]]) == [1, 2]
```
<|Test End|>