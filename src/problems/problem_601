QUESTION

Create a Python function that accepts a list of strings and an integer `m`. Each string represents a list of comma-separated integers. The function should perform the following steps:

1. Rotate the list of strings `m` positions to the left.
2. For each string in the rotated list, convert it into a list of integers.
3. Identify all the integers that are prime numbers in each list.
4. Count the frequency of each distinct prime number across all lists.
5. Find the cumulative sum of all the unique prime numbers, where each prime is only added once regardless of its frequency.
6. Return the cumulative sum as a binary string.

For example, if the input list of strings is `["2,3,4,5", "7,8,10", "11,13,17"]` and `m` is `1`, the rotated list will be `["7,8,10", "11,13,17", "2,3,4,5"]`. The unique prime numbers are `[2, 3, 5, 7, 11, 13, 17]`. The cumulative sum of these unique primes is `58`, and the binary representation of `58` is `'111010'`. Thus, the function should return `'111010'`.

SOL & TESTS

<|Solution Begin|>```python
def is_prime(num):
    """ Returns True if num is a prime number, otherwise False. """
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

def rotate_left(lst, m):
    """ Rotates the list lst to the left by m positions. """
    return lst[m:] + lst[:m]

def sum_of_unique_primes_as_binary(str_list, m):
    # Step 1: Rotate the list m positions to the left.
    rotated_list = rotate_left(str_list, m)
    
    # Step 2 and 3: Convert each string to a list of integers and find primes
    prime_set = set()
    for string in rotated_list:
        nums = map(int, string.split(','))
        for num in nums:
            if is_prime(num):
                prime_set.add(num)
    
    # Step 5: Calculate the sum of all unique prime numbers
    prime_sum = sum(prime_set)
    
    # Step 6: Convert the sum to a binary string
    return bin(prime_sum)[2:]
``` 
<|Solution End|>

<|Test Begin|>```python
from solution import sum_of_unique_primes_as_binary

def test_example_case():
    assert sum_of_unique_primes_as_binary(["2,3,4,5", "7,8,10", "11,13,17"], 1) == '111010'

def test_no_rotation():
    assert sum_of_unique_primes_as_binary(["2,3,5", "7,11", "13,17"], 0) == '111010'

def test_with_rotation():
    assert sum_of_unique_primes_as_binary(["13,17", "2,3,5", "7,11"], 2) == '111010'

def test_all_non_primes():
    assert sum_of_unique_primes_as_binary(["4,6,8,10", "12,14,15", "9,1,0"], 1) == '0'  # No primes present

def test_all_primes():
    assert sum_of_unique_primes_as_binary(["2,3,5", "7,11", "13,17"], 1) == '111010'  # Same primes as example

def test_single_list():
    assert sum_of_unique_primes_as_binary(["2,4,6,8,3"], 0) == '101'  # Primes: 2,3; Sum: 5

def test_binary_check():
    assert sum_of_unique_primes_as_binary(["31","2"], 0) == '100011'  # Primes: 31,2; Sum: 33; Binary: '100011'
```
<|Test End|>