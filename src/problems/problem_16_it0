QUESTION

Write a Python function that takes a list of strings, each representing a float number, and a list of integers that correspond to dimensions for square matrices. The function should first validate each string to ensure it can be converted to a valid float and each integer is used as a positive dimension for a square matrix. For each valid pair, convert the string into a float rounded to two decimal places and generate a spirally arranged square matrix with the float as its single element in each cell. Return a list of tuples, where each tuple contains the rounded float and its corresponding spirally filled matrix. Ensure the list of floats and integers are of the same length before processing.

SOLUTION/TESTS

<|Solution Begin|>
def solution(float_strings, matrix_dimensions):
    """
    Takes a list of float numbers in string form and a list of integers (matrix dimensions),
    validates and processes them to produce a list of tuples each containing a rounded float
    and its corresponding spirally filled square matrix.

    :param float_strings: List of float numbers as strings
    :param matrix_dimensions: List of integers representing matrix dimensions
    :return: List of tuples, each tuple contains a float and its spirally filled square matrix
    """
    if len(float_strings) != len(matrix_dimensions):
        raise ValueError("The list of floats and dimensions must be of the same length.")
    
    matrices = []
    
    for float_str, dim in zip(float_strings, matrix_dimensions):
        try:
            float_value = round(float(float_str), 2)
        except ValueError:
            raise ValueError(f"Invalid float string: {float_str}")
        
        if not isinstance(dim, int) or dim <= 0:
            raise ValueError(f"Invalid dimension: {dim} must be a positive integer")
        
        matrix = [[None]*dim for _ in range(dim)]
        num = float_value
        left, top = 0, 0
        right, bottom = dim - 1, dim - 1
        while left <= right and top <= bottom:
            for i in range(left, right + 1):
                matrix[top][i] = num
            top += 1
            for i in range(top, bottom + 1):
                matrix[i][right] = num
            right -= 1
            if top <= bottom:
                for i in range(right, left - 1, -1):
                    matrix[bottom][i] = num
                bottom -= 1
            if left <= right:
                for i in range(bottom, top - 1, -1):
                    matrix[i][left] = num
                left += 1
        
        matrices.append((float_value, matrix))
    
    return matrices
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_solution_typical_use_case():
    result = solution(["3.14159", "2.71828"], [2, 3])
    assert result == [
        (3.14, [[3.14, 3.14], [3.14, 3.14]]),
        (2.72, [
            [2.72, 2.72, 2.72],
            [2.72, 0.00, 2.72],
            [2.72, 2.72, 2.72]
        ])
    ]

def test_solution_invalid_float_string():
    try:
        solution(["abc"], [1])
    except ValueError as err:
        assert str(err) == "Invalid float string: abc"

def test_solution_invalid_dimension():
    try:
        solution(["3.14"], [0])
    except ValueError as err:
        assert str(err) == "Invalid dimension: 0 must be a positive integer"

def test_solution_different_lengths():
    try:
        solution(["3.14"], [2, 3])
    except ValueError as err:
        assert str(err) == "The list of floats and dimensions must be of the same length."

def test_solution_large_matrix():
    result = solution(["1.0"], [1])
    assert result == [(1.0, [[1.0]])]

    result = solution(["1.0"], [4])
    expected_matrix = [
        [1.0, 1.0, 1.0, 1.0],
        [1.0, 0.00, 0.00, 1.0],
        [1.0, 0.00, 0.00, 1.0],
        [1.0, 1.0, 1.0, 1.0]
    ]
    assert result == [(1.0, expected_matrix)]

def test_solution_single_element():
    result = solution(["-1.234"], [1])
    assert result == [(-1.23, [[-1.23]])]
<|Test End|>