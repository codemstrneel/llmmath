QUESTION

Write a function that takes a list of integers and returns a square matrix filled with the first n perfect squares of the sum of products of all possible contiguous subarrays, arranged in spiral order. After constructing the matrix, determine if the matrix, as read in a spiral order, forms a valid monotonic sequence.

SOLUTION/TESTS

To solve the given problem, we first need to understand the steps involved:

1. **Calculate the Sum of Products of Contiguous Subarrays (SOPCS):**  
   Generate all possible contiguous subarrays of the input list. Calculate the product of elements for each subarray and then compute the sum of these products.

2. **Generate Perfect Squares:**  
   Use the SOPCS to generate the first n perfect squares. For example, if SOPCS is 5, generate [1, 4, 9, 16, 25].

3. **Fill the Square Matrix in Spiral Order:**  
   Based on the length of the list, determine the size of the square matrix. Fill this matrix in a spiral order using the perfect squares calculated.

4. **Check for Monotonic Sequence:**  
   After obtaining the numbers in spiral order from the matrix, check if this sequence is monotonic, i.e., either entirely non-increasing or non-decreasing.

Now, let's implement the solution in Python.

```python
<|Solution Begin|>
import math

def calculate_sopcs(arr):
    n = len(arr)
    sopcs = 0
    for i in range(n):
        product = 1
        for j in range(i, n):
            product *= arr[j]
            sopcs += product
    return sopcs

def generate_perfect_squares(n):
    perfect_squares = []
    root = 1
    while len(perfect_squares) < n*n:
        perfect_squares.append(root * root)
        root += 1
    return perfect_squares

def fill_spiral_matrix(n, perfect_squares):
    mat = [[0] * n for _ in range(n)]
    top, bottom, left, right = 0, n-1, 0, n-1
    index = 0
    
    while top <= bottom and left <= right:
        for i in range(left, right + 1):
            mat[top][i] = perfect_squares[index]
            index += 1
        top += 1
        
        for i in range(top, bottom + 1):
            mat[i][right] = perfect_squares[index]
            index += 1
        right -= 1
        
        if top <= bottom:
            for i in range(right, left - 1, -1):
                mat[bottom][i] = perfect_squares[index]
                index += 1
            bottom -= 1
            
        if left <= right:
            for i in range(bottom, top - 1, -1):
                mat[i][left] = perfect_squares[index]
                index += 1
            left += 1
    
    return mat

def matrix_to_spiral_sequence(mat):
    n = len(mat)
    spiral_sequence = []
    top, bottom, left, right = 0, n-1, 0, n-1
    
    while top <= bottom and left <= right:
        for i in range(left, right + 1):
            spiral_sequence.append(mat[top][i])
        top += 1
        
        for i in range(top, bottom + 1):
            spiral_sequence.append(mat[i][right])
        right -= 1
        
        if top <= bottom:
            for i in range(right, left - 1, -1):
                spiral_sequence.append(mat[bottom][i])
            bottom -= 1
            
        if left <= right:
            for i in range(bottom, top - 1, -1):
                spiral_sequence.append(mat[i][left])
            left += 1
    
    return spiral_sequence

def is_monotonic(arr):
    increasing = decreasing = True
    for i in range(1, len(arr)):
        if arr[i] > arr[i - 1]:
            decreasing = False
        if arr[i] < arr[i - 1]:
            increasing = False
    return increasing or decreasing

def solution(arr):
    n = len(arr)
    sopcs = calculate_sopcs(arr)
    perfect_squares = generate_perfect_squares(n)
    spiral_matrix = fill_spiral_matrix(n, perfect_squares)
    spiral_sequence = matrix_to_spiral_sequence(spiral_matrix)
    return is_monotonic(spiral_sequence)
<|Solution End|>
```

Now let's write the unit tests for the solution:

```python
<|Test Begin|>
def test_sopcs_calculation():
    assert calculate_sopcs([1, 2, 3]) == 23
    assert calculate_sopcs([1]) == 1
    assert calculate_sopcs([3, 4]) == 19

def test_generate_perfect_squares():
    assert generate_perfect_squares(2) == [1, 4, 9, 16]
    assert len(generate_perfect_squares(3)) == 9

def test_fill_spiral_matrix():
    ps = generate_perfect_squares(2)
    mat = fill_spiral_matrix(2, ps)
    assert mat == [[1, 4], [9, 16]]

def test_matrix_to_spiral_sequence():
    mat = [[1, 4], [9, 16]]
    seq = matrix_to_spiral_sequence(mat)
    assert seq == [1, 4, 16, 9]

def test_is_monotonic():
    assert is_monotonic([1, 4, 9, 16]) == True
    assert is_monotonic([16, 9, 4, 1]) == True
    assert is_monotonic([1, 9, 4, 16]) == False

def test_solution():
    assert solution([1, 2, 3]) == True
    assert solution([1]) == True
    assert solution([3, 4, 5]) == False
<|Test End|>
```