QUESTION

Create a Python function that takes a list of integers and returns a list of tuples. Each tuple should contain two elements: a prime number from the list and the frequency of its consecutive occurrences in the list. The output list should only include tuples for numbers that are both prime and have consecutive duplicates in the input list.

In your implementation, you should:
- Identify prime numbers in the input list.
- Detect consecutive duplicate occurrences of those prime numbers.
- Construct and return a list of tuples for each unique prime number with consecutive duplicates, where each tuple is formatted as (prime_number, consecutive_frequency).

SOL & TESTS

<|Solution Begin|> 
```python
def is_prime(n):
    """ Check if a given number is a prime number. """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_consecutive_frequencies(lst):
    """
    Returns a list of tuples where each tuple contains a prime number 
    from the input list with consecutive occurrences, and its frequency.
    """
    if not lst:
        return []

    result = []
    i = 0
    while i < len(lst):
        if is_prime(lst[i]):
            count = 1
            number = lst[i]
            while i + 1 < len(lst) and lst[i + 1] == number:
                count += 1
                i += 1
            if count > 1:
                # Only include if there are consecutive duplicates
                result.append((number, count))
        i += 1

    return result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import prime_consecutive_frequencies

def test_no_consecutive_primes():
    assert prime_consecutive_frequencies([2, 3, 5, 7, 11]) == []

def test_consecutive_primes():
    assert prime_consecutive_frequencies([2, 2, 3, 5, 5, 5, 7, 11, 11, 11, 11]) == [(2, 2), (5, 3), (11, 4)]

def test_mixed_numbers():
    assert prime_consecutive_frequencies([4, 6, 9, 11, 11, 13, 15, 17, 17, 17, 19]) == [(11, 2), (17, 3)]

def test_single_non_consecutive_primes():
    assert prime_consecutive_frequencies([2, 3, 5, 7, 11, 13, 17, 19]) == []

def test_empty_list():
    assert prime_consecutive_frequencies([]) == []

def test_all_consecutive_non_primes():
    assert prime_consecutive_frequencies([1, 4, 4, 4, 6, 6, 8, 8, 8, 8]) == []

def test_all_consecutive_primes():
    assert prime_consecutive_frequencies([2, 2, 2, 3, 3, 5, 5]) == [(2, 3), (3, 2), (5, 2)]
```
<|Test End|>