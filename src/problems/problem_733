QUESTION

Create a Python function that processes a list of tuples. Each tuple contains a rectangle's dimensions (length, width) and a descriptive name in the form of a string that may contain duplicate words. The function should perform the following actions:

1. Calculate the perimeter of each rectangle using the given dimensions (length and width) from the tuples.
2. For each descriptive name, remove any duplicate words, ensuring that the remaining words are sorted in alphabetical order.
3. Return a new list of tuples where each tuple contains the calculated perimeter and the modified descriptive name without duplicates.

For example, given input: `[(4, 5, "long narrow long"), (3, 3, "square shape square"), (6, 2, "rectangle rectangle example")]`, the function should return: `[(18, "long narrow"), (12, "shape square"), (16, "example rectangle")]`.

SOL & TESTS

<|Solution Begin|>```python
def process_rectangles(rectangles):
    """
    Processes a list of tuples containing rectangle dimensions and descriptive names.
    
    Args:
    rectangles (list of tuples): Each tuple contains (length, width, name).
    
    Returns:
    list of tuples: Each tuple contains the perimeter and modified name.
    """
    result = []
    for length, width, name in rectangles:
        # Calculate the perimeter
        perimeter = 2 * (length + width)
        
        # Split the name, remove duplicates and sort alphabetically
        words = name.split()
        unique_words = sorted(set(words))
        
        # Join the words back into a string
        modified_name = " ".join(unique_words)
        
        # Append the perimeter and modified name to the result list
        result.append((perimeter, modified_name))
    
    return result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_rectangles

def test_process_rectangles_simple():
    rectangles = [(4, 5, "long narrow long"), (3, 3, "square shape square"), (6, 2, "rectangle rectangle example")]
    expected = [(18, "long narrow"), (12, "shape square"), (16, "example rectangle")]
    assert process_rectangles(rectangles) == expected

def test_process_rectangles_duplicate_words():
    rectangles = [(5, 5, "five five five"), (8, 3, "eight eight three three")]
    expected = [(20, "five"), (22, "eight three")]
    assert process_rectangles(rectangles) == expected

def test_process_rectangles_no_duplicate_words():
    rectangles = [(2, 3, "small box"), (10, 10, "large cube")]
    expected = [(10, "box small"), (40, "cube large")]
    assert process_rectangles(rectangles) == expected

def test_process_rectangles_empty_name():
    rectangles = [(6, 7, ""), (3, 8, "")]
    expected = [(26, ""), (22, "")]
    assert process_rectangles(rectangles) == expected

def test_process_rectangles_unique_words():
    rectangles = [(9, 9, "red blue green yellow"), (2, 3, "one two three four")]
    expected = [(36, "blue green red yellow"), (10, "four one three two")]
    assert process_rectangles(rectangles) == expected

def test_process_rectangles_complex_names():
    rectangles = [(7, 5, "alpha beta alpha gamma beta"), (4, 6, "delta epsilon delta zeta eta")]
    expected = [(24, "alpha beta gamma"), (20, "delta epsilon eta zeta")]
    assert process_rectangles(rectangles) == expected
```
<|Test End|>