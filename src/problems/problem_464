QUESTION

New Question: Write a function to extract the protocol, domain, and path from a URL using regular expressions.

SOL & TESTS

<|Solution Begin|>
```python
import re

def extract_url_parts(url):
    """
    Extracts the protocol, domain, and path from a given URL.

    Parameters:
    url (str): The URL to extract parts from.

    Returns:
    tuple: A tuple containing the protocol, domain, and path.
    """
    pattern = re.compile(r'^(?P<protocol>https?)://(?P<domain>[^/]+)(?P<path>/?.*)$')
    match = pattern.match(url)
    
    if match:
        return match.group('protocol'), match.group('domain'), match.group('path')
    return None, None, None
```
<|Solution End|>
<|Test Begin|>
```python
from solution import extract_url_parts

def test_extract_url_standard():
    assert extract_url_parts("https://www.example.com/path/to/resource") == ("https", "www.example.com", "/path/to/resource")

def test_extract_url_without_path():
    assert extract_url_parts("http://example.com") == ("http", "example.com", "")

def test_extract_url_with_trailing_slash():
    assert extract_url_parts("https://example.com/") == ("https", "example.com", "/")

def test_extract_url_no_protocol():
    assert extract_url_parts("www.example.com/path") == (None, None, None)

def test_extract_url_only_domain():
    assert extract_url_parts("http://example.com") == ("http", "example.com", "")

def test_extract_url_invalid_url():
    assert extract_url_parts("not a url") == (None, None, None)
```
<|Test End|>