QUESTION

Write a Python function to remove the k'th element from a given list, and ensure your solution works efficiently for very large lists containing up to 10 million elements.

SOL & TESTS

<|Solution Begin|>
```python
def remove_kth_element(lst, k):
    """
    Removes the k'th element from the list 'lst' and returns the new list.
    If 'k' is out of range, returns the list unchanged.
    """
    if 0 <= k < len(lst):
        return lst[:k] + lst[k+1:]
    return lst
```
<|Solution End|>
<|Test Begin|>
```python
from solution import remove_kth_element

def test_remove_kth_element_middle():
    lst = [1, 2, 3, 4, 5]
    k = 2
    assert remove_kth_element(lst, k) == [1, 2, 4, 5]

def test_remove_kth_element_first():
    lst = [10, 20, 30, 40]
    k = 0
    assert remove_kth_element(lst, k) == [20, 30, 40]

def test_remove_kth_element_last():
    lst = [7, 8, 9, 10]
    k = 3
    assert remove_kth_element(lst, k) == [7, 8, 9]

def test_remove_kth_element_out_of_range_positive():
    lst = [1, 2, 3]
    k = 5
    # When k is out of range, the list should remain unchanged
    assert remove_kth_element(lst, k) == [1, 2, 3]

def test_remove_kth_element_out_of_range_negative():
    lst = [1, 2, 3]
    k = -1
    # Negative indices should treat k as out of range; list should remain unchanged
    assert remove_kth_element(lst, k) == [1, 2, 3]

def test_remove_kth_element_large_list():
    large_lst = list(range(10_000_000))
    k = 1_000_000
    expected_result = list(range(1_000_000)) + list(range(1_000_001, 10_000_000))
    assert remove_kth_element(large_lst, k) == expected_result
```
<|Test End|>