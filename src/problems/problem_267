QUESTION

Write a function to merge two dictionaries into a single expression, with an additional requirement that you must handle cases where both dictionaries contain nested dictionaries.

SOL & TESTS

```python
<|Solution Begin|>
def merge_dicts(dict1, dict2):
    """
    Merges two dictionaries into one, handling cases where both dictionaries contain nested dictionaries.
    """
    merged_dict = dict1.copy()  # Start with a copy of the first dictionary
    for key, value in dict2.items():
        if key in merged_dict:
            # If both dictionaries have a dictionary at this key, merge them recursively
            if isinstance(merged_dict[key], dict) and isinstance(value, dict):
                merged_dict[key] = merge_dicts(merged_dict[key], value)
            else:
                # If they do not merge to this use value from the second dict
                merged_dict[key] = value
        else:
            merged_dict[key] = value
    return merged_dict
<|Solution End|>
```

```python
<|Test Begin|>
from solution import merge_dicts

def test_merge_disjoint_keys():
    dict1 = {'a': 1, 'b': 2}
    dict2 = {'c': 3, 'd': 4}
    assert merge_dicts(dict1, dict2) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}

def test_merge_overlapping_keys_no_nested_dicts():
    dict1 = {'a': 1, 'b': 2}
    dict2 = {'b': 3, 'c': 4}
    assert merge_dicts(dict1, dict2) == {'a': 1, 'b': 3, 'c': 4}

def test_merge_with_nested_dicts():
    dict1 = {'a': 1, 'b': {'x': 10, 'y': 20}}
    dict2 = {'b': {'y': 25, 'z': 30}, 'c': 3}
    assert merge_dicts(dict1, dict2) == {'a': 1, 'b': {'x': 10, 'y': 25, 'z': 30}, 'c': 3}

def test_merge_with_nested_dict_in_one():
    dict1 = {'a': 1, 'b': {'x': 10}}
    dict2 = {'b': 2, 'c': 3}
    assert merge_dicts(dict1, dict2) == {'a': 1, 'b': 2, 'c': 3}

def test_merge_empty_dicts():
    dict1 = {}
    dict2 = {}
    assert merge_dicts(dict1, dict2) == {}

def test_merge_with_empty_dict():
    dict1 = {'a': 1}
    dict2 = {}
    assert merge_dicts(dict1, dict2) == {'a': 1}

    dict1 = {}
    dict2 = {'b': 2}
    assert merge_dicts(dict1, dict2) == {'b': 2}
<|Test End|>
```