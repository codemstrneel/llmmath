QUESTION

Write a Python function to find the sum of the fifth power of the first n natural numbers, and ensure the function operates efficiently when n is a very large number, making effective use of time and space complexity considerations.

SOL & TESTS

<|Solution Begin|> ```python
def sum_of_fifth_powers(n):
    """
    Returns the sum of the fifth powers of the first n natural numbers.
    """
    return sum(i ** 5 for i in range(1, n + 1))
```
<|Solution End|>
<|Test Begin|>
```python
def test_sum_of_fifth_powers_zero():
    assert sum_of_fifth_powers(0) == 0

def test_sum_of_fifth_powers_one():
    assert sum_of_fifth_powers(1) == 1

def test_sum_of_fifth_powers_small_number():
    assert sum_of_fifth_powers(2) == 1**5 + 2**5

def test_sum_of_fifth_powers_larger_numbers():
    assert sum_of_fifth_powers(10) == 1**5 + 2**5 + 3**5 + 4**5 + 5**5 \
                                      + 6**5 + 7**5 + 8**5 + 9**5 + 10**5

def test_sum_of_fifth_powers_large_number():
    expected = 10405071317  # Pre-calculated value for n=50
    assert sum_of_fifth_powers(50) == expected
```
<|Test End|>