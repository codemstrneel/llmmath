QUESTION

Write a function that takes a list of numbers and returns a boolean indicating whether every odd indexed number, when rounded down to the nearest integer, is a prime number. The function should treat any negative or zero numbers as non-prime by default.

SOLUTION/TESTS

<|Solution Begin|>
def solution(numbers):
    """
    Returns True if every odd indexed number in the list, when rounded down to the nearest integer, is a prime number. False otherwise.
    """
    def is_prime(num):
        if num <= 1:
            return False
        if num == 2:
            return True
        if num % 2 == 0:
            return False
        for i in range(3, int(num**0.5) + 1, 2):
            if num % i == 0:
                return False
        return True

    for index in range(1, len(numbers), 2):
        if not is_prime(int(numbers[index])):
            return False
    return True
<|Solution End|>
<|Test Begin|>
def test_solution_with_prime_odd_indices():
    assert solution([4, 3, 5, 5, 17, 11]) == True
    assert solution([4, 1, 5, 2, 17, 7]) == False
    assert solution([2, 2, 3]) == True

def test_solution_with_non_prime_odd_indices():
    assert solution([1, 4, 2, 9, 6, 8]) == False
    assert solution([12, 21, 14, 15, 16, 25]) == False

def test_solution_with_negative_and_zero():
    assert solution([0, -1, 4, -3, 8, -5]) == False
    assert solution([0, 0, 4, 0, 8, 0]) == False

def test_solution_with_empty_and_single_element_list():
    assert solution([]) == True # No odd index elements, which trivially satisfies the condition.
    assert solution([3]) == True # Single element with no odd index, still satisfies condition.

def test_solution_edge_cases():
    assert solution([7, 2]) == True
    assert solution([2, 4]) == False
    assert solution([7, 3, 5]) == True
<|Test End|>