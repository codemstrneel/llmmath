QUESTION

Write a Python function to reverse an array up to a given position, ensuring that the function can handle and correctly reverse arrays containing nested lists or other non-primitive data types.

SOL & TESTS

<|Solution Begin|>
```python
def reverse_array_up_to_position(arr, position):
    """
    Reverses the array up to the given position.
    
    Parameters:
    arr (list): The array to be reversed.
    position (int): The position up to which the array should be reversed.
    
    Returns:
    list: A new array with the elements reversed up to the given position.
    """
    if position < 0 or position > len(arr):
        raise ValueError("Position out of bounds")
    
    return arr[:position][::-1] + arr[position:]
```
<|Solution End|>
<|Test Begin|>
```python
from solution import reverse_array_up_to_position

def test_reverse_full_array():
    assert reverse_array_up_to_position([1, 2, 3, 4], 4) == [4, 3, 2, 1]

def test_reverse_partial_array():
    assert reverse_array_up_to_position([1, 2, 3, 4, 5], 3) == [3, 2, 1, 4, 5]

def test_reverse_up_to_zero():
    assert reverse_array_up_to_position([1, 2, 3, 4], 0) == [1, 2, 3, 4]

def test_nested_lists():
    assert reverse_array_up_to_position([[1, 2], [3, 4], [5, 6]], 2) == [[3, 4], [1, 2], [5, 6]]

def test_mixed_data_types():
    assert reverse_array_up_to_position([1, "two", 3.0, True], 3) == [3.0, "two", 1, True]

def test_position_out_of_bounds():
    try:
        reverse_array_up_to_position([1, 2, 3], 5)
    except ValueError as e:
        assert str(e) == "Position out of bounds"

def test_empty_array():
    assert reverse_array_up_to_position([], 0) == []
```
<|Test End|>