QUESTION

Create a Python function that analyzes a list and performs two tasks: 

1. Identify the smallest missing positive integer from the list.
2. Count the frequency of consecutive duplicate numbers in the list.

The function should return a tuple containing the result of these two tasks. The first element of the tuple should be the smallest missing number, and the second element should be a list of tuples, where each tuple contains a number and its consecutive frequency count in the list. Make sure to handle cases where the list might contain non-positive numbers or be empty.

SOL & TESTS

```python
def analyze_list(lst):
    """
    Analyzes the list and performs two tasks:
    1. Identifies the smallest missing positive integer.
    2. Counts the frequency of consecutive duplicate numbers in the list.

    Args:
    lst (list): A list of integers.

    Returns:
    tuple: A tuple where the first element is the smallest missing positive integer,
           and the second element is a list of tuples representing the number and its consecutive frequency count.
    """
    
    # Task 1: Identify the smallest missing positive integer
    positive_set = set(x for x in lst if x > 0)
    smallest_missing = 1
    while smallest_missing in positive_set:
        smallest_missing += 1

    # Task 2: Count the frequency of consecutive duplicate numbers
    if not lst:
        consecutive_count = []
    else:
        consecutive_count = []
        current, count = lst[0], 1
        for num in lst[1:]:
            if num == current:
                count += 1
            else:
                consecutive_count.append((current, count))
                current, count = num, 1
        consecutive_count.append((current, count))
    
    return (smallest_missing, consecutive_count)
```

<|Solution End|>

<|Test Begin|>
```python
from solution import analyze_list

def test_analyze_list_empty():
    assert analyze_list([]) == (1, [])

def test_analyze_list_no_positives():
    assert analyze_list([-3, -1, -2]) == (1, [(-3, 1), (-1, 1), (-2, 1)])

def test_analyze_list_one_element():
    assert analyze_list([4]) == (1, [(4, 1)])

def test_analyze_list_all_consecutive():
    assert analyze_list([7, 7, 7, 7]) == (1, [(7, 4)])

def test_analyze_list_mixed_consecutives():
    assert analyze_list([1, 1, 2, 3, 3, 3, 4, 5, 5, 1, 2]) == (6, [(1, 2), (2, 1), (3, 3), (4, 1), (5, 2), (1, 1), (2, 1)])

def test_analyze_list_no_missing():
    assert analyze_list([1, 2, 3, 4, 5]) == (6, [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])

def test_analyze_list_with_negatives():
    assert analyze_list([-1, -2, 2, 3, 4, -5, 3, 3]) == (1, [(-1, 1), (-2, 1), (2, 1), (3, 1), (4, 1), (-5, 1), (3, 2)])
```
<|Test End|>