QUESTION

Write a function to divide the elements of the given nested lists of integers.

SOL & TESTS

```python
def divide_nested_lists(nested_lists, divisor):
    """
    Divides each element in a list of nested lists by a given divisor.
    
    Args:
    nested_lists (list of lists of int): A list of lists containing integers.
    divisor (int): The divisor used to divide each element in the nested lists.
    
    Returns:
    list of lists of float: A new list of lists with each original element divided by the divisor.
    
    Raises:
    ValueError: If the divisor is zero.
    """
    if divisor == 0:
        raise ValueError("Divisor cannot be zero.")
    
    return [[x / divisor for x in sublist] for sublist in nested_lists]
```
<|Solution End|>
<|Test Begin|>
```python
from solution import divide_nested_lists

def test_divide_nested_lists_standard():
    assert divide_nested_lists([[2, 4], [6, 8]], 2) == [[1.0, 2.0], [3.0, 4.0]]

def test_divide_nested_lists_with_zero_divisor():
    try:
        divide_nested_lists([[1, 2], [3, 4]], 0)
    except ValueError as e:
        assert str(e) == "Divisor cannot be zero."

def test_divide_nested_lists_single_element_lists():
    assert divide_nested_lists([[10], [20]], 5) == [[2.0], [4.0]]

def test_divide_nested_lists_with_negative_numbers():
    assert divide_nested_lists([[-4, -8], [12, -16]], 2) == [[-2.0, -4.0], [6.0, -8.0]]

def test_divide_nested_lists_with_floats():
    assert divide_nested_lists([[5, 10], [20, 25]], 5) == [[1.0, 2.0], [4.0, 5.0]]

def test_divide_nested_lists_empty_input():
    assert divide_nested_lists([], 1) == []
    assert divide_nested_lists([[]], 1) == [[]]
```
<|Test End|>