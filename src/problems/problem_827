QUESTION

Write a function to determine if there is a pair in the array whose sum is equal to a given value. Additionally, ensure that the function can handle arrays containing negative numbers, and requires a solution with a time complexity of O(n log n) or lower.

SOL & TESTS

<|Solution Begin|>
```python
def has_pair_with_sum(arr, target_sum):
    """
    Determines if there is a pair of numbers in the array whose sum is equal to the given target sum.
    
    Uses a set to track the complements (target_sum - current_number) as we iterate over the elements,
    which allows us to achieve a time complexity of O(n).
    
    :param arr: List[int] - The array of integers.
    :param target_sum: int - The target sum we are looking for.
    :return: bool - Returns True if such a pair exists, otherwise False.
    """
    complements = set()
    
    for number in arr:
        if number in complements:
            return True
        complements.add(target_sum - number)
    
    return False
```
<|Solution End|>
<|Test Begin|>
```python
from solution import has_pair_with_sum

def test_pair_exists_positive_numbers():
    assert has_pair_with_sum([1, 2, 3, 4, 5], 9) == True

def test_pair_exists_negative_numbers():
    assert has_pair_with_sum([-1, -2, -3, -4, -5], -8) == True

def test_pair_exists_mixed_numbers():
    assert has_pair_with_sum([-1, 2, 4, -3, 6], 3) == True

def test_pair_does_not_exist():
    assert has_pair_with_sum([1, 2, 3, 4, 5], 10) == False

def test_pair_single_element():
    assert has_pair_with_sum([5], 5) == False

def test_pair_empty_list():
    assert has_pair_with_sum([], 5) == False

def test_pair_with_zero():
    assert has_pair_with_sum([0, 1, 2, 3], 3) == True

def test_pair_with_identical_elements():
    assert has_pair_with_sum([3, 3, 3, 3], 6) == True

def test_pair_sum_0_with_negatives():
    assert has_pair_with_sum([-1, 1, -2, 2], 0) == True
```
<|Test End|>