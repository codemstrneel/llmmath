QUESTION

Write a function to find the lateral surface area of a cone, and modify it to also calculate the total surface area of a cone, including the base. Additionally, integrate the function with a module that performs these calculations for a sequence of cones given as input, and return the results in an organized format.

SOLUTION/TESTS

<|Solution Begin|>
import math

def cone_surface_area(radius, height):
    """
    Calculate the lateral and total surface area of a cone.
    
    Parameters:
    radius (float): The radius of the base of the cone.
    height (float): The height of the cone.
    
    Returns:
    tuple: A tuple containing
      - lateral surface area (float)
      - total surface area (float, including base)
    """
    # Calculate slant height
    slant_height = math.sqrt(radius**2 + height**2)
    
    # Calculate lateral surface area
    lateral_area = math.pi * radius * slant_height
    
    # Calculate total surface area (including base)
    base_area = math.pi * radius**2
    total_area = lateral_area + base_area
    
    return lateral_area, total_area

def process_cones(cones_input):
    """
    Process a list of cones and return their surface areas.
    
    Parameters:
    cones_input (list of tuples): A list where each tuple contains
                                  (radius, height) for a cone.
    
    Returns:
    list of dicts: A list containing dictionaries with radius, height,
                   lateral surface area, and total surface area for each cone.
    """
    results = []
    for radius, height in cones_input:
        lateral_area, total_area = cone_surface_area(radius, height)
        results.append({
            "radius": radius,
            "height": height,
            "lateral_surface_area": lateral_area,
            "total_surface_area": total_area
        })
    return results
<|Solution End|>

<|Test Begin|>
def test_cone_surface_area():
    lateral, total = cone_surface_area(3, 4)
    assert round(lateral, 2) == 37.7  # 3 * sqrt(3^2 + 4^2) * pi
    assert round(total, 2) == 65.97  # lateral + 3^2 * pi

def test_process_cones():
    input_cones = [(3, 4), (6, 8), (2.5, 6)]
    results = process_cones(input_cones)
    
    assert len(results) == 3
    
    assert round(results[0]['lateral_surface_area'], 2) == 37.7
    assert round(results[0]['total_surface_area'], 2) == 65.97
    
    assert round(results[1]['lateral_surface_area'], 2) == 120.08
    assert round(results[1]['total_surface_area'], 2) == 226.19
    
    assert round(results[2]['lateral_surface_area'], 2) == 54.27
    assert round(results[2]['total_surface_area'], 2) == 73.63

def test_process_cones_zero():
    input_cones = [(0, 0)]
    results = process_cones(input_cones)
    
    assert round(results[0]['lateral_surface_area'], 2) == 0.0
    assert round(results[0]['total_surface_area'], 2) == 0.0

def test_cone_surface_area_zero():
    lateral, total = cone_surface_area(0, 0)
    assert round(lateral, 2) == 0.0
    assert round(total, 2) == 0.0
<|Test End|>