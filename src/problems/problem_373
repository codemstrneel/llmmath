QUESTION

Create a function to compute the cube of individual elements in a list using a lambda function. Ensure that the function can handle both positive and negative numbers, whether they are integers or floating-point numbers, and return the results as a list of integers.

SOL & TESTS

<|Solution Begin|>
```python
def cube_elements(nums):
    """
    Takes a list of numbers (both integers and floats) and returns a list of their cubes as integers.
    
    :param nums: List of numbers to be cubed.
    :return: List of the cubes of the provided numbers, rounded to the nearest integer.
    """
    return list(map(lambda x: round(x ** 3), nums))
```
<|Solution End|>

<|Test Begin|>
```python
from solution import cube_elements

def test_cube_elements_all_positive_integers():
    assert cube_elements([1, 2, 3]) == [1, 8, 27]

def test_cube_elements_all_negative_integers():
    assert cube_elements([-1, -2, -3]) == [-1, -8, -27]

def test_cube_elements_mixed_integers():
    assert cube_elements([-1, 0, 1]) == [-1, 0, 1]

def test_cube_elements_positive_floats():
    assert cube_elements([0.5, 1.5, 2.5]) == [0, 3, 16]

def test_cube_elements_negative_floats():
    assert cube_elements([-0.5, -1.5, -2.5]) == [0, -3, -16]

def test_cube_elements_mixed_floats():
    assert cube_elements([-1.1, 0.0, 2.2]) == [-1, 0, 11]

def test_cube_elements_empty_list():
    assert cube_elements([]) == []
  
def test_cube_elements_large_numbers():
    assert cube_elements([1000, 100, 10, -10, -100, -1000]) == [1000000000, 1000000, 1000, -1000, -1000000, -1000000000]
```
<|Test End|>