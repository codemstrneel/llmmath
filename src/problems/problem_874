QUESTION

**New Question:**

Write a Python function that takes a dictionary, where each key corresponds to a tuple consisting of three strings. Each string represents a type of triangle described by its three side lengths, separated by commas (e.g., "3,4,5" for a right triangle). The function should perform the following steps:

1. Convert each string in the tuple to a list of integers representing the side lengths of a triangle.
2. Determine the type of triangle each set of side lengths represents (e.g., equilateral, isosceles, or scalene).
3. Calculate the second smallest side length for each triangle.
4. Return a new dictionary where each original key maps to a tuple consisting of the type of triangle and the second smallest side length for each set of side lengths in the tuple.

This question combines the concepts of string-to-integer conversion, triangle type identification, and finding the second smallest number from your provided questions, wrapped in a dictionary context.

For example:

```python
def process_triangles(input_dict):
    # Your implementation here

# Example usage:
input_dict = {
    'triangle1': ("3,4,5", "5,5,5", "2,3,4"),
    'triangle2': ("7,10,5", "6,6,9", "8,15,17"),
}

result = process_triangles(input_dict)
print(result)  
# Expected output: {'triangle1': (('scalene', 4), ('equilateral', 5), ('scalene', 3)), 
#                  'triangle2': (('scalene', 7), ('isosceles', 6), ('scalene', 15))}
``` 

This problem encourages the handling of string manipulations, tuple and list operations, and multiple operations on numeric data derived from string data.

SOL & TESTS

```python
<|Solution Begin|>
def process_triangles(input_dict):
    def get_triangle_type(sides):
        a, b, c = sorted(sides)
        if a == b == c:
            return 'equilateral'
        elif a == b or b == c or a == c:
            return 'isosceles'
        else:
            return 'scalene'

    def second_smallest(sides):
        a, b, c = sorted(sides)
        return b

    result = {}
    for key, triangles in input_dict.items():
        processed_triangles = []
        for triangle in triangles:
            sides = list(map(int, triangle.split(',')))
            triangle_type = get_triangle_type(sides)
            second_min = second_smallest(sides)
            processed_triangles.append((triangle_type, second_min))
        result[key] = tuple(processed_triangles)

    return result
<|Solution End|>
```

```python
<|Test Begin|>
import pytest
from solution import process_triangles

def test_process_triangles_basic():
    input_dict = {
        'triangle1': ("3,4,5", "5,5,5", "2,3,4"),
        'triangle2': ("7,10,5", "6,6,9", "8,15,17"),
    }
    expected_output = {
        'triangle1': (('scalene', 4), ('equilateral', 5), ('scalene', 3)),
        'triangle2': (('scalene', 7), ('isosceles', 6), ('scalene', 15))
    }
    assert process_triangles(input_dict) == expected_output

def test_process_triangles_all_equilateral():
    input_dict = {
        'triangle1': ("5,5,5", "10,10,10", "50,50,50"),
    }
    expected_output = {
        'triangle1': (('equilateral', 5), ('equilateral', 10), ('equilateral', 50))
    }
    assert process_triangles(input_dict) == expected_output

def test_process_triangles_mixed():
    input_dict = {
        'triangle1': ("2,2,3", "4,4,3", "3,3,2"),
    }
    expected_output = {
        'triangle1': (('isosceles', 2), ('isosceles', 3), ('isosceles', 3))
    }
    assert process_triangles(input_dict) == expected_output

def test_process_triangles_all_scalene():
    input_dict = {
        'triangle1': ("2,3,4", "10,15,20", "7,8,9"),
    }
    expected_output = {
        'triangle1': (('scalene', 3), ('scalene', 15), ('scalene', 8))
    }
    assert process_triangles(input_dict) == expected_output

def test_process_triangles_empty():
    input_dict = {}
    expected_output = {}
    assert process_triangles(input_dict) == expected_output
<|Test End|>
```