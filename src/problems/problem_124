QUESTION

Write a function to check a decimal with a precision of 2, and verify that the number is within the range of -1,000,000 to 1,000,000.

SOL & TESTS

<|Solution Begin|>
```python
def check_decimal_in_range(number):
    """
    Check if the given number is a decimal with precision of 2 and within the range -1,000,000 to 1,000,000.
    
    Parameters:
    number (float): The number to check
    
    Returns:
    bool: True if the number is valid according to the conditions, False otherwise.
    """
    # Check for 2 decimal places
    if not (isinstance(number, float) and round(number, 2) == float(f"{number:.2f}")):
        return False
        
    # Check within range
    if number < -1_000_000 or number > 1_000_000:
        return False
    
    return True
```
<|Solution End|>
<|Test Begin|>
```python
from solution import check_decimal_in_range

def test_valid_numbers():
    assert check_decimal_in_range(999_999.99) == True
    assert check_decimal_in_range(0.01) == True
    assert check_decimal_in_range(-999_999.99) == True

def test_invalid_due_to_extra_precision():
    assert check_decimal_in_range(0.001) == False
    assert check_decimal_in_range(999_999.999) == False

def test_invalid_due_to_range():
    assert check_decimal_in_range(1_000_000.01) == False
    assert check_decimal_in_range(-1_000_000.01) == False

def test_invalid_non_float_input():
    assert check_decimal_in_range(100) == False
    assert check_decimal_in_range("100.00") == False

def test_valid_boundary_values():
    assert check_decimal_in_range(1_000_000.00) == True
    assert check_decimal_in_range(-1_000_000.00) == True
```
<|Test End|>