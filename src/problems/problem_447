QUESTION

Create a Python function that takes in two arguments: a list of strings and a list of numbers. The function should perform the following tasks:

1. Remove duplicate words from the list of strings, preserving the order of their first occurrences, while ignoring case sensitivity.
2. Count the frequency of numbers in the list of numbers where each consecutive occurrence of the same number is considered as one occurrence (e.g., [1, 1, 2, 2, 2, 3, 1, 1] would be [1, 2, 3, 1] in terms of frequency counting).
3. Return the results of both tasks only if the length of the processed list of strings is greater than the number of distinct numbers in the frequency count dictionary, otherwise, return a message indicating "Conditions not met".

The function should return either a tuple containing the processed list of strings and a dictionary representing the frequency count of the distinct consecutive numbers or the message indicating conditions were not met.

SOL & TESTS

```python
def process_data(strings, numbers):
    """
    Processes the list of strings and numbers according to the given tasks.
    
    :param strings: A list of strings
    :param numbers: A list of numbers
    :return: A tuple containing the processed list of strings and frequency dictionary or a message indicating conditions not met.
    """
    # Task 1: Remove duplicates from the list of strings ignoring case sensitivity
    seen = set()
    processed_strings = []
    
    for string in strings:
        lower_string = string.lower()
        if lower_string not in seen:
            seen.add(lower_string)
            processed_strings.append(string)
    
    # Task 2: Count the frequency of numbers considering consecutive occurrences as one
    if not numbers:
        number_freq_count = {}
    else:
        unique_numbers = [numbers[0]]
        
        for i in range(1, len(numbers)):
            if numbers[i] != numbers[i - 1]:
                unique_numbers.append(numbers[i])
        
        number_freq_count = {num: unique_numbers.count(num) for num in set(unique_numbers)}
    
    # Compare lengths
    if len(processed_strings) > len(number_freq_count):
        return (processed_strings, number_freq_count)
    else:
        return "Conditions not met"
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_data

def test_strings_remove_duplicates():
    result = process_data(['Apple', 'Banana', 'apple', 'Cherry', 'banana'], [])
    assert result == (['Apple', 'Banana', 'Cherry'], {}) # Ignore case, preserve first occurrences

def test_numbers_consecutive_frequency():
    result = process_data([], [1, 1, 2, 2, 2, 3, 3, 1])
    assert result == ([], {1: 2, 2: 1, 3: 1}) # [1, 2, 3, 1]

def test_both_valid_output():
    strings = ['Apple', 'Banana', 'apple', 'cherry', 'banana']
    numbers = [1, 1, 2, 3, 1, 1, 2, 2]
    result = process_data(strings, numbers)
    expected_strings = ['Apple', 'Banana', 'cherry']
    expected_numbers = {1: 2, 2: 1, 3: 1}
    assert result == (expected_strings, expected_numbers)

def test_conditions_not_met():
    strings = ['orange', 'ORANGE', 'pear']
    numbers = [4, 4, 5, 6, 6, 5]
    result = process_data(strings, numbers)
    assert result == "Conditions not met" # 1 string vs 3 unique numbers

def test_empty_strings_and_numbers():
    result = process_data([], [])
    assert result == "Conditions not met" # Zero lengths

def test_no_consecutive_duplicates():
    result = process_data(['Hi', 'Bye'], [10, 20, 30])
    assert result == (['Hi', 'Bye'], {10: 1, 20: 1, 30: 1}) # Each number appears once
```
<|Test End|>