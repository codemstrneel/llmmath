QUESTION

Write a function to remove multiple spaces in a string, replace each sequence of digits (0-9) with its corresponding word representation, and reverse the order of words in the string.

SOL & TESTS

Sure, let's solve this task with informative comments and test the solution using unit tests.

The solution involves:
1. Removing multiple spaces from the string.
2. Replacing digits with their corresponding word representation.
3. Reversing the order of the words in the string.

We'll use Python's regular expressions (`re` module) and basic string manipulation techniques to accomplish this.

<|Solution Begin|>
```python
import re

def replace_digits(text):
    """
    Replace each digit with its corresponding word representation.
    """
    digit_to_word = {
        '0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four',
        '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine'
    }
    return ''.join(digit_to_word.get(char, char) for char in text)

def process_string(s):
    """
    Processes the input string by removing multiple spaces, replacing digits with words,
    and reversing the order of words.
    """
    # Normalize spaces by splitting and joining
    s = " ".join(s.split())
    
    # Replace digits with their word equivalents
    s = replace_digits(s)
    
    # Reverse the order of words
    words = s.split()
    reversed_words = reversed(words)
    return ' '.join(reversed_words)
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_string

def test_remove_multiple_spaces():
    assert process_string("This  is   a    test") == "test a is This"

def test_replace_digits():
    assert process_string("Hello 123") == "onetwo three Hello"

def test_reverse_order():
    assert process_string("one two three") == "three two one"

def test_combined_operations():
    assert process_string(" 123   this is 4 test 456 ") == "four five six test is this onetwo three"

def test_empty_string():
    assert process_string("") == ""

def test_no_op_string():
    assert process_string("no digits here") == "here digits no"
```
<|Test End|>

These tests are designed to handle various cases, ensuring that the code correctly handles string manipulation as described in the problem statement.