QUESTION

Write a function that counts the occurrence of each character in a string, and ignores any character that's not a letter or digit.

SOL & TESTS

<|Solution Begin|> 
```python
from collections import defaultdict

def count_characters(s):
    """
    Counts the occurrence of each letter or digit character in the given string, 
    ignoring any character that is not a letter or digit.
    
    Parameters:
    s (str): The string to analyze.
    
    Returns:
    dict: A dictionary with characters as keys and their counts as values.
    """
    counts = defaultdict(int)
    for char in s:
        if char.isalnum():  # Check if the character is a letter or a digit
            counts[char] += 1
    return dict(counts)
```
<|Solution End|>

<|Test Begin|>
```python
import pytest
from solution import count_characters

def test_count_characters_all_letters():
    assert count_characters("abcabc") == {'a': 2, 'b': 2, 'c': 2}

def test_count_characters_letters_digits():
    assert count_characters("a1b2c3") == {'a': 1, '1': 1, 'b': 1, '2': 1, 'c': 1, '3': 1}

def test_count_characters_mixed_input():
    assert count_characters("a1! b2@ c3#") == {'a': 1, '1': 1, 'b': 1, '2': 1, 'c': 1, '3': 1}

def test_count_characters_with_special_characters():
    assert count_characters("#$%^&") == {}

def test_count_characters_empty():
    assert count_characters("") == {}

def test_count_characters_case_sensitivity():
    assert count_characters("aA") == {'a': 1, 'A': 1}

def test_count_characters_unicode():
    assert count_characters("åß∂ƒ©˙∆˚¬") == {'å': 1, 'ß': 1, '∂': 1, 'ƒ': 1, '©': 1, '˙': 1, '∆': 1, '˚': 1, '¬': 1}
```
<|Test End|>