QUESTION

**Question:**

Create a function that processes a list of mixed data types, containing strings and lists, in the following way:

1. **String Processing:**
   - Use regular expressions to filter out strings that contain exactly three vowels and end with a digit (e.g., "example8" or "oceania3").
   - For each filtered string, convert it from kebab-case to camelCase.

2. **List Processing:**
   - From the list of lists, consider only those containing numeric values. Calculate the total product of these numeric values. Ignore any non-numeric elements within lists for this product.

3. **Return Result:**
   - Return a dictionary with two keys:
     - `"processed_strings"`: List of strings converted to camelCase as described.
     - `"total_product"`: The total product of numeric values from all valid lists.

This modified question assesses skills in regex, string manipulation, data structure processing, and mathematical operations on filtered data.

SOL & TESTS

<|Solution Begin|>```python
import re
from typing import List, Any, Dict

def process_data(items: List[Any]) -> Dict[str, Any]:
    def camel_case(s: str) -> str:
        parts = s.split('-')
        return parts[0] + ''.join(word.capitalize() for word in parts[1:])
    
    def is_valid_string(s: str) -> bool:
        return bool(re.search(r'^[a-zA-Z]*(?:[aeiouAEIOU][a-zA-Z]*){3}[a-zA-Z]*\d$', s))
    
    processed_strings = [
        camel_case(item) for item in items 
        if isinstance(item, str) and is_valid_string(item)
    ]
    
    total_product = 1
    had_numeric = False
    for item in items:
        if isinstance(item, list):
            product = 1
            has_num = False
            for sub_item in item:
                if isinstance(sub_item, (int, float)): 
                    product *= sub_item
                    has_num = True
            if has_num:
                total_product *= product
                had_numeric = True

    return {
        "processed_strings": processed_strings,
        "total_product": total_product if had_numeric else None
    }
``` 
<|Solution End|>

<|Test Begin|>```python
from solution import process_data

def test_mixed_data():
    data = [
        "example8", "ocean3", "oceania3", "nice-day4",
        ["not", "a", "list"], [3, 4, 5], [1], ["string"],
        [1, "two", 3.0]
    ]
    result = process_data(data)
    assert result["processed_strings"] == ["oceania3", "niceDay4"]
    assert result["total_product"] == 180  # (3 * 4 * 5) * (1) * (1 * 3)

def test_no_valid_strings():
    data = [1, 2, 3, "something", "no3cased"]
    result = process_data(data)
    assert result["processed_strings"] == []
    assert result["total_product"] == None  # No lists with numeric values

def test_no_lists():
    data = ["string1", "three-vowels9"]
    result = process_data(data)
    assert result["processed_strings"] == ["threeVowels9"]
    assert result["total_product"] == None

def test_varied_lists():
    data = [
        "alpha3", [1, 2, 'three'], [4, 5],
        "kebab-case3", "three-vowels9", ["no", "numbers", "here"],
        [3.5, -2]
    ]
    result = process_data(data)
    assert result["processed_strings"] == ["kebabCase3", "threeVowels9"]
    assert result["total_product"] == 70  # (1 * 2) * (4 * 5) * (3.5 * -2)

def test_empty_data():
    data = []
    result = process_data(data)
    assert result["processed_strings"] == []
    assert result["total_product"] == None

def test_all_strings():
    data = ["string1", "three-vowels9", "final-digit5"]
    result = process_data(data)
    assert result["processed_strings"] == ["threeVowels9", "finalDigit5"]
    assert result["total_product"] == None

def test_all_lists_with_numbers():
    data = [[1, 2], [3, 4], [5]]
    result = process_data(data)
    assert result["processed_strings"] == []
    assert result["total_product"] == 120  # (1*2) * (3*4) * (5)

def test_all_lists_no_numbers():
    data = [["a", "b"], ["cde"], ["fghi"]]
    result = process_data(data)
    assert result["processed_strings"] == []
    assert result["total_product"] == None

``` 
<|Test End|>