QUESTION

Write a function that rotates a single list by a specified number of items to the right, then checks if there are any elements that appear more than once in the rotated list, and if so, returns the sum of those repeated elements. If no repeated elements exist, return 0.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst, k):
    """
    Rotates list lst to the right by k positions and returns the sum of repeated elements.
    If no elements are repeated, returns 0.
    """
    if not lst:
        return 0

    # Rotate list to the right by k positions
    k = k % len(lst)
    rotated_lst = lst[-k:] + lst[:-k]

    # Count elements and identify repeated ones
    from collections import Counter
    element_count = Counter(rotated_lst)
    repeated_elements_sum = sum(value for value, count in element_count.items() if count > 1)

    return repeated_elements_sum

<|Solution End|>
<|Test Begin|>
def test_solution_no_repeats():
    assert solution([1, 2, 3, 4, 5], 2) == 0

def test_solution_with_repeats():
    assert solution([1, 2, 2, 3, 4], 2) == 2

def test_solution_all_repeats():
    assert solution([2, 2, 2, 2], 1) == 2

def test_solution_single_element():
    assert solution([1], 3) == 0

def test_solution_empty_list():
    assert solution([], 5) == 0

def test_solution_large_k():
    assert solution([1, 2, 3, 1], 10) == 1

def test_solution_multiple_repeats():
    assert solution([4, 3, 2, 3, 4, 4, 5], 3) == 8  # 4 is repeated 3 times

def test_solution_no_rotation_needed():
    assert solution([10, 20, 10], 0) == 10

<|Test End|>