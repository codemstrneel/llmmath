QUESTION

Write a Python function to right rotate the digits of a given non-negative integer by a specified number of places.

SOLUTION/TESTS

<|Solution Begin|>
def solution(num, rotations):
    """
    Right rotates the digits of the given non-negative integer by a specified number of places.

    Parameters:
    num (int): The non-negative integer to rotate.
    rotations (int): The number of places to rotate.

    Returns:
    int: The resulting integer after the rotation.
    """
    num_str = str(num)
    n = len(num_str)
    # Calculate effective rotations by modding with length of num_str
    rotations = rotations % n
    
    # Perform the rotation
    rotated_str = num_str[-rotations:] + num_str[:-rotations]
    return int(rotated_str)
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_single_digit_number():
    assert solution(5, 1) == 5

def test_no_rotation():
    assert solution(12345, 0) == 12345

def test_full_rotation():
    assert solution(12345, 5) == 12345

def test_less_than_length_rotation():
    assert solution(12345, 2) == 45123

def test_more_than_length_rotation():
    assert solution(12345, 12) == 45123

def test_rotation_equals_length():
    assert solution(12345, 10) == 12345

def test_large_number_of_rotations():
    assert solution(987654321, 1000000000) == 198765432

def test_all_same_digits():
    assert solution(1111, 3) == 1111

def test_zero_number():
    assert solution(0, 5) == 0
<|Test End|>