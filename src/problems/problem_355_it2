QUESTION

Write a Python function that takes a list of integers and checks if replacing the first digit of each number with the first digit of its factorial results in a strictly increasing sequence. Additionally, ensure that the check is performed in O(n log n) time complexity and incorporate error handling for negative numbers, which should throw an exception. Use recursion to calculate factorials and the `map` function to apply the transformation to each number in the list.

SOLUTION/TESTS

The compilation error is due to improperly formatted python code blocks. Let's correct that by ensuring proper formatting and retesting.

<|Solution Begin|>
```python
def solution(lst):
    def factorial(n):
        if n < 0:
            raise ValueError("Factorial is not defined for negative numbers.")
        elif n == 0 or n == 1:
            return 1
        else:
            return n * factorial(n - 1)

    def first_digit(num):
        while num >= 10:
            num //= 10
        return num

    def transformed_number(num):
        if num < 0:
            raise ValueError("Negative number encountered in the list.")

        fact = factorial(num)
        first_fact_digit = first_digit(fact)
        
        str_num = str(num)
        new_num_str = str(first_fact_digit) + str_num[1:]  # Replace first digit
        return int(new_num_str)

    transformed_list = list(map(transformed_number, lst))
    
    return all(x < y for x, y in zip(transformed_list, transformed_list[1:]))
```
<|Solution End|>

<|Test Begin|>
```python
import pytest

def test_solution_all_positive():
    assert solution([1, 2, 3]) is True

def test_solution_single_element():
    assert solution([5]) is True

def test_solution_non_increasing():
    assert solution([3, 2, 1]) is False

def test_solution_with_zero():
    assert solution([0, 1, 2]) is True

def test_solution_large_numbers_non_increasing():
    assert solution([10, 20, 30]) is False

def test_solution_large_numbers_increasing():
    assert solution([1, 5, 10]) is True

def test_solution_negative_number_exception():
    with pytest.raises(ValueError, match="Negative number encountered in the list."):
        solution([-1, 3, 4])

def test_solution_complex_case():
    assert solution([9, 2, 6]) is False
```
<|Test End|>

This correction ensures that the code blocks are formatted properly for execution, addressing the previous syntax error. The test suite includes a comprehensive set of scenarios to validate the function's behavior.