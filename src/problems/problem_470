QUESTION

Write a Python function to find the sum of all even natural numbers within the range \( l \) and \( r \), where \( l \) and \( r \) are provided as strings and may contain non-digit characters or spaces. Your function should only consider valid numeric parts of the strings as the range endpoints.

SOL & TESTS

<|Solution Begin|>
```python
def sum_even_in_range(l_str, r_str):
    """
    Finds the sum of all even natural numbers within the range (inclusive)
    determined by parsing the numeric parts of input strings `l_str` and `r_str`.

    Args:
    l_str: String containing non-digit characters or spaces, representing the lower bound.
    r_str: String containing non-digit characters or spaces, representing the upper bound.

    Returns:
    int: Sum of all even natural numbers in the range [l, r].
    """
    # Helper function to extract integer from string
    def parse_number_from_string(s):
        num_str = ''.join(filter(str.isdigit, s))
        return int(num_str) if num_str else 0

    # Parse numbers
    l = parse_number_from_string(l_str)
    r = parse_number_from_string(r_str)

    # Ensure l <= r
    if l > r:
        l, r = r, l

    # Sum the even numbers in the range [l, r]
    # Adjust l to the next even number if it's odd
    if l % 2 != 0:
        l += 1

    # Adjust r to the previous even number if it's odd
    if r % 2 != 0:
        r -= 1

    # Calculate the sum of even numbers in the range
    n = (r - l) // 2 + 1
    even_sum = n * (l + r) // 2
    
    return even_sum
```
<|Solution End|>
<|Test Begin|>
```python
from solution import sum_even_in_range

def test_single_digit_bounds():
    assert sum_even_in_range("3", "8") == 18
    assert sum_even_in_range("5", "5") == 0
    assert sum_even_in_range("5", "6") == 6

def test_large_numbers_with_chars():
    assert sum_even_in_range("a123b", "4x56y") == 6428
    assert sum_even_in_range("@99@", "99!@") == 4900

def test_reverse_order_bounds():
    assert sum_even_in_range("12", "3") == 14

def test_with_spaces():
    assert sum_even_in_range(" 135 ", "2") == 2
    assert sum_even_in_range(" 61 ", " 84 ") == 936

def test_non_digit_characters():
    assert sum_even_in_range("l1p", "r10t") == 30
    assert sum_even_in_range("abc", "xyz") == 0

def test_empty_strings():
    assert sum_even_in_range("", "") == 0

def test_only_even_numbers():
    assert sum_even_in_range("4", "10") == 28
    assert sum_even_in_range("6", "6") == 6

def test_various_characters():
    assert sum_even_in_range("l 1", "!2") == 2
    assert sum_even_in_range("5$", "%7") == 6
```
<|Test End|>