QUESTION

Write a Python function that takes a string representing time in 24-hour format (HH:MM) and returns a new string where non-zero elements of the hours are shifted one position to the right and then converted to 12-hour format with AM/PM designation.

SOLUTION/TESTS

<|Solution Begin|>
def solution(time_str):
    """
    Converts a 24-hour formatted time string to a 12-hour format with a shifted hour digit.
    """
    # Split the time into hours and minutes
    hours, minutes = map(int, time_str.split(':'))

    # Shift the hour digit if hours are non-zero and have more than one digit
    if hours > 9:
        hours_str = str(hours)
        shifted_hours_str = hours_str[-1] + hours_str[:-1]
        shifted_hours = int(shifted_hours_str)
    else:
        shifted_hours = hours

    # Convert to 12-hour format
    if shifted_hours == 0:
        period = "AM"
        converted_hours = 12
    elif 1 <= shifted_hours < 12:
        period = "AM"
        converted_hours = shifted_hours
    elif shifted_hours == 12:
        period = "PM"
        converted_hours = 12
    else:
        period = "PM"
        converted_hours = shifted_hours - 12

    # Format the new time string
    new_time_str = f"{converted_hours}:{minutes:02d} {period}"

    return new_time_str
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_midnight():
    assert solution("00:00") == "12:00 AM"

def test_noon():
    assert solution("12:00") == "6:00 PM"

def test_afternoon():
    assert solution("14:30") == "4:30 PM"

def test_single_digit_hours_AM():
    assert solution("09:05") == "9:05 AM"

def test_single_digit_hours_PM():
    assert solution("21:45") == "9:45 PM"

def test_morning_early_hours():
    assert solution("05:22") == "5:22 AM"

def test_evening_late_hours():
    assert solution("23:59") == "3:59 PM"

def test_involving_zero_minutes():
    assert solution("10:00") == "10:00 AM"
<|Test End|>