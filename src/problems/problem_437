QUESTION

Certainly! Taking elements from your existing questions, here's a novel question that combines key concepts such as tuple manipulation, string transformation, and numerical analysis:

**New Combined Question:**

You are tasked with designing a Python function that processes both string and numerical data in an integrated manner. Here are the detailed tasks your function should perform:

1. **Tuple Transformation & Filtering:**
   - Accept a list of tuples where each tuple consists of strings and integers.
   - Create a new list of tuples by:
     - Removing tuples containing any non-positive integers or empty strings.
     - Within each string element of the remaining tuples, remove any duplicate characters (e.g., "aabb" becomes "ab").

2. **String Analysis & Modification:**
   - Given an additional input string, replace sequences of any digits with a placeholder "###" using regular expressions.
   - Check if this modified string ends with a domain that is a valid email format (i.e., it ends with something like "@example.com").

3. **Number Manipulation and Analysis:**
   - Extract all numerical elements from the initial list of tuples and compute their sum after rounding each number up to the nearest integer.
   - Identify sequences of consecutive numbers in this collection of numbers, where each number in a sequence is exactly one more than the previous, and note the length of each such sequence.
   - Create a dictionary that logs the difference between each pair of consecutive numbers within these sequences.

The function should return a tuple with four elements:

- The list of transformed tuples after filtering.
- The string after digit sequences have been replaced.
- A boolean indicating whether this string ends with a valid email address format.
- A dictionary with two keys: `"rounded_sum"` containing the sum of rounded numbers, and `"consecutive_differences"` mapping each sequence start to the differences between subsequent numbers in that sequence.

**Function Signature:**

```python
def process_mixed_data(tuple_list, input_string):
    # Your implementation here
    pass
```

This question combines aspects of tuple and string manipulation, regular expression application, numerical computations, and sequence recognition in an integrated setting, drawing on themes from your original list of questions.

SOL & TESTS

<|Solution Begin|>
```python
import re
import math

def process_mixed_data(tuple_list, input_string):
    # Step 1: Tuple Transformation & Filtering
    transformed_tuples = []
    all_numbers = []
    for tpl in tuple_list:
        has_non_positive = any(isinstance(x, int) and x <= 0 for x in tpl)
        has_empty_string = any(isinstance(x, str) and x == '' for x in tpl)
        
        if not has_non_positive and not has_empty_string:
            transformed_tuple = tuple(
                ''.join(sorted(set(x), key=x.index)) if isinstance(x, str) else x
                for x in tpl
            )
            transformed_tuples.append(transformed_tuple)
            all_numbers.extend(x for x in tpl if isinstance(x, int))
    
    # Step 2: String Analysis & Modification
    modified_string = re.sub(r'\d+', '###', input_string)
    is_valid_email_format = bool(re.search(r'@[\w.-]+', modified_string))
    
    # Step 3: Number Manipulation and Analysis
    rounded_sum = sum(math.ceil(x) for x in all_numbers)
    
    # Finding consecutive sequences and creating a dictionary
    all_numbers.sort()
    consecutive_differences = {}
    n = len(all_numbers)
    i = 0
    
    while i < n:
        start = all_numbers[i]
        consecutive = [start]
        while i + 1 < n and all_numbers[i + 1] == all_numbers[i] + 1:
            consecutive.append(all_numbers[i + 1])
            i += 1
        if len(consecutive) > 1:
            differences = [consecutive[j + 1] - consecutive[j] for j in range(len(consecutive) - 1)]
            consecutive_differences[start] = differences
        i += 1

    result = (
        transformed_tuples,
        modified_string,
        is_valid_email_format,
        {'rounded_sum': rounded_sum, 'consecutive_differences': consecutive_differences}
    )
    
    return result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_mixed_data

def test_basic_functionality():
    tuples = [
        ('hello', 1, 2),
        ('world', -1, 3),
        ('foo', 4, 5),
        ('', 6, 7),
        ('bar', 8, 10),
        ('baz', 13, 14)
    ]
    input_str = "Email me at john22doe@example.com or at jane.doe123@example.org"
    
    result = process_mixed_data(tuples, input_str)
    expected_transformed_tuples = [
        ('helo', 1, 2),
        ('fo', 4, 5),
        ('bar', 8, 10),
        ('baz', 13, 14)
    ]
    expected_modified_string = "Email me at john###doe@example.com or at jane.doe###@example.org"
    expected_is_valid_email_format = True
    expected_rounded_sum = 57
    expected_consecutive_differences = {
        1: [1],
        4: [1],
        8: [1],
        13: [1]
    }
    
    assert result[0] == expected_transformed_tuples
    assert result[1] == expected_modified_string
    assert result[2] == expected_is_valid_email_format
    assert result[3]['rounded_sum'] == expected_rounded_sum
    assert result[3]['consecutive_differences'] == expected_consecutive_differences

def test_edge_cases():
    tuples = [
        ('', 0, -1),
        ('nonempty', 0),
        ('', '')
    ]
    input_str = "Contact us at unknown@place.x"
    
    result = process_mixed_data(tuples, input_str)
    expected_transformed_tuples = []
    expected_modified_string = "Contact us at unknown@place.x"
    expected_is_valid_email_format = True
    expected_rounded_sum = 0
    expected_consecutive_differences = {}
    
    assert result[0] == expected_transformed_tuples
    assert result[1] == expected_modified_string
    assert result[2] == expected_is_valid_email_format
    assert result[3]['rounded_sum'] == expected_rounded_sum
    assert result[3]['consecutive_differences'] == expected_consecutive_differences

def test_no_consecutive_sequences():
    tuples = [
        ('a', 2),
        ('b', 4),
        ('c', 6)
    ]
    input_str = "numbers here: 5678"
    
    result = process_mixed_data(tuples, input_str)
    expected_transformed_tuples = [
        ('a', 2),
        ('b', 4),
        ('c', 6)
    ]
    expected_modified_string = "numbers here: ###"
    expected_is_valid_email_format = False
    expected_rounded_sum = 12
    expected_consecutive_differences = {}
    
    assert result[0] == expected_transformed_tuples
    assert result[1] == expected_modified_string
    assert result[2] == expected_is_valid_email_format
    assert result[3]['rounded_sum'] == expected_rounded_sum
    assert result[3]['consecutive_differences'] == expected_consecutive_differences
```
<|Test End|>