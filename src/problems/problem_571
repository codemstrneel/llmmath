QUESTION

Write a Python function that performs the following tasks:

1. Accepts two lists:
   - The first list contains pairs of integers representing the bases and heights of several trapeziums.
   - The second list contains a list of integers where each integer represents an upper limit `n`.

2. For each pair of base and height in the first list:
   - Calculate the area of the trapezium using the formula for a trapezoid: \((\text{Base1} + \text{Base2}) \times \text{Height} / 2\).
   - Check if this area is an odd number and, if so, find all prime numbers between 1 and the first integer of the current pair (Base1) from the second list using a map function along with a lambda to filter primes.

3. Return:
   - A list of areas for each trapezium.
   - A nested list, where each sublist contains the prime numbers found for each trapezium that had an odd area.

Ensure the function handles edge cases, such as lists of different lengths or empty lists, appropriately.

SOL & TESTS

```python
<|Solution Begin|>
from typing import List, Tuple
import math

def is_prime(num: int) -> bool:
    """Check if the number is prime."""
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i ** 2 <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

def calculate_trapezium_properties(pairs: List[Tuple[int, int]], bases: List[int]) -> Tuple[List[float], List[List[int]]]:
    if len(pairs) != len(bases):
        raise ValueError("The number of pairs must be equal to the number of bases")
    
    areas = []
    prime_lists = []

    for (base1, height), limit in zip(pairs, bases):
        # Calculate area
        area = (base1 + height) * height / 2
        areas.append(area)
        
        # If the area is an odd number, find all primes between 1 and limit
        if int(area) % 2 == 1:
            primes = list(filter(lambda x: is_prime(x), range(1, limit + 1)))
            prime_lists.append(primes)
        else:
            prime_lists.append([])

    return areas, prime_lists
<|Solution End|>
<|Test Begin|>
```python
import pytest
from solution import calculate_trapezium_properties

def test_basic():
    pairs = [(3, 4), (5, 5)]
    bases = [5, 10]
    areas, primes = calculate_trapezium_properties(pairs, bases)
    assert areas == [14.0, 25.0]
    assert primes == [[], [2, 3, 5, 7]]

def test_empty_lists():
    pairs = []
    bases = []
    areas, primes = calculate_trapezium_properties(pairs, bases)
    assert areas == []
    assert primes == []

def test_different_lengths_raises_error():
    pairs = [(3, 4)]
    bases = [5, 10]
    with pytest.raises(ValueError):
        calculate_trapezium_properties(pairs, bases)

def test_no_prime_scenario():
    pairs = [(2, 2), (6, 8)]
    bases = [5, 2]
    areas, primes = calculate_trapezium_properties(pairs, bases)
    assert areas == [4.0, 56.0]
    assert primes == [[], []]

def test_single_trapezium():
    pairs = [(10, 5)]
    bases = [7]
    areas, primes = calculate_trapezium_properties(pairs, bases)
    assert areas == [37.5]
    assert primes == [list(range(1, 8))]

def test_large_numbers():
    pairs = [(1000, 500), (2, 2)]
    bases = [50, 20]
    areas, primes = calculate_trapezium_properties(pairs, bases)
    assert areas == [750000.0, 4.0]
    assert primes == [[], []]

def test_odd_area_no_base_primes():
    pairs = [(1, 1)]
    bases = [1]
    areas, primes = calculate_trapezium_properties(pairs, bases)
    assert areas == [1.0]
    assert primes == []
```
<|Test End|>