QUESTION

Write a Python function that first checks if a given array represents a min heap. If it does, compute the xor of each unique pair of elements in the array and convert this xor result to a formatted string in a 12-hour AM/PM format. Return a list of these formatted strings. If the array does not represent a min heap, return an empty list.

SOLUTION/TESTS

<|Solution Begin|>
def solution(arr):
    def is_min_heap(array):
        n = len(array)
        for i in range(n // 2):
            left = 2 * i + 1  # left child index
            right = 2 * i + 2  # right child index
            if left < n and array[i] > array[left]:
                return False
            if right < n and array[i] > array[right]:
                return False
        return True

    def xor_to_time_string(xor_value):
        hours = xor_value % 24
        minute = 0  # assumed as 0 since only hour is considered from xor
        if hours == 0:
            return '12:00 AM'
        elif hours < 12:
            return f'{hours}:00 AM'
        elif hours == 12:
            return '12:00 PM'
        else:
            return f'{hours - 12}:00 PM'
    
    if not is_min_heap(arr):
        return []

    n = len(arr)
    results = set()  # to store unique XOR results
    for i in range(n):
        for j in range(i + 1, n):
            xor_value = arr[i] ^ arr[j]
            results.add(xor_to_time_string(xor_value))
    
    return sorted(results)

<|Solution End|>
<|Test Begin|>
from solution import solution

def test_valid_min_heap():
    assert solution([1, 3, 5]) == ['12:00 PM', '4:00 AM']

def test_invalid_min_heap():
    assert solution([1, 3, 2]) == []

def test_single_element():
    assert solution([1]) == []

def test_two_element_min_heap():
    assert solution([1, 10]) == ['11:00 PM']

def test_larger_min_heap():
    assert solution([1, 3, 6, 5, 9, 8]) == ['12:00 PM', '1:00 AM', '11:00 AM', '4:00 AM', '5:00 AM']

def test_no_elements():
    assert solution([]) == []

def test_identical_elements_min_heap():
    assert solution([2, 2, 2]) == []

<|Test End|>