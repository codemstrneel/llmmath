QUESTION

Write a Python function that takes a list of integers and a character string as inputs. The function should return a single integer formed by concatenating the string representations of the integers from the list, such that the resulting integer contains the maximum number of occurrences of a given character from the input string.

SOLUTION/TESTS

To solve this problem, we can break down the task as follows:

1. Convert each integer in the list to its string representation.
2. Concatenate these string representations to form a single string.
3. Count the occurrences of each character from the input string.
4. Determine which character has the maximum number of occurrences in the concatenated string.
5. Return the total count of the most frequent character as the result.

Let's proceed to implement this logic in the Python function `solution`.

```python
<|Solution Begin|>
def solution(int_list, char_string):
    """
    Given a list of integers and a string, concatenate the string representations
    of the integers and return the maximum number of occurrences of any character
    from the string in this concatenated string.
    """
    # Step 1 and 2: Concatenate the string representations of the integers
    concatenated_number_str = ''.join(map(str, int_list))
    
    # Step 3 & 4: Count character occurrences and find the maximum occurrence
    max_occurrences = 0
    for char in char_string:
        count = concatenated_number_str.count(char)
        if count > max_occurrences:
            max_occurrences = count
    
    # Step 5: Return the maximum occurrence found
    return max_occurrences
<|Solution End|>
```

Next, we will write unit tests to verify the correctness of the function using pytest style.

```python
<|Test Begin|>
from solution import solution

def test_example_1():
    assert solution([123, 456, 789], "13579") == 3

def test_example_2():
    assert solution([111, 222, 333], "123456") == 3

def test_example_3():
    assert solution([982, 287, 666], "287") == 2

def test_example_4():
    assert solution([], "123") == 0

def test_example_5():
    assert solution([1, 2, 3, 4, 5], "678") == 0

def test_example_6():
    assert solution([999, 111, 333], "9") == 3

def test_example_7():
    assert solution([102, 305, 506], "01234567") == 2

<|Test End|>
```

These tests cover various cases, including different lengths of input and different numbers and characters. They help ensure the `solution` function is robust and handles different scenarios effectively.