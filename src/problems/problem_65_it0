QUESTION

New Question: Write a function that takes a Pascal case string representation of a sequence of dates in "YYYYMMDD" format, converts each date to "DD-MM-YYYY" format and changes the string to kebab case. Return a list of these formatted dates.

SOLUTION/TESTS

<|Solution Begin|>
def solution(pascal_case_dates):
    """
    Converts a Pascal case string of dates in "YYYYMMDD" format to a list of dates in "DD-MM-YYYY" format in kebab case.

    Args:
    pascal_case_dates (str): A Pascal case string where each part is a date in "YYYYMMDD" format.

    Returns:
    list: A list of dates formatted as "DD-MM-YYYY" in kebab case.
    """
    import re
    
    # Regular expression pattern to match YYYYMMDD format
    pattern = r'(\d{4})(\d{2})(\d{2})'
    
    # Use a list to hold formatted dates
    formatted_dates = []

    # Initialize start position for searching
    start = 0
    while start < len(pascal_case_dates):
        # Search for the YYYYMMDD pattern starting from position 'start'
        match = re.search(pattern, pascal_case_dates[start:])
        
        if match:
            # Grab the matched string parts
            yyyy, mm, dd = match.groups()
            # Format as DD-MM-YYYY
            formatted_date = f"{dd}-{mm}-{yyyy}"
            formatted_dates.append(formatted_date)
            # Move start past this match for next iteration
            start += match.end()
        else:
            # If no match is found, break the loop
            break
    
    # Change dates list to kebab-case format by joining with hyphens
    return '-'.join(formatted_dates)
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_single_date():
    assert solution("20230101") == "01-01-2023"

def test_multiple_dates():
    assert solution("2023010120230203") == "01-01-2023-03-02-2023"

def test_intermediate_mismatch():
    assert solution("202301XY20230203") == "01-03-2023"

def test_large_dataset():
    data = "20230101" * 100  # Repeating the same date
    expected = "-".join(["01-01-2023"] * 100)  # Repeating the same formatted date
    assert solution(data) == expected

def test_non_date_at_end():
    assert solution("2023010120220216END") == "01-01-2023-16-02-2022"

def test_no_dates():
    assert solution("HELLO") == ""
<|Test End|>