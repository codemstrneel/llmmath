QUESTION

Write a function to merge multiple dictionaries, where some of the dictionaries may have nested dictionaries as values, into a single dictionary. If a key exists in multiple dictionaries, and the associated values are both dictionaries, merge them recursively. If the values are not both dictionaries, use the value from the last dictionary containing the key.

SOL & TESTS

```python
<|Solution Begin|>
def merge_dicts(*dicts):
    """
    Merges multiple dictionaries into a single dictionary.
    
    If a key exists in multiple dictionaries and the corresponding values 
    are both dictionaries, they are merged recursively. If the values are 
    not both dictionaries, the value from the last dictionary is used.
    
    :param *dicts: A variable number of dictionary arguments.
    :return: A single merged dictionary.
    """
    
    def merge_helper(d1, d2):
        merged = d1.copy()
        for k, v in d2.items():
            if k in merged and isinstance(merged[k], dict) and isinstance(v, dict):
                merged[k] = merge_helper(merged[k], v)
            else:
                merged[k] = v
        return merged
    
    result = {}
    for d in dicts:
        result = merge_helper(result, d)
    
    return result
<|Solution End|>
```

```python
<|Test Begin|>
from solution import merge_dicts

def test_empty_dictionaries():
    assert merge_dicts({}, {}) == {}

def test_non_nested_no_conflicts():
    dict1 = {'a': 1, 'b': 2}
    dict2 = {'c': 3, 'd': 4}
    expected = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
    assert merge_dicts(dict1, dict2) == expected

def test_non_nested_conflicts():
    dict1 = {'a': 1, 'b': 2}
    dict2 = {'b': 3, 'c': 4}
    expected = {'a': 1, 'b': 3, 'c': 4}
    assert merge_dicts(dict1, dict2) == expected

def test_nested_dictionaries():
    dict1 = {'a': {'x': 1}, 'b': 2}
    dict2 = {'a': {'y': 2}, 'c': 3}
    expected = {'a': {'x': 1, 'y': 2}, 'b': 2, 'c': 3}
    assert merge_dicts(dict1, dict2) == expected

def test_nested_conflict_overwrites():
    dict1 = {'a': {'x': 1}, 'b': 2}
    dict2 = {'a': 3}
    expected = {'a': 3, 'b': 2}
    assert merge_dicts(dict1, dict2) == expected

def test_multiple_dictionaries():
    dict1 = {'a': 1}
    dict2 = {'b': 2}
    dict3 = {'a': {'x': 3}, 'b': {'y': 4}}
    dict4 = {'a': {'z': 5}, 'b': 6}
    expected = {'a': {'x': 3, 'z': 5}, 'b': 6}
    assert merge_dicts(dict1, dict2, dict3, dict4) == expected
    
def test_nested_and_non_nested_conflict():
    dict1 = {'a': {'x': 1}}
    dict2 = {'a': 2}
    expected = {'a': 2}
    assert merge_dicts(dict1, dict2) == expected
<|Test End|>
```