QUESTION

Create a Python function that takes a sentence (string) and a dictionary with integer values as input. The function should perform the following tasks:

1. **String Processing:** In the given sentence, identify all words that contain at least two consecutive vowels (aeiou, case insensitive). Replace any such word with its reverse. Return the modified sentence as a string.

2. **Mathematical Dictionary Calculation:** Calculate the sum of all integer values in the dictionary. Then divide this sum by the number of words in the modified sentence that contain exactly three letters.

3. The function should return a tuple containing:
   - The sentence with the specified words reversed.
   - The calculated result after dividing the sum of dictionary values by the number of three-letter words.

*Additional considerations:*
- Treat sequences of words split by spaces as individual words.
- Handle cases where the dictionary is empty by considering the sum as 0.
- Consider only complete words, avoid counting any separated punctuation as part of the word length.

SOL & TESTS

```python
def process_sentence_and_calculate(sentence, values_dict):
    import re

    # Helper function to check if a word contains at least two consecutive vowels
    def contains_consecutive_vowels(word):
        return re.search(r'[aeiouAEIOU]{2}', word) is not None
    
    # Reverse the words that have at least two consecutive vowels
    words = sentence.split()
    modified_words = [
        word[::-1] if contains_consecutive_vowels(word) else word for word in words
    ]
    
    # Join the modified words into a sentence
    modified_sentence = ' '.join(modified_words)
    
    # Calculate the sum of values in the dictionary
    total_value = sum(values_dict.values())
    
    # Find the number of words with exactly three letters in the modified sentence
    three_letter_word_count = sum(1 for word in modified_words if len(word) == 3)
    
    # Return the tuple with the modified sentence and the calculated result
    if three_letter_word_count > 0:
        result = total_value / three_letter_word_count
    else:
        result = 0  # Avoid division by zero

    return modified_sentence, result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_sentence_and_calculate

def test_consecutive_vowels_reversed():
    sentence = "I love programming in Python"
    values_dict = {1: 10, 2: 20, 3: 30}
    result = process_sentence_and_calculate(sentence, values_dict)
    assert result[0] == "I evol gnimmargorp in nohtyP"
    assert result[1] == 0  # No appropriate three-letter words

def test_no_consecutive_vowels():
    sentence = "The quick brown fox"
    values_dict = {1: 10, 2: 5}
    result = process_sentence_and_calculate(sentence, values_dict)
    assert result[0] == "The kciuq brown fox"
    assert result[1] == 7.5  # Two 3-letter words and (10+5)/2 = 7.5

def test_empty_values_dictionary():
    sentence = "Quiet owl"
    values_dict = {}
    result = process_sentence_and_calculate(sentence, values_dict)
    assert result[0] == "teiuQ lalo"
    assert result[1] == 0  # No three-letter words, value is zero

def test_three_letter_words_only():
    sentence = "Map rap tap"
    values_dict = {1: 6, 2: 9}
    result = process_sentence_and_calculate(sentence, values_dict)
    assert result[0] == "Map rap tap"
    assert result[1] == 5  # Total 15 and three 3-letter words

def test_mixed_case_vowels():
    sentence = "BEAutiful scenery"
    values_dict = {1: 100, 2: 50}
    result = process_sentence_and_calculate(sentence, values_dict)
    assert result[0] == "lufitUAEB scenery"
    assert result[1] == 0  # No three-letter words
```
<|Test End|>