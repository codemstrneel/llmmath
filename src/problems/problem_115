QUESTION

Write a Python function to merge the first and last elements separately in a list of lists, while ensuring that each sublist contains unique elements only.

SOL & TESTS

<|Solution Begin|> 
```python
def merge_first_last_unique(list_of_lists):
    """
    Merges the first and last elements of each sublist into separate lists, ensuring unique elements in both.
    
    Args:
    list_of_lists: A list of sublists, where each sublist contains at least one element.
    
    Returns:
    A tuple containing two lists: 
    - The first list contains unique first elements of each sublist.
    - The second list contains unique last elements of each sublist.
    """
    if not list_of_lists:
        return ([], [])
    
    first_elements = set()
    last_elements = set()
    
    for sublist in list_of_lists:
        if sublist:
            first_elements.add(sublist[0])
            last_elements.add(sublist[-1])
    
    return (list(first_elements), list(last_elements))
```
<|Solution End|>
<|Test Begin|>
```python
from solution import merge_first_last_unique

def test_empty_list():
    assert merge_first_last_unique([]) == ([], [])

def test_single_sublist_single_element():
    assert merge_first_last_unique([[1]]) == ([1], [1])

def test_single_sublist_multiple_elements():
    assert merge_first_last_unique([[1, 2, 3]]) == ([1], [3])

def test_multiple_sublists_unique_first_and_last():
    assert merge_first_last_unique([[1, 2], [3, 4], [5, 6]]) == ([1, 3, 5], [2, 4, 6])

def test_multiple_sublists_with_duplicates():
    assert merge_first_last_unique([[1, 2], [1, 3], [2, 2], [4, 1]]) == ([1, 2, 4], [2, 3, 1])

def test_multiple_sublists_single_element():
    assert merge_first_last_unique([[1], [2], [3]]) == ([1, 2, 3], [1, 2, 3])

def test_mixed_length_sublists():
    assert merge_first_last_unique([[1, 2, 3], [1], [4, 5, 6, 7], [8]]) == ([1, 4, 8], [3, 1, 7, 8])

def test_nested_identical_sublists():
    assert merge_first_last_unique([[1, 2], [1, 2], [1, 2]]) == ([1], [2])
```
<|Test End|>