QUESTION

Write a function that takes two lists of integers, `list1` and `list2`, and a set of excluded values. The function should identify pairs of numbers where one number comes from `list1` and the other from `list2`, such that their product equals a specified integer `m` and neither number is found in the excluded set. Use the `map` and `lambda` functions to create a list of tuples representing these pairs. Additionally, utilize recursion to compute the Fibonacci sequence up to the length of this list of tuples. Return a dictionary where the keys are the indices of the pairs in the original lists, and the values are tuples of the pairs' product and the corresponding Fibonacci number. If no such pairs exist, return an empty dictionary.

SOLUTION/TESTS

```python
<|Solution Begin|>
def solution(list1, list2, excluded, m):
    from functools import reduce
    
    def fibonacci(n, fib_cache={0: 0, 1: 1}):
        if n in fib_cache:
            return fib_cache[n]
        fib_cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return fib_cache[n]

    pairs = list(filter(lambda pair: pair[0] * pair[1] == m,
                        map(lambda x: (x[0], x[1]),
                            [(i, j) for i in list1 if i not in excluded
                             for j in list2 if j not in excluded])))
    
    fib_sequence = [fibonacci(i) for i in range(len(pairs))]
    result = {idx: (pair[0] * pair[1], fib_sequence[idx]) for idx, pair in enumerate(pairs)}
    
    return result
<|Solution End|>

<|Test Begin|>
def test_no_pairs():
    # Test where no pairs can be found
    assert solution([1, 2], [3, 4], set(), 10) == {}

def test_single_pair():
    # Test with a single valid pair
    assert solution([1, 2], [4, 8], set(), 8) == {0: (8, 0)}

def test_multiple_pairs():
    # Test with multiple pairs
    expected = {0: (6, 0), 1: (12, 1)}
    assert solution([1, 3, 2], [2, 4, 6], set(), 6) == expected

def test_with_excluded_values():
    # Test with excluded values impacting the result
    assert solution([1, 2, 3], [1, 2, 3], {2}, 3) == {}

def test_fibonacci_sequence():
    # Test checks if Fibonacci is calculated correctly
    expected = {0: (2, 0), 1: (2, 1), 2: (2, 1), 3: (2, 2), 4: (2, 3)}
    result = solution([1, 2], [1, 2], set(), 2)
    assert result == expected

def test_large_numbers():
    # Test with larger numbers
    assert solution([100, 200], [2, 5, 50], set(), 200) == {1: (200, 0)}
<|Test End|>
```