QUESTION

Write a function to split the given string at uppercase letters by using regex, ensuring that each substring is at least 3 characters long.

SOL & TESTS

To solve the problem of splitting a given string at uppercase letters using regex, and ensuring that each resulting substring is at least 3 characters long, we can follow these steps:

1. Use regex to identify and split the string at capital letters.
2. Filter the resulting list to include only those substrings that have a length of at least 3 characters.
3. Compile the regular expression for splitting the string and use the `re.split()` method.

Hereâ€™s the implementation of the solution:

<|Solution Begin|> 
```python
import re

def split_string_at_uppercase(s):
    """
    Splits a given string at uppercase letters ensuring 
    each resultant substring is at least 3 characters long.
    """
    # Split the string at uppercase letters
    substrings = re.split(r'(?=[A-Z])', s)
    
    # Filter substrings to ensure each is at least 3 characters long
    return [substr for substr in substrings if len(substr) >= 3]
```
<|Solution End|>

Now, let's write the unit tests for this function to ensure it behaves as expected. These tests will check different scenarios, such as strings with various uppercase letters, strings already long enough without requiring a split, and edge cases like empty strings or strings with no uppercase letters.

<|Test Begin|>
```python
from solution import split_string_at_uppercase

def test_split_with_mixed_case():
    assert split_string_at_uppercase("ThisIsATest") == ["This", "Is", "Test"]

def test_split_with_no_uppercase():
    assert split_string_at_uppercase("thisisatest") == []

def test_split_with_all_uppercase():
    assert split_string_at_uppercase("THISISATEST") == []

def test_split_with_some_substrings_less_than_3():
    assert split_string_at_uppercase("ABTestStringExampleXYZ") == ["Test", "String", "Example"]

def test_split_with_exactly_3_characters():
    assert split_string_at_uppercase("TESOneTwo") == ["TES", "One", "Two"]

def test_empty_string():
    assert split_string_at_uppercase("") == []

def test_string_with_single_uppercase_character():
    assert split_string_at_uppercase("A") == []

def test_string_with_substrings_barely_over_3_characters():
    assert split_string_at_uppercase("SaABhiAll") == ["Sai", "All"]

def test_string_starting_with_uppercase():
    assert split_string_at_uppercase("ABCDefGHI") == ["BCD", "efGHI"]
```
<|Test End|>

These test cases cover various edge cases and typical usage scenarios for the function. They will help ensure that the function is both correctly implemented and resilient to unexpected input.