QUESTION

Write a function that packs consecutive duplicate numbers from a given list into sublists and then sorts each of these sublists numerically.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst):
    """
    Packs consecutive duplicate numbers from the provided list into sublists and then sorts each of these sublists numerically.
    """
    if not lst:
        return []
        
    packed = []
    current_sublist = [lst[0]]

    for i in range(1, len(lst)):
        if lst[i] == lst[i - 1]:
            current_sublist.append(lst[i])
        else:
            packed.append(sorted(current_sublist))
            current_sublist = [lst[i]]
    
    packed.append(sorted(current_sublist))
    
    return packed
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_empty_list():
    assert solution([]) == []

def test_single_element_list():
    assert solution([1]) == [[1]]

def test_no_duplicates():
    assert solution([1, 2, 3, 4]) == [[1], [2], [3], [4]]

def test_consecutive_duplicates():
    assert solution([1, 1, 2, 3, 3, 3, 4, 4]) == [[1, 1], [2], [3, 3, 3], [4, 4]]

def test_all_same_elements():
    assert solution([5, 5, 5, 5, 5]) == [[5, 5, 5, 5, 5]]

def test_alternating_duplicates():
    assert solution([1, 1, 2, 2, 1, 1]) == [[1, 1], [2, 2], [1, 1]]

def test_sorted_clusters():
    assert solution([4, 4, 2, 2, 1, 1, 3, 3]) == [[4, 4], [2, 2], [1, 1], [3, 3]]

<|Test End|>