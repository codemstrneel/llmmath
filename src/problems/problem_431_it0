QUESTION

Write a function that takes a list of integers, a list of tuples, and a string as input. The function should:

1. Remove any tuples from the list of tuples that contain a `None` value.
2. Check if the provided string ends with an alphanumeric character. If it does, append the tuple `(0, last_character)` where `last_character` is the last alphanumeric character of the string, to the list of tuples from step 1.
3. Use a lambda function to filter out integers from the list of integers that are divisible by the last integer of the concatenated list of tuples, ignoring any appended tuples. If no such integer exists, keep all integers.
4. Construct a list of tuples, where each tuple contains the index and the integer value from the filtered list.
5. Return a list that contains:
   - A list of unique indices from the tuples constructed in step 4.
   - The sum of integer values from step 4.
   - Whether the sum from step 5 is a polite number.

SOLUTION/TESTS

To tackle this problem, we will implement a function `solution` that performs the required operations in sequence by carefully following each step as described. We'll then provide unit tests to ensure that our function behaves as expected for various test cases.

Firstly, we'll address the task step-by-step:
1. **Remove tuples containing `None`:** We'll use a list comprehension to filter out any tuples with a `None` entry.
2. **Check the string and append a tuple if certain conditions are met:** We'll check if the string ends with an alphanumeric character and adapt the tuple list accordingly.
3. **Filter integers using lambda:** We'll find out the last integer of the tuple list before appending, and then apply the filtering on the integer list.
4. **Construct index-value tuples:** Use list comprehension along with `enumerate` to pair each integer with its index in a list.
5. **Generate the result:** Create a list with indices, sum, and check if sum is polite.

A polite number is defined as a number that can be expressed as the sum of two or more consecutive positive integers, or alternatively, a non-power-of-2 integer.

Let's implement the function:

```python
<|Solution Begin|>
def solution(integers, tuples, string):
    # Step 1: Remove tuples with None
    cleaned_tuples = [t for t in tuples if None not in t]
    
    # Step 2: Check if last character of string is alphanumeric
    if string and string[-1].isalnum():
        cleaned_tuples.append((0, string[-1]))
    
    # Determine the divisor for filtering integers
    divisor = int(cleaned_tuples[-1][0]) if cleaned_tuples else None
    
    # Step 3: Filter integers if possible
    if divisor and divisor != 0:
        filtered_integers = list(filter(lambda x: x % divisor != 0, integers))
    else:
        filtered_integers = integers.copy()
    
    # Step 4: Create index-value tuples
    indexed_values = list(enumerate(filtered_integers))
    
    # Step 5.1: Unique index list
    indices = [t[0] for t in indexed_values]
    indices_unique = list(sorted(set(indices)))

    # Step 5.2: Sum of integer values
    sum_of_values = sum(t[1] for t in indexed_values)
    
    # Step 5.3: Check if sum is polite
    def is_polite_number(n):
        return n & (n - 1) != 0  # Non-power of 2 are polite numbers

    is_polite = is_polite_number(sum_of_values)
    
    return [indices_unique, sum_of_values, is_polite]
<|Solution End|>
```

Now, we'll write unit tests to verify the correctness of our `solution`. These tests will check various scenarios, including boundary cases.

```python
<|Test Begin|>
def test_no_alphanumeric_string():
    result = solution([2, 3, 4], [(1, 2), (3, None)], "hello!")
    assert result == [[0, 1, 2], 9, True]

def test_tuples_with_none():
    result = solution([1, 4, 5, 8], [(None, 2), (3, 4)], "abc")
    assert result == [[0, 1], 5, True]

def test_no_last_integer():
    result = solution([1, 2, 3], [], "")
    assert result == [[0, 1, 2], 6, True]

def test_no_filter_applies():
    result = solution([5, 10, 15, 20], [(2, 3)], "x")
    assert result == [[0, 1, 2, 3], 50, False]

def test_integer_list_unchanged():
    result = solution([5, 7, 10], [(3, 2)], "")
    assert result == [[0, 1, 2], 22, True]

def test_with_last_char_and_tuples():
    result = solution([0, 4, 8, 10, 16], [(2, 3), (4, None)], "see3")
    assert result == [[0, 1, 2, 4], 30, False]

<|Test End|>
```

These tests cover cases with a different combination of inputs and ensure that our solution works under various scenarios.