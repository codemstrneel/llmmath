QUESTION

Write a function to calculate the perimeter of a regular polygon, and also determine the area of the polygon given that all the vertices lie on a circle of a specified radius.

SOLUTION/TESTS

To solve this problem, we need to create a function `solution` which takes two parameters: `n` (the number of sides of the polygon) and `r` (the radius of the circle in which all the vertices of the polygon lie). We will calculate the perimeter and area of the polygon. 

A regular polygon with `n` sides and radius `r` (circumradius) can have its side length calculated using the formula:
\[ \text{side\_length} = 2 \times r \times \sin\left(\frac{\pi}{n}\right) \]

The perimeter \( P \) of the polygon is:
\[ P = n \times \text{side\_length} \]

The area \( A \) of the polygon using the circumradius \( r \) can be calculated as:
\[ A = \frac{n \times r^2 \times \sin\left(\frac{2\pi}{n}\right)}{2} \]

Now let's implement the solution and write the unit tests.

<|Solution Begin|>
```python
import math

def solution(n, r):
    """
    Calculate the perimeter and the area of a regular polygon inscribed in a circle with radius r.

    :param n: int - Number of sides of the polygon
    :param r: float - Radius of the circumscribed circle
    :return: tuple - The perimeter and area of the polygon
    """
    side_length = 2 * r * math.sin(math.pi / n)
    perimeter = n * side_length
    area = (n * r**2 * math.sin(2 * math.pi / n)) / 2
    return perimeter, area
```
<|Solution End|>
<|Test Begin|>
```python
def test_solution_equilateral_triangle():
    perimeter, area = solution(3, 1)  # radius = 1 for an equilateral triangle
    assert math.isclose(perimeter, 5.196, rel_tol=1e-3)
    assert math.isclose(area, 1.299, rel_tol=1e-3)

def test_solution_square():
    perimeter, area = solution(4, 1)  # radius = 1 for a square
    assert math.isclose(perimeter, 5.656, rel_tol=1e-3)
    assert math.isclose(area, 2.0, rel_tol=1e-3)

def test_solution_pentagon():
    perimeter, area = solution(5, 1)  # radius = 1 for a pentagon
    assert math.isclose(perimeter, 5.878, rel_tol=1e-3)
    assert math.isclose(area, 2.377, rel_tol=1e-3)

def test_solution_hexagon():
    perimeter, area = solution(6, 1)  # radius = 1 for a hexagon
    assert math.isclose(perimeter, 6.0, rel_tol=1e-3)
    assert math.isclose(area, 2.598, rel_tol=1e-3)

def test_solution_large_radius():
    perimeter, area = solution(6, 10)  # radius = 10 for a hexagon
    assert math.isclose(perimeter, 60.0, rel_tol=1e-3)
    assert math.isclose(area, 259.808, rel_tol=1e-3)
```
<|Test End|>

The `math.isclose` function is used in the tests to account for potential floating-point arithmetic errors by comparing the calculated values to the expected values with a relative tolerance.