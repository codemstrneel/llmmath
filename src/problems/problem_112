QUESTION

Write a function to divide two lists using map and lambda function. Ensure that both lists have random floating-point numbers and validate that division by zero does not occur in any instance.

SOL & TESTS

Here is a function in Python that uses `map` and a `lambda` function to divide corresponding elements of two lists of floating-point numbers. The function assumes both lists are of equal length and validates that division by zero does not occur.

<|Solution Begin|>
```python
def divide_lists(list1, list2):
    """
    Divides elements of list1 by elements of list2 using map and lambda,
    ensuring no division by zero occurs.
    """
    if len(list1) != len(list2):
        raise ValueError("Both lists must have the same length.")
    
    return list(map(lambda x, y: x / y if y != 0 else None, list1, list2))
```
<|Solution End|>

Below are unit tests for this function using pytest style.

<|Test Begin|>
```python
from solution import divide_lists

def test_divide_equal_length_lists():
    list1 = [2.0, 4.0, 6.0]
    list2 = [1.0, 2.0, 3.0]
    assert divide_lists(list1, list2) == [2.0, 2.0, 2.0]

def test_divide_by_zero():
    list1 = [1.0, 2.0, 3.0]
    list2 = [1.0, 0.0, 2.0]
    assert divide_lists(list1, list2) == [1.0, None, 1.5]

def test_empty_lists():
    list1 = []
    list2 = []
    assert divide_lists(list1, list2) == []

def test_lists_of_different_lengths():
    list1 = [1.0, 2.0]
    list2 = [1.0]
    try:
        divide_lists(list1, list2)
    except ValueError as e:
        assert str(e) == "Both lists must have the same length."
    else:
        assert False, "Expected ValueError."

def test_division_with_negative_numbers():
    list1 = [2.0, -4.0, 6.0]
    list2 = [-2.0, 2.0, -3.0]
    assert divide_lists(list1, list2) == [-1.0, -2.0, -2.0]
```
<|Test End|>