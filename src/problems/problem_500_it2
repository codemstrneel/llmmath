QUESTION

Write a Python function to find the cube sum of the first n odd natural numbers, and ensure the function handles inputs up to 10,000 efficiently.

SOLUTION/TESTS

<|Solution Begin|>
def solution(n):
    """
    Returns the cube sum of the first n odd natural numbers.
    """
    return n**2 * (2*n**2 - 1)

<|Solution End|>
<|Test Begin|>
from solution import solution

def test_first_odd():
    assert solution(1) == 1  # 1^3 = 1

def test_first_two_odds():
    # Odd numbers are 1, 3
    # 1^3 + 3^3 = 1 + 27 = 28
    assert solution(2) == 28

def test_first_three_odds():
    # Odd numbers are 1, 3, 5
    # 1^3 + 3^3 + 5^3 = 1 + 27 + 125 = 153
    assert solution(3) == 153

def test_zero_input():
    assert solution(0) == 0

def test_large_input():
    # Test with a large input to check efficiency up to 10,000
    # The specific value isn't calculated manually, this is more of a performance test
    assert isinstance(solution(10000), int)

def test_general_case():
    # Testing a general case, first 4 odd numbers: 1, 3, 5, 7
    # 1^3 + 3^3 + 5^3 + 7^3 = 1 + 27 + 125 + 343 = 496
    assert solution(4) == 496

<|Test End|>