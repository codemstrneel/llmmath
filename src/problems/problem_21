QUESTION

Write a function to find the list in a list of lists whose average of elements is the highest.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lists):
    """
    Returns the list with the highest average value from a list of lists.
    If there are multiple lists with the same highest average, return the first one.
    
    :param lists: List[List[float]] - a list containing lists of numbers
    :return: List[float] - the list with the highest average
    """
    # Assume lists is non-empty and each sublist is non-empty.
    max_average = float('-inf')
    list_with_max_average = []

    for lst in lists:
        avg = sum(lst) / len(lst)
        if avg > max_average:
            max_average = avg
            list_with_max_average = lst

    return list_with_max_average
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_single_list():
    assert solution([[1, 2, 3]]) == [1, 2, 3]

def test_identical_lists():
    assert solution([[1, 2], [1, 2], [1, 2]]) == [1, 2]

def test_different_lengths():
    assert solution([[1, 2, 3], [4, 5], [6]]) == [4, 5]

def test_multiple_highest_averages():
    assert solution([[1, 2, 3, 4], [4, 5], [10]]) == [10]

def test_mixed_values():
    assert solution([[1, -4, 3], [9, 8, 7], [4, 5, 6]]) == [9, 8, 7]

def test_negative_values():
    assert solution([[-1, -2, -3], [-4, -5], [-1, -1]]) == [-1, -1]

def test_float_values():
    assert solution([[1.1, 2.2, 3.3], [4.4, 5.5], [6.6]]) == [4.4, 5.5]

def test_empty_sublists():
    # Not a requirement but just to handle gracefully
    assert solution([[5], []]) == [5]
<|Test End|>