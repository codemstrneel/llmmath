QUESTION

Create a Python function that processes a list of strings with the following operations:

1. For every pair of adjacent strings, swap their positions in the list. If the list has an odd number of strings, leave the last string in its original position.
   
2. For each string in the modified list, remove any content enclosed within brackets, including the brackets themselves. Use regular expressions for this task.

3. Concatenate all the cleaned strings into a single string, removing any duplicate words while preserving the order of their first occurrence. Use the `collections` module to assist with this.

4. Extract all numeric values (integers or floats) from the concatenated string using regular expressions and calculate their sum using a lambda function. If no numeric values are found, the sum should be considered as 0.

5. Return a tuple with the final concatenated uppercase string and the calculated sum of numeric values.

This question combines list manipulation and string processing, leveraging elements like regular expressions for bracket removal and numeric extraction, collections for handling duplicates, and lambda functions for final calculations.

SOL & TESTS

<|Solution Begin|> 
```python
import re
from collections import OrderedDict

def process_strings(strings):
    # Step 1: Swap adjacent strings
    for i in range(0, len(strings) - 1, 2):
        strings[i], strings[i + 1] = strings[i + 1], strings[i]

    # Step 2: Remove content inside brackets
    cleaned_strings = [re.sub(r'\[.*?\]', '', s) for s in strings]

    # Step 3: Concatenate and remove duplicate words
    all_words = " ".join(cleaned_strings).split()
    ordered_unique_words = list(OrderedDict.fromkeys(all_words))
    concatenated_string = " ".join(ordered_unique_words)

    # Step 4: Extract and sum numeric values
    numbers = map(lambda x: float(x), re.findall(r'\b\d+\.*\d*\b', concatenated_string))
    numeric_sum = sum(numbers)

    # Return the tuple with the concatenated uppercase string and numeric sum
    return (concatenated_string.upper(), numeric_sum)
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_strings

def test_example_case():
    assert process_strings([
        "Hello [world] 123",
        "Python [rocks] 456",
        "More text [data] 789",
        "End 321"
    ]) == ("PYTHON HELLO 123 ROCKS MORE TEXT DATA END 321", 1689.0)

def test_odd_number_of_strings():
    assert process_strings([
        "One",
        "Two",
        "Three"
    ]) == ("TWO ONE THREE", 0)

def test_no_brackets():
    assert process_strings([
        "Hello 123",
        "Python 456"
    ]) == ("PYTHON HELLO 123 456", 579.0)

def test_no_numbers():
    assert process_strings([
        "Hello World",
        "Python"
    ]) == ("PYTHON HELLO WORLD", 0)

def test_empty_strings():
    assert process_strings([
        "",
        ""
    ]) == ("", 0)

def test_strings_with_duplicates_and_numbers():
    assert process_strings([
        "one [ignore] 1",
        "two [ignore] 2",
        "three [again ignore] 3",
        "one two [ignore] 4"
    ]) == ("TWO ONE THREE 1 2 AGAIN 3 4", 10.0)

def test_strings_without_swapping():
    assert process_strings([
        "single [shouldnotbe swapped] 2.5"
    ]) == ("SINGLE 2.5", 2.5)
```
<|Test End|>