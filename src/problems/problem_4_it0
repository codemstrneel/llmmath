QUESTION

Write a Python function that takes a list of decimal numbers (with a precision of 2) and rearranges the list in ascending order. While rearranging, any two numbers with an equal number of set bits in their integer part should retain their original relative order.

SOLUTION/TESTS

To solve this problem, we need to rearrange the list of decimal numbers so that they are in ascending order of their integer part's set bits count. If two numbers have the same number of set bits in their integer part, they should maintain their original order (this is known as a stable sort).

We can achieve this by:
1. Extracting the integer part of each number and counting the set bits (ones) in its binary representation.
2. Sorting the numbers based on the number of set bits, using a stable sorting algorithm.

Here is the implementation along with the unit tests:

<|Solution Begin|>
```python
def solution(numbers):
    """
    Sorts a list of decimal numbers based on the count of set bits (1s) 
    in their integer part. If two numbers have the same count of set bits, 
    their relative order remains unchanged.
    """
    # Helper function to count set bits in an integer
    def count_set_bits(num):
        return bin(num).count('1')
    
    # Create a list of tuples (count of set bits in integer part, current index, number)
    decorated_list = [(count_set_bits(int(num)), index, num) for index, num in enumerate(numbers)]
    
    # Sort the decorated list by (count of set bits, index) which establishes stability
    decorated_list.sort(key=lambda x: (x[0], x[1]))
    
    # Return the sorted numbers based on the custom logic
    return [num for _, _, num in decorated_list]
```
<|Solution End|>

<|Test Begin|>
```python
from solution import solution

def test_mixed_numbers():
    numbers = [3.14, 1.62, 4.15, 2.71, 2.71]
    assert solution(numbers) == [1.62, 2.71, 2.71, 3.14, 4.15]

def test_all_same_numbers():
    numbers = [2.00, 2.00, 2.00]
    assert solution(numbers) == [2.00, 2.00, 2.00]

def test_different_set_bits():
    numbers = [3.00, 8.00, 2.00, 15.00]
    assert solution(numbers) == [2.00, 8.00, 3.00, 15.00]

def test_single_number():
    numbers = [2.00]
    assert solution(numbers) == [2.00]

def test_no_numbers():
    numbers = []
    assert solution(numbers) == []

def test_same_set_bits_different_order():
    numbers = [5.00, 6.00, 3.00, 10.00]
    assert solution(numbers) == [3.00, 5.00, 6.00, 10.00]
```
<|Test End|>

This implementation considers the integer part of the decimal number for counting set bits and sorts accordingly. The use of tuple decoration ensures the sort is stable, preserving the order of numbers with the same number of set bits. The test cases confirm that the function behaves correctly under various scenarios.