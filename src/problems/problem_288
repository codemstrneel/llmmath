QUESTION

Create a function that takes a string representing a URL and extracts all the numerical sequences from it using regex. Then, identify the maximum run of consecutive numerical sequences found in the URL and return it. Additionally, process the URL to extract any uppercase alphabetic runs and include these in your returned results. Your function should return a tuple consisting of the longest run of numerical sequences and the longest run of uppercase characters found in the URL. If there are ties, return any one of the longest runs.

SOL & TESTS

```python
<|Solution Begin|>
import re

def extract_longest_runs(url):
    # Find all numeric sequences
    numeric_sequences = re.findall(r'\d+', url)
    longest_numeric_run = max(numeric_sequences, key=len, default="")

    # Find all uppercase character runs
    uppercase_sequences = re.findall(r'[A-Z]+', url)
    longest_uppercase_run = max(uppercase_sequences, key=len, default="")

    return longest_numeric_run, longest_uppercase_run
```
<|Solution End|>

<|Test Begin|>
```python
from solution import extract_longest_runs

def test_no_numeric_or_uppercase():
    result = extract_longest_runs("http://example.com/path/to/resource")
    assert result == ("", "")

def test_only_numeric_sequences():
    result = extract_longest_runs("http://123.com/45/6789")
    assert result == ("6789", "")

def test_only_uppercase_sequences():
    result = extract_longest_runs("http://example.com/ABC/DEFG/HIJKL")
    assert result == ("", "HIJKL")

def test_numeric_and_uppercase_mixed():
    result = extract_longest_runs("http://EX123.com/A12BC/456DEFG78")
    assert result == ("456", "DEFG")

def test_special_characters_in_url():
    result = extract_longest_runs("ftp://NUM123!@#$%^&*()ABCDEF~gh123")
    assert result == ("123", "ABCDEF")

def test_tied_longest_runs():
    result = extract_longest_runs("http://XYZ123/4567/ABCD/89")
    # Longest numeric runs: "123" or "4567"; Longest uppercase: "XYZ" or "ABCD"
    assert result in [("4567", "XYZ"), ("4567", "ABCD"), ("123", "XYZ"), ("123", "ABCD")]
```
<|Test End|>