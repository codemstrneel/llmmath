QUESTION

Write a Python function that takes two inputs: a list of integers and a number representing the number of left rotations to perform on this list. After performing the rotations, compute the maximum number among the sum of squares of the integers in the rotated list and return its position in the list. If there is more than one such number, return the position of the rightmost occurrence.

SOLUTION/TESTS

<|Solution Begin|>
def solution(arr, rotations):
    """
    Rotates the list 'arr' to the left by 'rotations' places and returns 
    the position of the rightmost element that results in the maximum sum of squares.
    """
    if not arr:
        return -1  # return -1 if the list is empty
    n = len(arr)
    # Handling more rotations than the length of the array
    rotations = rotations % n
    # Perform the left rotations
    rotated = arr[rotations:] + arr[:rotations]
    # Compute the sum of squares
    max_sum_of_squares = float('-inf')
    max_pos = -1
    for index, value in enumerate(rotated):
        sum_of_squares = value ** 2
        if sum_of_squares > max_sum_of_squares or (sum_of_squares == max_sum_of_squares and index >= max_pos):
            max_sum_of_squares = sum_of_squares
            max_pos = index
    return max_pos
<|Solution End|>
<|Test Begin|>
def test_solution_example():
    assert solution([1, 2, 3, 4, 5], 2) == 3  # [3, 4, 5, 1, 2] => max summed square at position 3

def test_solution_single_element():
    assert solution([10], 3) == 0  # Only one element, its square is maximum

def test_solution_two_elements():
    assert solution([5, 7], 1) == 0  # [7, 5], both have the same square sum, position of 7 is 0.

def test_empty_array():
    assert solution([], 5) == -1  # No elements in the list

def test_no_rotation():
    assert solution([2, 4, 1], 0) == 1  # Position 1 (number 4) has the highest square when no rotation

def test_solution_all_zeros():
    assert solution([0, 0, 0], 5) == 2  # All positions equivalent, return rightmost, which is 2

def test_solution_large_rotations():
    assert solution([1, 2, 3], 10) == 2  # Effective rotation is 10 % 3 = 1, max square at position 2

def test_solution_negatives():
    assert solution([-3, -2, -6, -1], 3) == 2  # [-1, -3, -2, -6], rightmost max square at position 2

def test_solution_repeated_max_squares():
    assert solution([1, 2, 2, 3, 3], 2) == 0  # [2, 3, 3, 1, 2], rightmost max square at position 0

<|Test End|>