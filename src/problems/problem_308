QUESTION

Create a Python function that takes an array of strings as input and performs the following tasks:
1. For each string, calculate and return the harmonic sum of the count of a specified character within that string.
2. Identify and return the total number of vowels in the string that has the maximum harmonic sum calculated in step 1.

The function should efficiently handle multiple strings in the array to produce these results, and each result should be returned as a tuple containing the harmonic sum and the vowel count for the string with the maximum harmonic sum.

SOL & TESTS

<|Solution Begin|> 
```python
def harmonic_vowel_analysis(strings, char):
    """
    Analyzes the given list of strings and returns:
    1. The harmonic sum of occurrences of `char` in each string.
    2. The total number of vowels in the string with the highest harmonic sum.

    Args:
    strings (list of str): List of strings to analyze.
    char (str): The character to count in each string for the harmonic sum.

    Returns:
    tuple: A tuple containing the maximum harmonic sum and the count of vowels in the corresponding string.
    """
    def harmonic_sum(n):
        """Calculate harmonic sum of n."""
        if n == 0:
            return 0
        return sum(1.0 / i for i in range(1, n + 1))

    def count_vowels(s):
        """Count the number of vowels in a string."""
        return sum(c in 'aeiouAEIOU' for c in s)

    max_harmonic_sum = 0
    max_harmonic_sum_vowels = 0
    
    for s in strings:
        char_count = s.count(char)
        h_sum = harmonic_sum(char_count)

        if h_sum > max_harmonic_sum:
            max_harmonic_sum = h_sum
            max_harmonic_sum_vowels = count_vowels(s)

    return max_harmonic_sum, max_harmonic_sum_vowels
```
<|Solution End|>

<|Test Begin|>
```python
from solution import harmonic_vowel_analysis

def test_no_strings():
    assert harmonic_vowel_analysis([], 'k') == (0, 0)

def test_no_character_occurrences():
    assert harmonic_vowel_analysis(["apple", "banana", "cherry"], 'z') == (0, 0)

def test_character_single_occurrence():
    assert harmonic_vowel_analysis(["apple", "banana", "cherry"], 'a') == (1.0, 3)  # "banana" has 3 'a's

def test_multiple_occurrences():
    assert harmonic_vowel_analysis(["apple", "banana", "cherry", "aaaaa"], 'a') == (2.283333333333333, 2)  # "aaaaa" has 5 'a's

def test_mixed_cases():
    assert harmonic_vowel_analysis(["ApplE", "BaNana", "CHerry"], 'a') == (1.833333333333333, 3)  # "BaNana" has 3 'a's, highest harmonic sum

def test_string_with_max_vowels_but_not_max_harmonic():
    assert harmonic_vowel_analysis(["aaaaa", "eeeeee"], 'a') == (2.283333333333333, 2)  # max harmonic in "aaaaa", vowels from it

def test_case_insensitive_character_matching():
    assert harmonic_vowel_analysis(["cat", "Cat", "cAt", "caT"], 'c') == (1.0, 1)  # Case insensitive match
    
def test_empty_strings():
    assert harmonic_vowel_analysis(["", "", ""], 'a') == (0, 0)
```
<|Test End|>