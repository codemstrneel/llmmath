QUESTION

Write a function that takes an input list of tuples, where each tuple contains a string and a list of angles. The function should identify the tuple that has the list whose sum of angles is closest to 180 degrees. Then, reverse the list of angles found in that tuple. Check if the new list of angles (after reversing) can form a triangle with a positive area. Return the string associated with that tuple and a boolean indicating whether a valid triangle is possible.

SOLUTION/TESTS

<|Solution Begin|>
def solution(data):
    """
    Identifies the tuple that has the list whose sum of angles is closest to 180 degrees.
    Then, reverses the list of angles and checks if a valid triangle can be formed.
    Returns the string associated with that tuple and a boolean indicating whether a valid triangle is possible.
    """
    def can_form_triangle(angles):
        if len(angles) != 3:
            return False
        a, b, c = angles
        return a + b > c and a + c > b and b + c > a

    closest_tuple = None
    smallest_diff = float('inf')

    for item in data:
        name, angles = item
        diff = abs(sum(angles) - 180)
        if diff < smallest_diff:
            smallest_diff = diff
            closest_tuple = item

    if closest_tuple is not None:
        name, angles = closest_tuple
        reversed_angles = list(reversed(angles))
        is_valid_triangle = can_form_triangle(reversed_angles)
        return name, is_valid_triangle

    return None, False
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_no_tuples():
    assert solution([]) == (None, False)

def test_single_exact_tuple():
    data = [("Triangle1", [60, 60, 60])]
    assert solution(data) == ("Triangle1", True)

def test_single_inexact_tuple():
    data = [("Triangle1", [60, 60, 59])]
    assert solution(data) == ("Triangle1", True)

def test_multiple_tuples_closest():
    data = [
        ("Triangle1", [60, 60, 60]),
        ("Triangle2", [50, 70, 60]), # This one is an exact fit and should be chosen
        ("Triangle3", [80, 50, 55])
    ]
    assert solution(data) == ("Triangle2", True)

def test_multiple_non_triangle():
    data = [
        ("Triangle1", [90, 45, 44]),  # Sum is 179, this should be chosen
        ("Triangle2", [60, 60, 60])
    ]
    assert solution(data) == ("Triangle1", False)

def test_isosceles_triangle():
    data = [("Triangle1", [30, 75, 75])]
    assert solution(data) == ("Triangle1", True)

def test_right_angle_triangle():
    data = [("Square", [90, 60, 30])]
    assert solution(data) == ("Square", True)

def test_invalid_triangle_before_reversal():
    data = [("Flat", [90, 90, 0])] # Technically a straight line
    assert solution(data) == ("Flat", False)
<|Test End|>