QUESTION

Write a Python function to left rotate the digits of a given number.

SOL & TESTS

## Solution:

The task is to create a function that takes a number and performs a left rotation on its digits. For instance, if you have the number `12345` and you perform a left rotation, you would expect to get `23451`.

To achieve this, we will:
1. Convert the number to a string to easily manipulate its digits.
2. Perform the left rotation by slicing the string appropriately.
3. Convert the rotated string back to a number.

```python
def left_rotate_digits(num):
    """
    Left rotates the digits of the given number and returns the resulting number.
    Single digit numbers remain the same.
    
    :param num: an integer to be rotated
    :return: the number resulting from the left rotation of the input digit
    """
    num_str = str(num)
    if len(num_str) <= 1:
        return num
    rotated_str = num_str[1:] + num_str[0]
    return int(rotated_str)
```

## Test:

Now, let's write unit tests to verify that the solution works as expected.

```python
from solution import left_rotate_digits

def test_single_digit_number():
    assert left_rotate_digits(7) == 7, "Single digit numbers remain unchanged"

def test_two_digit_number():
    assert left_rotate_digits(12) == 21, "Rotation of 12 should give 21"

def test_multiple_digits():
    assert left_rotate_digits(12345) == 23451, "Rotation of 12345 should give 23451"

def test_number_containing_zero():
    assert left_rotate_digits(1023) == 2310, "Rotation of 1023 should give 2310"

def test_large_number():
    assert left_rotate_digits(9876543210) == 8765432109, "Rotation of 9876543210 should give 8765432109"
```