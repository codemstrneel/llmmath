QUESTION

New Question: Write a function to calculate the lateral surface area of a cylinder, and modify it to also calculate the total surface area of the cylinder, including the top and bottom surfaces.

SOLUTION/TESTS

<|Solution Begin|>
import math

def solution(radius, height, include_end_caps=False):
    """
    Calculate the lateral surface area of a cylinder.
    Optionally calculate the total surface area including top and bottom surfaces.
    
    :param radius: Radius of the cylinder's base
    :param height: Height of the cylinder
    :param include_end_caps: If True, include the total surface area
    :return: Lateral surface area of the cylinder or total surface area if include_end_caps = True
    """
    lateral_surface_area = 2 * math.pi * radius * height
    if include_end_caps:
        end_caps_area = 2 * math.pi * radius**2
        return lateral_surface_area + end_caps_area
    return lateral_surface_area
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_lateral_surface_area():
    # Test cases for lateral surface area only
    assert solution(1, 1, False) == 2 * math.pi * 1 * 1
    assert solution(2, 3, False) == 2 * math.pi * 2 * 3
    assert solution(0, 1, False) == 0
    assert solution(1, 0, False) == 0

def test_total_surface_area():
    # Test cases for total surface area including end caps
    assert solution(1, 1, True) == (2 * math.pi * 1 * 1) + (2 * math.pi * 1**2)
    assert solution(2, 3, True) == (2 * math.pi * 2 * 3) + (2 * math.pi * 2**2)
    assert solution(0, 1, True) == 0
    assert solution(1, 0, True) == 2 * math.pi * 1**2

def test_edge_cases():
    # Edge test cases
    assert solution(1, 1, False) > 0
    assert solution(1, 0, True) == 2 * math.pi * 1**2
    assert solution(0, 0, True) == 0
    assert solution(0, 0, False) == 0
<|Test End|>