QUESTION

Develop a function that takes a mixed list containing both strings and tuples. This function should perform the following operations:

1. For each string in the list, extract all the numbers using regular expressions and return them in a new list.
2. After extracting numbers from all strings, find and return the smallest missing number within this consolidated list of numbers.
3. Concurrently, for each tuple in the list, determine if it is a subset of a master tuple, which is provided as an additional parameter to the function.
4. Return both the smallest missing number from the extracted numbers and a list indicating which tuples were subsets of the master tuple.

This challenge combines the extraction and processing of numeric data from strings, subset determination with tuples, and missing number identification, requiring a comprehensive handling of mixed data types and operations.

SOL & TESTS

```python
def process_mixed_list(mixed_list, master_tuple):
    """
    Processes a mixed list of strings and tuples, extracting numbers and identifying subsets.

    Parameters:
    - mixed_list: A list containing strings and tuples.
    - master_tuple: A tuple serving as the master tuple for subset determination.

    Returns:
    - A tuple containing the smallest missing number from extracted numerical values
      in the strings and a list indicating whether tuples in the mixed list are subsets
      of the master tuple.
    """
    import re

    def extract_numbers(string):
        """Extracts all numbers from a given string and returns them as a list of integers."""
        numbers = re.findall(r'\d+', string)
        return list(map(int, numbers))

    # Extract numbers from strings in the list
    all_numbers = []
    subset_results = []

    for item in mixed_list:
        if isinstance(item, str):
            all_numbers.extend(extract_numbers(item))
        elif isinstance(item, tuple):
            subset_results.append(set(item).issubset(set(master_tuple)))

    # Find smallest missing number
    def find_smallest_missing_number(numbers):
        """Finds the smallest missing number from a consecutive integer sequence."""
        numbers_set = set(numbers)
        i = 1
        while i in numbers_set:
            i += 1
        return i

    smallest_missing_number = find_smallest_missing_number(all_numbers)

    return smallest_missing_number, subset_results
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_mixed_list

def test_process_mixed_list_basic():
    mixed_list = ["item1 12", "item2 4 5", (1, 2), (1, 3)]
    master_tuple = (1, 2, 3, 4)
    result = process_mixed_list(mixed_list, master_tuple)
    assert result == (1, [True, True])

def test_process_mixed_list_no_tuple_matches():
    mixed_list = ["abc 20 xyz", "42 fish", (1, 999), (100,)]
    master_tuple = (1, 2, 3)
    result = process_mixed_list(mixed_list, master_tuple)
    assert result == (1, [False, False])

def test_process_mixed_list_no_numbers_in_strings():
    mixed_list = ["a", "b", (1,), (2, 3)]
    master_tuple = (1, 2, 3, 4)
    result = process_mixed_list(mixed_list, master_tuple)
    assert result == (1, [True, True])

def test_process_mixed_list_complex():
    mixed_list = ["foo 3 7", "bar 3 4 5", (2, 4), (5, 7)]
    master_tuple = (2, 3, 4, 5, 6, 7, 8)
    result = process_mixed_list(mixed_list, master_tuple)
    assert result == (1, [True, True])

def test_process_mixed_list_with_large_numbers():
    mixed_list = ["number 999", "another 1000", (999,), (1000, 1001)]
    master_tuple = (999, 1000, 1001, 1002)
    result = process_mixed_list(mixed_list, master_tuple)
    assert result == (1, [True, True])
```
<|Test End|>