QUESTION

Create a function that performs three tasks and returns the results as a dictionary. The function should take in a list of tuples, a camel case string, and an integer n as inputs:

1. Convert the camel case string to a snake case string.
2. Calculate the nth nonagonal number if the cumulative sum of all numerical integer values within the list of tuples is even; otherwise, calculate the nth sum of natural numbers.
3. Sort the list of tuples in ascending order based on the first integer in each tuple, ignoring any tuples that do not contain an integer.

The function should return a dictionary with:

- "snake_case": The snake case transformation of the input camel case string.
- "result": The calculated nth nonagonal number if the cumulative sum is even, or the sum of the first n natural numbers if the cumulative sum is odd.
- "sorted_tuples": The list of tuples sorted in ascending order based on the first integer in each tuple, excluding tuples without integers.

SOL & TESTS

```python
<|Solution Begin|>
def camel_to_snake(camel_case_str):
    import re
    return re.sub(r'(?<!^)(?=[A-Z])', '_', camel_case_str).lower()

def nth_nonagonal_number(n):
    return n * (7 * n - 5) // 2

def sum_of_first_n_natural_numbers(n):
    return n * (n + 1) // 2

def sort_tuples_by_first_integer(tuples_list):
    return sorted((t for t in tuples_list if isinstance(t[0], int)), key=lambda x: x[0])

def perform_tasks(tuples_list, camel_case_str, n):
    # Convert camel case string to snake case string
    snake_case = camel_to_snake(camel_case_str)
    
    # Calculate cumulative sum of all integer values in the tuples
    cumulative_sum = sum(value for t in tuples_list for value in t if isinstance(value, int))
    
    # Calculate the appropriate result
    if cumulative_sum % 2 == 0:
        result = nth_nonagonal_number(n)
    else:
        result = sum_of_first_n_natural_numbers(n)
    
    # Sort the list of tuples based on the first integer
    sorted_tuples = sort_tuples_by_first_integer(tuples_list)
    
    return {
        "snake_case": snake_case,
        "result": result,
        "sorted_tuples": sorted_tuples
}
<|Solution End|>
```

```python
<|Test Begin|>
from solution import perform_tasks

def test_camel_to_snake_conversion():
    assert perform_tasks([], 'CamelCaseString', 0)['snake_case'] == 'camel_case_string'
    assert perform_tasks([], 'simpleString', 0)['snake_case'] == 'simple_string'
    assert perform_tasks([], 'AnotherExampleString', 0)['snake_case'] == 'another_example_string'

def test_nth_calculation_based_on_cumulative_sum_even():
    tuples_list = [(3, 2), (2, 5)]
    assert perform_tasks(tuples_list, '', 2)['result'] == 16  # Nonagonal number for n=2

def test_nth_calculation_based_on_cumulative_sum_odd():
    tuples_list = [(3, 2), (2, 5, 1)]
    assert perform_tasks(tuples_list, '', 3)['result'] == 6  # Sum of first 3 natural numbers

def test_sorting_tuples_by_first_integer():
    tuples_list = [(3, 'a'), (1, 'b', 3), (2, 'd')]
    sorted_tuples = perform_tasks(tuples_list, '', 0)['sorted_tuples']
    assert sorted_tuples == [(1, 'b', 3), (2, 'd'), (3, 'a')]

def test_excluding_non_integer_tuples():
    tuples_list = [(3, 'a'), ('x', 'y'), (2, 'd')]
    sorted_tuples = perform_tasks(tuples_list, '', 0)['sorted_tuples']
    assert sorted_tuples == [(2, 'd'), (3, 'a')]
<|Test End|>
```