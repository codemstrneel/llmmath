QUESTION

Write a function to find the list in a list of lists whose sum of elements is the highest, and ensure that the solution works efficiently for lists containing up to 10,000 sublists with up to 1,000 elements each.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lists_of_lists):
    """
    Finds the sublist with the highest sum of elements from a list of lists.

    :param lists_of_lists: List of lists of numbers
    :return: List with the highest sum of elements
    """
    max_sum = float('-inf')
    max_list = []

    for sublist in lists_of_lists:
        current_sum = sum(sublist)
        if current_sum > max_sum:
            max_sum = current_sum
            max_list = sublist

    return max_list
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_single_sublist():
    assert solution([[1, 2, 3]]) == [1, 2, 3]

def test_equal_sums():
    assert solution([[1, 2, 3], [3, 2, 1]]) == [1, 2, 3]

def test_varied_values():
    assert solution([[1, 2, 3], [4, 5, 6], [-1, -2, -3]]) == [4, 5, 6]

def test_negative_and_positive_values():
    assert solution([[1, -2, 3], [-4, 5, -6], [7, 8, 9]]) == [7, 8, 9]

def test_large_numbers():
    assert solution([[1e18, 2e18], [-1e18, -1e18, -1e18, -1e18], [3e18]]) == [1e18, 2e18]

def test_large_list_of_lists():
    large_list = [], *([[i] * 1000 for i in range(10000)])
    assert solution(large_list) == [9999] * 1000

def test_empty_sublists():
    assert solution([[], [], [1], []]) == [1]

def test_all_empty_sublists():
    assert solution([[], [], []]) == []

def test_single_large_sublist():
    large_sublist = [1] * 1000
    assert solution([large_sublist, [0]]) == large_sublist
<|Test End|>