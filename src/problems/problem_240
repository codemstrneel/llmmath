QUESTION

Here is a novel question that combines aspects from several of your provided questions, specifically numeric comparison, tuple manipulation, and string processing:

**New Question:**

Write a Python function that takes two inputs: a string `text` and a list of integers. The task is to do the following:

1. **String Manipulation**:
   - Identify and extract all sequences of digits from `text`.
   - For each sequence, interpret it as an integer and check if it appears in the input list of integers. Replace these sequences in `text` with the word "FOUND".

2. **Integer Grouping and Analysis**:
   - Group the integers from the list based on their parity (even or odd).
   - Within each parity group, create a tuple for each integer consisting of:
     - The integer itself.
     - Its index in the original list.
     - A string indicating its parity ("even" or "odd").

3. **Output**:
   - Return a dictionary with two keys:
     - `"modified_text"`: Contains the modified version of `text` with the digit substitutions made.
     - `"parity_groups"`: Contains a dictionary with two keys, `"even"` and `"odd"`, each mapping to a list of tuples representing the integers of that parity, sorted by the original index.

For example, given the input string `"There are 12 apples, 7 oranges, and 5 grapes in 12 baskets."` and list `[12, 7, 1]`, the output should be:
```python
{
    "modified_text": "There are FOUND apples, FOUND oranges, and 5 grapes in FOUND baskets.",
    "parity_groups": {
        "even": [(12, 0, "even")],
        "odd": [(7, 1, "odd"), (1, 2, "odd")]
    }
}
```

This question combines elements of string processing (from Question 4) with integer grouping and tuple creation (inspired by the parity concepts from Question 1 and numeric comparison and manipulation from Questions 2 and 5).

SOL & TESTS

<|Solution Begin|>```python
import re

def process_text_and_numbers(text, numbers):
    # String Manipulation
    modified_text = text
    digit_sequences = re.findall(r'\d+', text)

    unique_numbers_set = set(numbers)  # To optimize search within numbers

    for sequence in digit_sequences:
        number = int(sequence)
        if number in unique_numbers_set:
            modified_text = modified_text.replace(sequence, "FOUND")
    
    # Integer Grouping and Analysis
    parity_groups = {'even': [], 'odd': []}
    
    for index, number in enumerate(numbers):
        if number % 2 == 0:
            parity = 'even'
        else:
            parity = 'odd'
        
        parity_groups[parity].append((number, index, parity))
    
    # Return the result
    return {
        "modified_text": modified_text,
        "parity_groups": parity_groups
    }
``` 
<|Solution End|>

<|Test Begin|>```python
def test_process_text_and_numbers_basic_usage():
    text = "There are 12 apples, 7 oranges, and 5 grapes in 12 baskets."
    numbers = [12, 7, 1]
    result = process_text_and_numbers(text, numbers)
    assert result == {
        "modified_text": "There are FOUND apples, FOUND oranges, and 5 grapes in FOUND baskets.",
        "parity_groups": {
            "even": [(12, 0, "even")],
            "odd": [(7, 1, "odd"), (1, 2, "odd")]
        }
    }

def test_process_text_and_numbers_no_matches():
    text = "There are 11 apples and 13 oranges."
    numbers = [5, 6, 7]
    result = process_text_and_numbers(text, numbers)
    assert result == {
        "modified_text": "There are 11 apples and 13 oranges.",
        "parity_groups": {
            "even": [(6, 1, "even")],
            "odd": [(5, 0, "odd"), (7, 2, "odd")]
        }
    }

def test_process_text_and_numbers_all_replaced():
    text = "Numbers: 3 5 7 9."
    numbers = [3, 5, 7, 9]
    result = process_text_and_numbers(text, numbers)
    assert result == {
        "modified_text": "Numbers: FOUND FOUND FOUND FOUND.",
        "parity_groups": {
            "even": [],
            "odd": [(3, 0, "odd"), (5, 1, "odd"), (7, 2, "odd"), (9, 3, "odd")]
        }
    }
    
def test_empty_inputs():
    text = ""
    numbers = []
    result = process_text_and_numbers(text, numbers)
    assert result == {
        "modified_text": "",
        "parity_groups": {"even": [], "odd": []}
    }

def test_complex_digit_sequences():
    text = "123 and 4567 in sequence."
    numbers = [123, 45, 67]
    result = process_text_and_numbers(text, numbers)
    assert result == {
        "modified_text": "FOUND and 4567 in sequence.",
        "parity_groups": {
            "even": [],
            "odd": [(123, 0, "odd"), (45, 1, "odd"), (67, 2, "odd")]
        }
    }

``` 
<|Test End|>