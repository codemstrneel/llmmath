QUESTION

Write a Python function to check whether the given number can be represented as the product of any two Fibonacci numbers, which may or may not be distinct.

SOL & TESTS

<|Solution Begin|>```python
def is_product_of_fib(n):
    """
    Checks if the given number n can be represented as the product of
    any two Fibonacci numbers.

    Args:
    - n: a positive integer.

    Returns:
    - A boolean indicating whether n can be expressed as the product
      of two Fibonacci numbers.
    """
    if n < 0:
        return False

    # Generates Fibonacci numbers until they reach a certain range.
    fibs = [0, 1]
    while fibs[-1] <= n:
        fibs.append(fibs[-1] + fibs[-2])
    
    # For each pair of Fibonacci numbers, check if their product is n.
    for i in range(len(fibs)):
        for j in range(i, len(fibs)):
            if fibs[i] * fibs[j] == n:
                return True
            if fibs[i] * fibs[j] > n:
                break

    return False
```
<|Solution End|>

<|Test Begin|>```python
from solution import is_product_of_fib

def test_product_of_fib_true_cases():
    # Test cases that should return True
    assert is_product_of_fib(0) == True  # 0 = 0 * 0
    assert is_product_of_fib(1) == True  # 1 = 1 * 1
    assert is_product_of_fib(2) == True  # 2 = 1 * 2
    assert is_product_of_fib(3) == True  # 3 = 1 * 3
    assert is_product_of_fib(5) == True  # 5 = 1 * 5
    assert is_product_of_fib(8) == True  # 8 = 2 * 4
    assert is_product_of_fib(15) == True  # 15 = 3 * 5
    assert is_product_of_fib(21) == True  # 21 = 3 * 7 or 5 * 5

def test_product_of_fib_false_cases():
    # Test cases that should return False
    assert is_product_of_fib(4) == False
    assert is_product_of_fib(6) == False
    assert is_product_of_fib(7) == False
    assert is_product_of_fib(22) == False
    assert is_product_of_fib(45) == False

def test_large_number_true_case():
    assert is_product_of_fib(144) == True  # 144 = 12 * 12 or 8 * 18

def test_large_number_false_case():
    assert is_product_of_fib(200) == False
```
<|Test End|>