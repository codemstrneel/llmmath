QUESTION

Write a Python function that processes a list of tuples containing non-zero integers and a list of lists containing integers. The function should perform the following tasks:

1. Identify the longest sequence of tuples in which each tuple (x, y) can follow another tuple (u, v) if y > u, similar to finding the longest increasing subsequence in reverse order.
2. Within the identified longest sequence, each tuple (x, y) will determine indices to extract integers from the provided list of lists. From each list, extract only the integers located at positions corresponding to indices 'x' to 'y' inclusively.
3. Construct a new list of non-overlapping integer sequences by ensuring that for each tuple in the sequence, the extracted subsequences are continuous, and their sum should be even.
4. Return the list of these integer sequences while maintaining the relative order of the original tuples.

**Example Input:**
- Tuples: `[(1, 2), (3, 5), (6, 8)]`
- Lists: `[[5, 1, 3, 7, 1, 8], [4, 6, 7, 2, 3, 5], [8, 9, 2, 6, 4, 1]]`

**Expected Output:**
- List of non-overlapping integer sequences: `[[1, 3], [7, 1, 8], [9, 2]]`

Note: Each extracted sequence in the output should also ensure that the sum of its elements is even.

SOL & TESTS

<|Solution Begin|>
```python
def process_sequences(tuples, lists):
    def find_longest_valid_sequence(tuples):
        # find LIS like sequence in reverse
        n = len(tuples)
        longest = [1] * n
        prev = [-1] * n
        
        for i in range(n-1, -1, -1):
            for j in range(i+1, n):
                if tuples[i][1] > tuples[j][0] and longest[i] < longest[j] + 1:
                    longest[i] = longest[j] + 1
                    prev[i] = j
        
        # reconstruct the sequence
        max_len_idx = max(range(n), key=lambda i: longest[i])
        seq = []
        while max_len_idx != -1:
            seq.append(max_len_idx)
            max_len_idx = prev[max_len_idx]
        
        seq.reverse()
        return [tuples[i] for i in seq]
    
    def get_subsequence(lst, start, end):
        return lst[start:end+1]
    
    longest_sequence = find_longest_valid_sequence(tuples)
    result = []
    
    for t in longest_sequence:
        x, y = t
        for lst in lists:
            subseq = get_subsequence(lst, x, y)
            if sum(subseq) % 2 == 0:
                result.append(subseq)
                break  # move to next tuple after finding a valid subsequence
    
    return result
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_sequences

def test_process_sequences_example():
    tuples = [(1, 2), (3, 5), (6, 8)]
    lists = [[5, 1, 3, 7, 1, 8], [4, 6, 7, 2, 3, 5], [8, 9, 2, 6, 4, 1]]
    assert process_sequences(tuples, lists) == [[1, 3], [7, 1, 8], [9, 2]]

def test_process_sequences_empty_lists():
    tuples = [(1, 2)]
    lists = [[]]
    assert process_sequences(tuples, lists) == []

def test_process_sequences_no_valid_subsequence():
    tuples = [(0, 1)]
    lists = [[1, 1], [3, 5]]
    # No subsequence with even sum
    assert process_sequences(tuples, lists) == []

def test_process_sequences_single_tuple_multiple_lists():
    tuples = [(0, 1)]
    lists = [[2, 4], [1, 2]]
    assert process_sequences(tuples, lists) == [[2, 4]]

def test_process_sequences_multiple_valid_sequences():
    tuples = [(0, 1), (2, 3)]
    lists = [[2, 4, 3, 3], [1, 2, 4, 4]]
    # First list has two valid subsequences
    assert process_sequences(tuples, lists) == [[2, 4], [3, 3]]

def test_process_sequences_all_overlaps():
    tuples = [(0, 5), (0, 1), (3, 5)]
    lists = [[2, 4, 1, 3, 1, 4], [5, 1, 2, 3, 4, 6]]
    # The longest valid non-overlapping sequence
    assert process_sequences(tuples, lists) == [[2, 4, 1, 3, 1, 4]]

```
<|Test End|>