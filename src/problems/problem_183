QUESTION

Write a function to compute the value of nCr mod p, where both n and r can be very large, and p is a prime number. Also, ensure the function efficiently handles cases where n and r are in the order of 10^18.

SOL & TESTS

To compute the value of nCr mod p efficiently when n and r can be very large, and p is a prime number, we can use Lucas' Theorem. Lucas' Theorem allows us to compute binomial coefficients modulo a prime by breaking down the problem into smaller parts. Let's implement the solution in Python.

<|Solution Begin|>
```python
def modular_exponentiation(base, exp, mod):
    result = 1
    while exp > 0:
        if exp % 2 == 1:
            result = (result * base) % mod
        base = (base * base) % mod
        exp = exp // 2
    return result

def modular_inverse(a, mod):
    return modular_exponentiation(a, mod - 2, mod)

def nCr_mod_p(n, r, p):
    if r > n:
        return 0

    res = 1
    while n > 0 or r > 0:
        n_mod = n % p
        r_mod = r % p

        if r_mod > n_mod:
            return 0

        num = 1
        den = 1
        for i in range(r_mod):
            num = (num * (n_mod - i)) % p
            den = (den * (i + 1)) % p

        res = (res * num % p) * modular_inverse(den, p) % p

        n //= p
        r //= p

    return res
```
<|Solution End|>

<|Test Begin|>
```python
def test_nCr_mod_p():
    # Simple cases
    assert nCr_mod_p(5, 2, 13) == 10
    assert nCr_mod_p(5, 5, 13) == 1
    assert nCr_mod_p(5, 0, 13) == 1
    
    # Edge case: n < r
    assert nCr_mod_p(3, 5, 13) == 0
    
    # Larger cases modulo small prime
    assert nCr_mod_p(10**18, 10**18 // 2, 13) == 1
    assert nCr_mod_p(10**18, 0, 13) == 1
    assert nCr_mod_p(10**18, 1, 13) == 10**18 % 13
    
    # Edge case: both n and r are zero
    assert nCr_mod_p(0, 0, 13) == 1

    # Larger cases modulo large prime
    assert nCr_mod_p(1000, 3, 1000003) == 166167000
    assert nCr_mod_p(1000, 998, 1000003) == 166167000

# Since pytest won't run unless called directly, the below lines should be part of a test suite, and usually not
# run manually within a script like this. However, for interactive environments, remove the comment to execute them:
# if __name__ == "__main__":
#     test_nCr_mod_p()
```
<|Test End|>

This solution calculates the binomial coefficient `nCr % p` using modular arithmetic, making it efficient even for very large values of `n` and `r`. The unit tests cover various edge cases and scenarios to ensure correctness.