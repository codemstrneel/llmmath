QUESTION

Write a function to sort the given array in place without using any sorting algorithm. The given array consists of only 0, 1, and 2. Additionally, ensure that the function performs this task in a single pass through the array.

SOL & TESTS

To solve the problem of sorting an array consisting of only 0, 1, and 2 in a single pass, we can utilize the Dutch National Flag algorithm. This works by dividing the array into three sections: one for 0's, one for 1's, and one for 2's. We'll use three pointers to carry out the sorting in one pass.

Here's the solution and unit tests:

<|Solution Begin|>
```python
def sort_colors(nums):
    """
    Given an array nums with n objects colored red, white, or blue, sort them in-place so that 
    objects of the same color are adjacent, with the colors in the order red, white, and blue.
    Use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

    Modifies nums in-place without returning anything.
    """
    low, mid, high = 0, 0, len(nums) - 1
    
    while mid <= high:
        if nums[mid] == 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 1:
            mid += 1
        else:
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1
```
<|Solution End|>

<|Test Begin|>
```python
def test_sort_colors():
    arr1 = [2, 0, 1, 2, 1, 0]
    sort_colors(arr1)
    assert arr1 == [0, 0, 1, 1, 2, 2]

    arr2 = [0, 0, 0, 0]
    sort_colors(arr2)
    assert arr2 == [0, 0, 0, 0]
    
    arr3 = [2, 2, 2, 2]
    sort_colors(arr3)
    assert arr3 == [2, 2, 2, 2]

    arr4 = [1, 0, 2, 1, 2, 0, 1, 2]
    sort_colors(arr4)
    assert arr4 == [0, 0, 1, 1, 1, 2, 2, 2]
    
    arr5 = [2, 1, 0]
    sort_colors(arr5)
    assert arr5 == [0, 1, 2]
    
    arr6 = []
    sort_colors(arr6)
    assert arr6 == []
```
<|Test End|>