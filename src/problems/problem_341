QUESTION

Create a Python function that accepts a list of tuples. Each tuple contains a mixed data structure: a list of strings and a floating-point number. The function should perform the following tasks:

1. For each tuple, identify the characters that appear more than once across all strings in the list and sort these characters in descending order of their frequency, then alphabetically for characters with the same frequency.

2. Calculate the total number of vowel occurrences in all strings for each tuple, ignoring case sensitivity.

3. Sort all tuples primarily by the length of the list of duplicate characters identified in step 1 in ascending order. If two tuples have the same length of duplicate list, sort by the vowel count calculated in step 2 in descending order.

4. Use a heap queue algorithm to extract the n tuples with the smallest floating-point values from the sorted list.

5. For the extracted n tuples, generate a concatenated list of all identified duplicate characters and return this list paired with the Chinese zodiac sign of the year derived from the integer part of the floating-point number in each tuple.

SOL & TESTS

<|Solution Begin|>
```python
from collections import Counter
import heapq

def get_duplicate_characters(strings):
    char_count = Counter()
    for string in strings:
        char_count.update(string.lower())
    duplicates = [char for char, count in char_count.items() if count > 1]
    duplicates.sort(key=lambda x: (-char_count[x], x))
    return duplicates

def count_vowels(strings):
    vowels = 'aeiou'
    count = 0
    for string in strings:
        count += sum(1 for char in string.lower() if char in vowels)
    return count

def chinese_zodiac(year):
    signs = [
        "Monkey", "Rooster", "Dog", "Pig", "Rat", "Ox", "Tiger", 
        "Rabbit", "Dragon", "Snake", "Horse", "Goat"
    ]
    return signs[year % 12]

def process_tuples(tuples, n):
    processed_tuples = []
    for (strings, number) in tuples:
        duplicates = get_duplicate_characters(strings)
        vowels_count = count_vowels(strings)
        processed_tuples.append((duplicates, vowels_count, number))

    processed_tuples.sort(
        key=lambda x: (len(x[0]), -x[1])
    )

    smallest_n_tuples = heapq.nsmallest(n, processed_tuples, key=lambda x: x[2])
    
    concatenated_duplicates = []
    zodiac_signs = []
    for (duplicates, _, number) in smallest_n_tuples:
        concatenated_duplicates.extend(duplicates)
        zodiac_signs.append(chinese_zodiac(int(number)))

    return concatenated_duplicates, zodiac_signs
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_tuples

def test_process_tuples_basic():
    tuples = [(["apple", "parrot"], 2023.5), (["banana"], 2011.3)]
    result, zodiac = process_tuples(tuples, 1)
    assert result == ['a']
    assert zodiac == ['Rabbit']

def test_process_tuples_multiple_duplicates():
    tuples = [(["pepper", "read", "pedal"], 2023.5), (["bubble"], 2009.4)]
    result, zodiac = process_tuples(tuples, 1)
    assert result == ['p', 'e']
    assert zodiac == ['Ox']

def test_process_tuples_vowel_tie():
    tuples = [(["lake", "bake"], 2001.1), (["make", "cake"], 1999.5)]
    result, zodiac = process_tuples(tuples, 1)
    assert result == ['a', 'k', 'e']
    assert zodiac == ['Rabbit']

def test_process_tuples_no_duplicates():
    tuples = [(["zebra", "queen"], 2025.2)]
    result, zodiac = process_tuples(tuples, 1)
    assert result == []
    assert zodiac == ['Snake']

def test_process_tuples_multiple_extract():
    tuples = [
        (["zebra", "bee"], 2021.9),
        (["queen", "bee"], 2023.1),
        (["apple"], 2003.8)
    ]
    result, zodiac = process_tuples(tuples, 2)
    assert result == ['e', 'a']
    assert zodiac == ['Rabbit', 'Horse']
```
<|Test End|>