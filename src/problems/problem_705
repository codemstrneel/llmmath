QUESTION

Create a Python function that combines duplicate word removal and zero movement. Given a list of strings, the function should first remove duplicate words within each string and then move any word containing the string "zero" to the end of the list. Finally, return the modified list of strings.

For instance, given the list `["hello zero world zero", "zero something zero else", "another zero test"]`, the function should return `["hello world", "something else", "another test zero zero zero"]`.

SOL & TESTS

```python
def process_strings(strings):
    def remove_duplicates_and_sort_zeros(s):
        words = s.split()
        seen_words = set()
        filtered_words = []

        # Remove duplicates
        for word in words:
            if word not in seen_words:
                seen_words.add(word)
                filtered_words.append(word)

        # Separate words that contain "zero"
        normal_words = [word for word in filtered_words if "zero" not in word]
        zero_words = [word for word in filtered_words if "zero" in word]

        # Concatenate words, placing zero-words at the end
        return " ".join(normal_words + zero_words)

    # Apply the operation to each string in the list
    return [remove_duplicates_and_sort_zeros(s) for s in strings]
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_strings

def test_basic_case():
    input_list = ["hello zero world zero", "zero something zero else", "another zero test"]
    assert process_strings(input_list) == ["hello world", "something else", "another test zero zero zero"]

def test_no_zeros():
    input_list = ["hello world", "something else", "another test"]
    assert process_strings(input_list) == ["hello world", "something else", "another test"]

def test_empty_strings():
    input_list = ["", "", ""]
    assert process_strings(input_list) == ["", "", ""]

def test_all_zeros():
    input_list = ["zero zero zero", "zero word zero", "zero zero zero zero"]
    assert process_strings(input_list) == ["zero", "word zero", "zero zero zero"]

def test_duplicate_words():
    input_list = ["repeat repeat the the words", "zero zero nine nine zero", "no zero here here"]
    assert process_strings(input_list) == ["repeat the words", "nine zero zero zero", "no here"]

def test_mixed_strings():
    input_list = ["zero start", "middle zero here", "end zero"]
    assert process_strings(input_list) == ["start zero", "middle here zero", "end zero"]
```
<|Test End|>