QUESTION

Write a Python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign, verify if the coefficients a, b, and c form an arithmetic sequence, and ensure that the sum of the coefficients is a perfect square.

SOL & TESTS

```markdown
<|Solution Begin|> 
```python
import math

def check_quadratic_properties(a, b, c):
    """
    Checks whether:
    1. The roots of the quadratic equation ax^2 + bx + c = 0 are numerically equal but opposite in sign.
    2. The coefficients a, b, and c form an arithmetic sequence.
    3. The sum of the coefficients is a perfect square.
    
    Returns True if all conditions are met, else False.
    """
    if a == 0:
        return False

    # Check if the roots are numerically equal but opposite in sign
    discriminant = b**2 - 4*a*c
    if discriminant != 0:
        return False
    
    # Check if a, b, c form an arithmetic sequence
    if (b - a) != (c - b):
        return False
    
    # Check if the sum of coefficients is a perfect square
    sum_of_coeffs = a + b + c
    sqrt_sum = math.isqrt(sum_of_coeffs)
    if sqrt_sum * sqrt_sum != sum_of_coeffs:
        return False
    
    return True
```
<|Solution End|>

<|Test Begin|>
```python
from solution import check_quadratic_properties

def test_perfect_arithmetic_roots():
    # roots = Â±1, sequence: 1, 2, 3, sum is 6 (not a perfect square)
    assert not check_quadratic_properties(1, 2, 3)

def test_not_arithmetic_sequence():
    # coefficients: 1, 1, 1 (not an arithmetic sequence), sum is a perfect square 3
    assert not check_quadratic_properties(1, 1, 1)

def test_roots_not_opposite():
    # coefficients: 1, -4, 4 (roots are not numerically equal and opposite)
    assert not check_quadratic_properties(1, -4, 4)

def test_all_conditions_true():
    # coefficients: 1, 4, 9
    assert check_quadratic_properties(1, 1, 1)

def test_non_square_sum():
    # coefficients leading to non-perfect square sum: 2, 4, 6 (sum is 12)
    assert not check_quadratic_properties(2, 4, 6)

def test_non_quadratic():
    # Non quadratic (a=0)
    assert not check_quadratic_properties(0, 1, 2)
```
<|Test End|>
```