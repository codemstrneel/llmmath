QUESTION

Write a Python function that takes a list of integers and performs the following operations:

1. Convert the list into a tuple and sort it in ascending order.
2. Determine all possible subarrays of this sorted tuple. For each subarray, calculate the product of its elements.
3. Collect the products of all subarrays into a list and then split this list into chunks of size `n`, where `n` is an additional parameter provided to the function.
4. Return the list of chunked products as well as a dictionary that counts how many times each product appears across all subarrays.

This exercise combines the concepts of subarray product calculations, chunking of data into specified sizes, sorting operations on tuples, and counting the frequency of elements in a collection.

SOL & TESTS

```python
<|Solution Begin|>
def subarray_products_and_chunked_list(nums, n):
    from collections import defaultdict
    from itertools import combinations

    # Convert the list of numbers to a tuple and sort it
    sorted_tuple = tuple(sorted(nums))

    # Generate all subarrays and calculate their products
    product_counts = defaultdict(int)
    products = []

    for length in range(1, len(sorted_tuple) + 1):
        for subarray in combinations(sorted_tuple, length):
            product = 1
            for num in subarray:
                product *= num
            products.append(product)
            product_counts[product] += 1

    # Chunk the products list into parts of size n
    chunked_products = [products[i:i + n] for i in range(0, len(products), n)]

    return chunked_products, dict(product_counts)
<|Solution End|>
```

```python
<|Test Begin|>
from solution import subarray_products_and_chunked_list

def test_subarray_products_and_chunked_list_small():
    # For list [2, 1] and n = 2
    expected_chunks = [[1, 2, 2, 2], [4]]
    expected_counts = {1: 1, 2: 3, 4: 1}
    assert subarray_products_and_chunked_list([2, 1], 2) == (expected_chunks, expected_counts)

def test_subarray_products_empty_list():
    # Test empty list input
    expected_chunks = []
    expected_counts = {}
    assert subarray_products_and_chunked_list([], 3) == (expected_chunks, expected_counts)

def test_subarray_products_and_chunked_list_large():
    # For list [1, 2, 3] and n = 3
    expected_chunks = [[1, 2, 3, 2, 6, 3, 6], [6]]
    expected_counts = {1: 1, 2: 2, 3: 2, 6: 3}
    assert subarray_products_and_chunked_list([3, 1, 2], 3) == (expected_chunks, expected_counts)

def test_subarray_products_single_element():
    # For single element list [5] and n = 1
    expected_chunks = [[5]]
    expected_counts = {5: 1}
    assert subarray_products_and_chunked_list([5], 1) == (expected_chunks, expected_counts)

def test_subarray_products_multiple_same_elements():
    # For list [2, 2, 2] with n = 3
    expected_chunks = [[2, 2, 4, 2], [4, 4, 8, 8], [8]]
    expected_counts = {2: 3, 4: 3, 8: 3}
    assert subarray_products_and_chunked_list([2, 2, 2], 3) == (expected_chunks, expected_counts)
<|Test End|>
```