QUESTION

**New Question:**

Create a Python function that takes three arguments:

1. A string containing multiple sentences.
2. A list of strings.
3. A list of integers.

The function should execute the following tasks, integrating concepts from the given questions:

1. **String Analysis:**
   - Normalize the input string by replacing sequences of consecutive duplicate vowels with a single vowel (e.g., "seeeea" becomes "sea").
   - Identify the most frequently occurring word pair (two consecutive words) in the text and the frequency of their occurrences.

2. **Integer Analysis:**
   - Create a list of tuples for each prime number in the list of integers. Each tuple should contain:
     - The prime number.
     - The index range (difference between maximum and minimum indices where this prime number appears).
     - The frequency of consecutive occurrences of this prime number.
   
3. **List of Strings Analysis:**
   - Remove duplicate words from each string in the list of strings, preserving the order of their first occurrences.
   - Filter strings to only include those starting with a vowel after normalization.
   - Identify the second most frequent starting letter from the filtered list of strings and return `None` if it does not exist.

4. **Combined Analysis:**
   - Calculate the sum of ASCII values of all characters in the original string that are preceded by a space character.

The function should return a tuple with four elements:

- A dictionary containing the most frequent word pair in the string and their frequency.
- A list of tuples as described for the prime numbers.
- The second most frequent starting letter from the filtered list of strings or `None`.
- The sum of ASCII values of characters in the original string that are preceded by a space.

```python
def analyze_data(text, list_of_strings, list_of_integers):
    # Implementation here
    pass
```

This question combines string normalization techniques, detection of word pair frequency in text, handling and analyzing lists of integers with respect to prime numbers, deduplication and filtering of lists of strings, and ASCII value calculations, integrating aspects from multiple aspects of the given coding tasks.

SOL & TESTS

```python
import re
from collections import Counter, defaultdict
from itertools import islice

def analyze_data(text, list_of_strings, list_of_integers):
    def normalize_vowels(s):
        """ Replace sequences of consecutive duplicate vowels with a single vowel. """
        return re.sub(r'([aeiou])\1+', r'\1', s, flags=re.IGNORECASE)
    
    def most_frequent_word_pair(s):
        """ Find the most frequently occurring word pair in `s`. """
        words = re.findall(r'\b\w+\b', s.lower())
        pairs = zip(words, islice(words, 1, None))
        pair_counts = Counter(pairs)
        most_common = pair_counts.most_common(1)
        return dict(most_common)
    
    def is_prime(n):
        """ Check if a number is prime. """
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True
    
    def analyze_integers(nums):
        """ Analyze list of integers for prime number information. """
        prime_info = []
        index_map = defaultdict(list)
        
        for index, number in enumerate(nums):
            if is_prime(number):
                index_map[number].append(index)
        
        for prime, indices in index_map.items():
            max_index = max(indices)
            min_index = min(indices)
            index_range = max_index - min_index
            # Calculate frequency of consecutive occurrences
            count = 0
            max_count = 0
            for i in range(1, len(indices)):
                if indices[i] == indices[i-1] + 1:
                    count += 1
                    max_count = max(max_count, count)
                else:
                    count = 0
            prime_info.append((prime, index_range, max_count + 1))
        
        return prime_info
    
    def analyze_strings(strings):
        """ Remove duplicate words and find the second most frequent starting letter. """
        filtered_strings = []
        start_letters = Counter()
        
        for string in strings:
            normalized = normalize_vowels(string)
            words = normalized.split()
            seen = set()
            deduped = [word for word in words if not (word in seen or seen.add(word))]
            if deduped and re.match(r'^[aeiou]', deduped[0], re.IGNORECASE):
                filtered_strings.append(' '.join(deduped))
                start_letters.update(deduped[0][0].lower())
        
        # Find second most frequent starting letter
        most_common = start_letters.most_common(2)
        
        return most_common[1][0] if len(most_common) > 1 else None
    
    def ascii_sum_for_space_preceded_chars(s):
        """ Calculate the sum of ASCII values of all characters in the string preceded by a space. """
        return sum(ord(s[i]) for i in range(1, len(s)) if s[i-1] == ' ')

    # Execute analyses
    text_normalized = normalize_vowels(text)
    
    word_pair_info = most_frequent_word_pair(text_normalized)
    prime_info = analyze_integers(list_of_integers)
    second_most_frequent_start_letter = analyze_strings(list_of_strings)
    ascii_value_sum = ascii_sum_for_space_preceded_chars(text)
    
    return word_pair_info, prime_info, second_most_frequent_start_letter, ascii_value_sum
```
<|Solution End|>

<|Test Begin|>
```python
from solution import analyze_data

def test_string_analysis():
    text = "See see sea sea sea. Sea eee sea!"
    list_of_strings = ["see sea sea", "aaa apple apricot", "kiwi island", "umbrella"]
    list_of_integers = [11, 23, 5, 17, 17, 17, 19, 23, 11]
    
    result = analyze_data(text, list_of_strings, list_of_integers)
    word_pair_info, prime_info, second_most_frequent_start_letter, ascii_value_sum = result
    
    assert word_pair_info == {('sea', 'sea'): 3}
    assert prime_info == [(11, 4, 1), (23, 5, 1), (5, 0, 1), (17, 2, 3), (19, 0, 1)]
    assert second_most_frequent_start_letter == 'a'
    assert ascii_value_sum == 521  # ' ' precedes 's', 's', 'e'

def test_empty_text():
    text = ""
    list_of_strings = ["apple apricot", "umbrella", "island"]
    list_of_integers = [2, 3, 5, 7]
    
    result = analyze_data(text, list_of_strings, list_of_integers)
    word_pair_info, prime_info, second_most_frequent_start_letter, ascii_value_sum = result
    
    assert word_pair_info == {}
    assert prime_info == [(2, 0, 1), (3, 0, 1), (5, 0, 1), (7, 0, 1)]
    assert second_most_frequent_start_letter == 'i'
    assert ascii_value_sum == 0

def test_no_vowel_starting_strings():
    text = "Testing vowel."
    list_of_strings = ["banana", "cherry", "dog"]
    list_of_integers = [4, 6, 8, 9]
    
    result = analyze_data(text, list_of_strings, list_of_integers)
    word_pair_info, prime_info, second_most_frequent_start_letter, ascii_value_sum = result
    
    assert word_pair_info == {}
    assert prime_info == []
    assert second_most_frequent_start_letter == None
    assert ascii_value_sum == 116  # 'T' in position 'esting'

def test_no_primes():
    text = "Silly students."
    list_of_strings = ["island plane", "apple apricot"]
    list_of_integers = [1, 4, 6, 8, 12]
    
    result = analyze_data(text, list_of_strings, list_of_integers)
    word_pair_info, prime_info, second_most_frequent_start_letter, ascii_value_sum = result
    
    assert word_pair_info == {('silly', 'students'): 1}
    assert prime_info == []
    assert second_most_frequent_start_letter == 'p'
    assert ascii_value_sum == 210
```
<|Test End|>