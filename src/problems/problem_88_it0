QUESTION

Write a function that, given a list of integers, identifies the position of the rightmost set bit in each integer and rotates the list to the right by the average of these positions. Ensure the function handles both negative and positive rotation values and can process lists containing nested sublists of arbitrary depth.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst):
    def rightmost_set_bit_position(num):
        """
        Returns the position (zero-indexed) of the rightmost set bit of an integer num.
        If the number is zero, returns -1 since there are no set bits.
        """
        if num == 0:
            return -1
        position = 0
        while num & (1 << position) == 0:
            position += 1
        return position
    
    def flatten(lst):
        """
        Flattens a nested list structure into a single list of integers.
        """
        flattened = []
        for item in lst:
            if isinstance(item, list):
                flattened.extend(flatten(item))
            else:
                flattened.append(item)
        return flattened

    def rotate_list_right(lst, k):
        """
        Rotates lst to the right by k steps.
        """
        n = len(lst)
        if n == 0:
            return lst
        k %= n
        return lst[-k:] + lst[:-k]

    flat_list = flatten(lst)
    set_bit_positions = [rightmost_set_bit_position(num) for num in flat_list if num != 0]
    
    if not set_bit_positions:
        average_position = 0
    else:
        average_position = sum(set_bit_positions) / len(set_bit_positions)
    
    # If the average is not an integer, we consider the integer part (floor)
    average_position = int(average_position)

    # Rotate the original list by the average position
    rotated_list = rotate_list_right(flat_list, average_position)
    return rotated_list
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_empty_list():
    assert solution([]) == []

def test_single_element_list():
    assert solution([1]) == [1]
    assert solution([0]) == [0]
    assert solution([2]) == [2]

def test_multiple_elements_no_rotation():
    assert solution([0, 0, 0]) == [0, 0, 0]  # No set bits, no rotation

def test_single_level_list():
    assert solution([2, 4, 8, 16]) == [16, 2, 4, 8]
    assert solution([3, 5, 7]) == [5, 7, 3]  # Positions: [0, 0, 0] -> Average: 0, rotation by 0

def test_nested_list():
    assert solution([1, [2, 4], 8, [16, 32], []]) == [8, 16, 32, 1, 2, 4]
    assert solution([[5], [], [3, 7], [15], [1]]) == [7, 15, 1, 5, 3]

def test_mixed_sign_numbers():
    assert solution([1, -2, -4, 8]) == [8, 1, -2, -4]  # Positions: [0, 1, 2, 3] -> Average: 1, rotate by 1
    assert solution([-3, -4, 0, 3, 5]) == [0, 3, 5, -3, -4]  # Rotation by 2

def test_all_zero():
    assert solution([0, 0, 0, 0]) == [0, 0, 0, 0]

def test_all_non_zero_same_position():
    assert solution([1, 3, 5]) == [1, 3, 5]  # All numbers have the rightmost set bit at position 0, no rotation

def test_large_numbers():
    assert solution([1024, 2048, 4096]) == [4096, 1024, 2048]
<|Test End|>