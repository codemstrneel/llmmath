QUESTION

Write a Python function that first checks if two given lists contain the same odd numbers as factors for their respective elements using a map function. Then, sort each list using heap sort and return the sorted lists along with the original count of matching odd factors.

SOLUTION/TESTS

## Solution:
To solve the problem, we'll implement a solution that consists of two parts:

1. **Check for Matching Odd Factors**: For each element in the lists, check if they share the same set of odd factors (as defined by the problem).

2. **Heap Sort the Lists**: This will involve sorting the elements of each list using the heap sort algorithm.

The output of the solution will be the two sorted lists and the original count of matching odd factors.

### Functions Breakdown

- **get_odd_factors**: This function will extract odd factors of a number.
  
- **solution**: Will implement the checking for matching odd factors, sort both lists with heap sort, and return the results.

### Final Code

```python
<|Solution Begin|>
from typing import List, Tuple
import heapq

def get_odd_factors(n: int) -> List[int]:
    """Returns a list of odd factors of the given number."""
    return [i for i in range(1, n + 1, 2) if n % i == 0]

def solution(list1: List[int], list2: List[int]) -> Tuple[List[int], List[int], int]:
    count_matching_odd_factors = 0
    
    # Check for matching odd factors
    for x, y in zip(list1, list2):
        if set(get_odd_factors(x)) == set(get_odd_factors(y)):
            count_matching_odd_factors += 1

    # Sorting using heap sort
    sorted_list1 = heapq.nsmallest(len(list1), list1)
    sorted_list2 = heapq.nsmallest(len(list2), list2)
    
    return sorted_list1, sorted_list2, count_matching_odd_factors
<|Solution End|>
```

## Unit Tests
The tests will cover various cases to ensure everything is functioning:

- Lists with different sets of elements.
- Edge cases like empty lists, lists with identical elements.
- Confirming returned sorted lists.

```python
<|Test Begin|>
from solution import solution

def test_matching_odd_factors():
    list1 = [9, 15, 27]
    list2 = [3, 45, 81]
    sorted_list1, sorted_list2, count = solution(list1, list2)
    assert sorted_list1 == sorted(list1)
    assert sorted_list2 == sorted(list2)
    assert count == 2  # 9, 27 have the same odd factors as 81 and 45 respectively

def test_no_matching_odd_factors():
    list1 = [10, 20, 30]
    list2 = [1, 3, 5]
    _, _, count = solution(list1, list2)
    assert count == 0

def test_empty_lists():
    list1 = []
    list2 = []
    sorted_list1, sorted_list2, count = solution(list1, list2)
    assert sorted_list1 == []
    assert sorted_list2 == []
    assert count == 0

def test_with_identical_elements():
    list1 = [7, 7, 7]
    list2 = [7, 7, 7]
    sorted_list1, sorted_list2, count = solution(list1, list2)
    assert sorted_list1 == sorted(list1)
    assert sorted_list2 == sorted(list2)
    assert count == 3

def test_different_lengths():
    list1 = [9, 18, 27, 36]
    list2 = [3, 9, 45]
    sorted_list1, sorted_list2, count = solution(list1, list2)
    assert sorted_list1 == sorted(list1)
    assert sorted_list2 == sorted(list2)
    assert count == 0  # As only pairs with same index are considered

def test_all_numbers_are_odd():
    list1 = [1, 3, 5, 7]
    list2 = [11, 3, 5, 7]
    sorted_list1, sorted_list2, count = solution(list1, list2)
    assert sorted_list1 == sorted(list1)
    assert sorted_list2 == sorted(list2)
    assert count == 3  # (3,3), (5,5), (7,7) have the same odd factors
<|Test End|>
```