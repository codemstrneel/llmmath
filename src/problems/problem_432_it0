QUESTION

Write a function that takes as input a list of integers and a list of tuples, where each tuple contains keys, and possibly None elements. The function should:

1. Use a lambda function to filter out numbers from the list of integers that are divisible by at least one of the valid integer keys (ignoring any None values) present in any of the tuples.
2. For the filtered numbers, calculate the frequency of each number and return the two numbers with the highest frequencies, in descending order of their frequencies. In case of a tie, return the numbers in ascending numerical order.

The solution should handle lists of differing lengths and tuples with None values appropriately.

SOLUTION/TESTS

<|Solution Begin|>
def solution(integers, tuples):
    # Extract all valid (non-None) integers from the tuples
    valid_keys = {key for t in tuples for key in t if key is not None}
    
    # Filter numbers from the list of integers that are divisible by at least one of the valid keys
    filtered_numbers = list(filter(lambda x: any(x % key == 0 for key in valid_keys), integers))
    
    # Calculate the frequency of each filtered number
    from collections import Counter
    number_frequencies = Counter(filtered_numbers)
    
    # Sort based on frequency first (highest first), then by number (lowest first)
    sorted_by_frequency = sorted(number_frequencies.items(), key=lambda x: (-x[1], x[0]))
    
    # Retrieve numbers with the two highest frequencies
    result = [number for number, frequency in sorted_by_frequency[:2]]
    
    return result
<|Solution End|>

<|Test Begin|>
def test_sample_case():
    assert solution(
        [12, 15, 18, 21, 25, 30, 3], [(3, None), (5,)]
    ) == [15, 3]

def test_no_valid_keys():
    assert solution(
        [10, 20, 30], [(None, None)]
    ) == []

def test_all_same_frequency():
    assert solution(
        [6, 11, 14, 18, 30], [(3,), (None,)]
    ) == [6, 18]  # Both 6 and 18 occur once but they come first alphabetically.

def test_handling_none_keys():
    assert solution(
        [50, 100, 150, 200, 250], [(None, 5), (None, 2)]
    ) == [50, 100]

def test_empty_input_list():
    assert solution([], [(2, 3)]) == []

def test_single_element():
    assert solution([7], [(None, 7)]) == [7]

def test_no_division():
    assert solution([1, 2, 3], [(4,), (5,)]) == []

def test_repeated_elements():
    assert solution([4, 4, 6, 6, 6, 8, 8, 10, 10, 10, 10], [(2, None)]) == [10, 6]
<|Test End|>