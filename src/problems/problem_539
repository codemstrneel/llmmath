QUESTION

Create a Python function that takes in a list of three distinct integers and a string. The function should first determine the minimum of the three integers. Then, using this minimum value as a rotation key, left rotate the bits of the ASCII values of each character in the input string by the minimum value, and return the newly formed string composed of these rotated ASCII characters. Ensure that the function handles both positive and negative integers correctly for the bit rotation process.

SOL & TESTS

<|Solution Begin|> 
```python
def left_rotate_bits(value, rotate_by):
    """
    Rotates the bits of the input value to the left by rotate_by positions.
    """
    bits = 8  # Using 8 bits for ASCII character representation
    rotate_by = rotate_by % bits
    return ((value << rotate_by) & 0xFF) | ((value >> (bits - rotate_by)) & 0xFF)

def rotate_string_with_minimum(values, input_string):
    """
    Given a list of three distinct integers, this function determines the minimum integer
    and left rotates the ASCII values of each character in the input string by the minimum integer.
    """
    if len(values) != 3 or len(set(values)) != 3:
        raise ValueError("List must contain three distinct integers.")

    min_value = min(values)
    rotated_chars = [
        chr(left_rotate_bits(ord(char), min_value)) for char in input_string
    ]
    return ''.join(rotated_chars)
```
<|Solution End|>

<|Test Begin|>
```python
import pytest
from solution import rotate_string_with_minimum

def test_rotate_string_with_minimum_positive_nums():
    assert rotate_string_with_minimum([3, 1, 4], "abc") == "bfk"
    assert rotate_string_with_minimum([7, 3, 5], "xyz") == "\xd8\xcc\xda"

def test_rotate_string_with_minimum_includes_negative():
    assert rotate_string_with_minimum([-1, 0, 1], "abc") == "bcd"
    assert rotate_string_with_minimum([-2, 2, 1], "123") == "\xc8\xac\xa8"

def test_single_character_string():
    assert rotate_string_with_minimum([5, 3, 8], "a") == " "
    assert rotate_string_with_minimum([2, 0, 4], "Z") == "O"

def test_string_with_special_characters():
    assert rotate_string_with_minimum([3, 11, 7], "!@#") == "~9("
    assert rotate_string_with_minimum([1, 3, 5], "A&B") == "C'D"

def test_raises_with_invalid_length():
    with pytest.raises(ValueError):
        rotate_string_with_minimum([3, 5], "abc")
    with pytest.raises(ValueError):
        rotate_string_with_minimum([4, 4, 4], "def")

def test_empty_string():
    assert rotate_string_with_minimum([2, 0, 9], "") == ""
```
<|Test End|>