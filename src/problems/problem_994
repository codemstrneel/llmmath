QUESTION

### New Question:

Create a Python function `complex_tuple_analysis` that takes a list of tuples. Each tuple contains four elements: a year, a list of integers, a list of strings, and another year. The function should perform the following tasks:

1. Determine the tuple where the sum of the first and fourth year is a multiple of the largest number from the tuple's list of integers.
2. Use a lambda function and reduce to find the maximum number that can be formed by concatenating all strings in the tuple's list of strings.
3. For each list of integers in the tuples, count how many numbers are perfect squares (like 1, 4, 9, 16, etc.).
4. Calculate the percentage of these perfect square numbers relative to the total number of integers in that list.
5. Return a dictionary where keys are the indices of the tuples (within the input list), and values are dictionaries containing:
   - A boolean indicating whether the tuple's years sum to a multiple of the tuple's maximum integer.
   - The largest number that can be formed by concatenating the strings in the tuple.
   - The count of perfect square numbers from that tuple's integers.
   - The percentage of perfect square numbers relative to the integer list size.

Make sure your function efficiently handles cases where lists are empty or contain `None`, ensuring operations are performed only on valid elements. Consider optimizing for large lists by minimizing redundant operations and using built-in functions where appropriate.

SOL & TESTS

```python
from functools import reduce
import math

def complex_tuple_analysis(tuples):
    def is_perfect_square(number):
        root = math.isqrt(number)
        return root * root == number

    result = {}
    
    for index, (year1, int_list, str_list, year2) in enumerate(tuples):
        # Skip processing if int_list or str_list are None
        if int_list is None:
            int_list = []
        if str_list is None:
            str_list = []

        # Task 1: Determine the tuple where the sum of the first and fourth year 
        # is a multiple of the largest number from the tuple's list of integers
        year_sum = year1 + year2
        max_integer = max(int_list) if int_list else 0
        is_sum_multiple = (max_integer != 0 and year_sum % max_integer == 0)

        # Task 2: Find the maximum number that can be formed by concatenating strings
        largest_number_from_strings = reduce(lambda acc, x: acc + x, sorted(str_list, reverse=True), '')

        # Task 3: Count how many numbers are perfect squares
        perfect_square_count = sum(1 for num in int_list if is_perfect_square(num))

        # Task 4: Calculate the percentage of these perfect square numbers
        total_ints = len(int_list)
        perfect_square_percentage = (perfect_square_count / total_ints * 100) if total_ints > 0 else 0

        # Compile results for current tuple
        result[index] = {
            'is_sum_of_years_multiple': is_sum_multiple,
            'largest_number_from_strings': largest_number_from_strings,
            'perfect_square_count': perfect_square_count,
            'perfect_square_percentage': perfect_square_percentage
        }

    return result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import complex_tuple_analysis

def test_basic_case():
    tuples = [
        (1990, [1, 4, 5, 6], ['3', '34', '30', '5'], 2000),  # 1990+2000=3990, max=6, 3990%6==0
        (1950, [10, 25, 36], ['9', '8', '45', '23'], 2000)   # 1950+2000=3950, max=36, 3950%36!=0
    ]
    result = complex_tuple_analysis(tuples)
    assert result[0]['is_sum_of_years_multiple'] == True
    assert result[0]['largest_number_from_strings'] == '534330'
    assert result[0]['perfect_square_count'] == 2
    assert result[0]['perfect_square_percentage'] == 50
    assert result[1]['is_sum_of_years_multiple'] == False
    assert result[1]['largest_number_from_strings'] == '984523'
    assert result[1]['perfect_square_count'] == 2
    assert result[1]['perfect_square_percentage'] == 66.66666666666667

def test_no_integers():
    tuples = [
        (1990, [], ['1'], 2000)
    ]
    result = complex_tuple_analysis(tuples)
    assert result[0]['is_sum_of_years_multiple'] == False
    assert result[0]['largest_number_from_strings'] == '1'
    assert result[0]['perfect_square_count'] == 0
    assert result[0]['perfect_square_percentage'] == 0

def test_no_strings():
    tuples = [
        (1990, [16, 9, 25], [], 2000)
    ]
    result = complex_tuple_analysis(tuples)
    assert result[0]['is_sum_of_years_multiple'] == False
    assert result[0]['largest_number_from_strings'] == ''
    assert result[0]['perfect_square_count'] == 3
    assert result[0]['perfect_square_percentage'] == 100

def test_empty_tuple_lists():
    assert complex_tuple_analysis([]) == {}
```
<|Test End|>