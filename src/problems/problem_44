QUESTION

New Question: Write a function to get dictionary keys as a list, also ensure that the keys are returned in order of their corresponding values sorted in descending order.

SOLUTION/TESTS

<|Solution Begin|>
def solution(d):
    """
    Returns the keys of the dictionary in the order of their corresponding values sorted in descending order.
    
    Parameters:
    d (dict): A dictionary from which keys should be extracted and sorted.
    
    Returns:
    list: A list of keys sorted by their corresponding values in descending order.
    """
    return [key for key, value in sorted(d.items(), key=lambda item: item[1], reverse=True)]
<|Solution End|>
<|Test Begin|>
def test_solution_empty_dict():
    assert solution({}) == []

def test_solution_single_element():
    assert solution({'a': 10}) == ['a']

def test_solution_sorted():
    assert solution({'a': 10, 'b': 20, 'c': 15}) == ['b', 'c', 'a']

def test_solution_unsorted():
    assert solution({'a': 5, 'b': 3, 'c': 8, 'd': 1}) == ['c', 'a', 'b', 'd']

def test_solution_equal_values():
    result = solution({'a': 8, 'b': 8, 'c': 8})
    assert set(result) == {'a', 'b', 'c'}  # since values are same, any order of keys is correct
    
def test_solution_negative_values():
    assert solution({'x': -1, 'y': -10, 'z': 0}) == ['z', 'x', 'y']

def test_solution_mixed_types():
    assert solution({'apple': 3, 'banana': 2, 'cherry': 3}) == ['apple', 'cherry', 'banana']

<|Test End|>