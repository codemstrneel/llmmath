QUESTION

Create a function that extracts sequences of a specified length from a given list, where each sequence starts and ends with elements that satisfy a condition based on odd parity. The function should then count how many of these sequences, when converted to strings, match a pattern: starting with an 'a' when the sequence is reversed and ending in 'b'. Return a dictionary with the unique matching sequences as keys and their counts as values.

SOL & TESTS

<|Solution Begin|>```python
def extract_and_count_sequences(lst, seq_length):
    """
    Extracts sequences of the given length from the list where the sequence 
    starts and ends with odd numbers. Counts how many reversed sequences 
    (converted to strings) start with 'a' and end with 'b'.
    
    Parameters:
    - lst: List of elements to examine.
    - seq_length: Length of sequences to extract.
    
    Returns:
    - A dictionary with reversed sequences that match the pattern as keys 
      and their counts as values.
    """
    result = {}
    n = len(lst)

    for i in range(n - seq_length + 1):
        sequence = lst[i:i + seq_length]
        if isinstance(sequence[0], int) and sequence[0] % 2 == 1 and \
           isinstance(sequence[-1], int) and sequence[-1] % 2 == 1:
            
            # Convert sequence to string
            sequence_str = ''.join(map(str, sequence))
            reversed_sequence_str = sequence_str[::-1]

            # Check pattern
            if reversed_sequence_str.startswith('a') and reversed_sequence_str.endswith('b'):
                if reversed_sequence_str in result:
                    result[reversed_sequence_str] += 1
                else:
                    result[reversed_sequence_str] = 1
    
    return result
```<|Solution End|>

<|Test Begin|>```python
from solution import extract_and_count_sequences

def test_basic_case():
    lst = [1, 2, 3, 'a', 4, 1, 'b', 3]
    seq_length = 3
    assert extract_and_count_sequences(lst, seq_length) == {'b1a': 1}

def test_no_matching_sequences():
    lst = [4, 2, 6, 8, 'a', 'b']
    seq_length = 3
    assert extract_and_count_sequences(lst, seq_length) == {}

def test_multiple_matching_sequences():
    lst = [1, 'a', 1, 3, 'a', 'b', 5, 'a', 'b']
    seq_length = 3
    result = extract_and_count_sequences(lst, seq_length)
    assert result['b1a'] == 1
    assert result['b3a'] == 1

def test_odd_elements_not_in_sequence():
    lst = [2, 'a', 2, 3, 'b', 5, 'a', 6, 7]
    seq_length = 3
    assert extract_and_count_sequences(lst, seq_length) == {}

def test_long_sequence():
    lst = [7, 'a', 'b', 'c', 'a', 1]
    seq_length = 6
    assert extract_and_count_sequences(lst, seq_length) == {'1acbab': 1}
```<|Test End|>