QUESTION

Develop a function that identifies subsequences of a given list with a specified length, ensuring that each subsequence begins and ends with elements that satisfy a condition of being prime numbers. The function should then determine how many of these subsequences, when reversed, form strings containing the letter 'x'. Return a dictionary containing the unique strings that meet this criterion as keys and their frequency of occurrence as values.

SOL & TESTS

To solve this problem, we'll follow these steps:

1. Identify subsequences of a given length from the provided list.
2. Ensure that each subsequence begins and ends with prime numbers.
3. Reverse these subsequences and convert them into strings.
4. Count how many of these reversed strings contain the letter 'x'.
5. Return a dictionary with unique strings meeting this criterion and their frequency of occurrence.

We will also implement unit tests to validate the solution.

```python
<|Solution Begin|>
def is_prime(n):
    """
    Checks if a number is prime.
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def find_prime_subsequences(lst, length):
    """
    Finds all subsequences of a given length where the first and last elements are primes.
    """
    subsequences = []
    for i in range(len(lst) - length + 1):
        sub = lst[i:i + length]
        if is_prime(sub[0]) and is_prime(sub[-1]):
            subsequences.append(sub)
    return subsequences

def reverse_and_convert_to_string(subsequence):
    """
    Reverses a subsequence and converts it to a string.
    """
    return ''.join(map(str, subsequence[::-1]))

def subsequences_containing_x(lst, length):
    """
    Finds subsequences of a specified length that start and end with prime numbers,
    reverses them and counts how many of the resulting strings contain the letter 'x'.
    """
    subsequences = find_prime_subsequences(lst, length)
    result_dictionary = {}
    
    for sub in subsequences:
        reversed_str = reverse_and_convert_to_string(sub)
        if 'x' in reversed_str:
            if reversed_str not in result_dictionary:
                result_dictionary[reversed_str] = 0
            result_dictionary[reversed_str] += 1
    
    return result_dictionary
```
<|Solution End|>

<|Test Begin|>
```python
def test_is_prime():
    assert is_prime(2) == True
    assert is_prime(3) == True
    assert is_prime(4) == False
    assert is_prime(17) == True
    assert is_prime(18) == False

def test_find_prime_subsequences():
    assert find_prime_subsequences([2, 3, 5, 6, 7], 3) == [[2, 3, 5], [3, 5, 6], [5, 6, 7]]
    assert find_prime_subsequences([2, 4, 6, 8, 9], 2) == [[2, 4]]

def test_reverse_and_convert_to_string():
    assert reverse_and_convert_to_string([2, 1, 3]) == "312"
    assert reverse_and_convert_to_string([4, 5]) == "54"

def test_subsequences_containing_x():
    # Test case where 'x' is in the reversed sequence
    result = subsequences_containing_x([5, 10, 15, 2, 3, 2], 5)
    # As numbers don't convert to 'x', result should be an empty dict:
    assert result == {}  

    # Test case with customized input
    result = subsequences_containing_x([11, 23, 46, 113, 213], 5)
    # 31121323 -> no 'x' here so expect empty dictionary
    assert result == {}
    
    # Test case where reversed subsequences could potentially contain 'x' in a larger list
    result = subsequences_containing_x([2, 17, 23, 4, 7, 5], 4)
    # For this specific test, expect no sequence reverse to 'x'
    assert result == {}
```
<|Test End|>

The tests validate each function individually and as a whole to ensure the solution works as expected. Since 'x' is not a digit, typical lists of integers in tests do not naturally convert to contain 'x', implying tests primarily validate processing but do address broader completeness. In practice, a test suite anticipating any general character input for strings containing 'x' would be more nuanced.