QUESTION

Create a Python function that takes a list of elements and performs the following tasks:

1. Identify all the contiguous subarrays whose starting and ending elements are both even numbers. Return the number of such subarrays found.
2. For each subarray with an even starting and ending element, count how many tuples can be formed from its elements by pairing elements with similar initial characteristics (such as being both even or both odd) and return the total count of such pairs across all valid subarrays. 

The function should return both the number of valid subarrays and the total count of similar-characteristic pairs derived from these subarrays.

SOL & TESTS

<|Solution Begin|>```python
def count_even_subarrays_and_pairs(elements):
    """
    Counts the contiguous subarrays with even starting and ending elements
    and calculates the number of similar-characteristic pairs within them.
    
    Parameters:
    elements (list): A list of integers.
    
    Returns:
    tuple: A tuple containing:
        - The number of valid subarrays (starting and ending with even numbers).
        - The total count of similar-characteristic pairs within those subarrays.
    """
    
    def count_similar_pairs(subarray):
        even_count = sum(1 for x in subarray if x % 2 == 0)
        odd_count = len(subarray) - even_count
        return (even_count * (even_count - 1)) // 2 + (odd_count * (odd_count - 1)) // 2

    count_subarrays = 0
    count_pairs = 0
    n = len(elements)

    for start in range(n):
        if elements[start] % 2 == 0:  # Check if the starting element is even
            for end in range(start, n):
                if elements[end] % 2 == 0:  # Check if the ending element is even
                    count_subarrays += 1
                    count_pairs += count_similar_pairs(elements[start:end+1])

    return count_subarrays, count_pairs
```
<|Solution End|>

<|Test Begin|>```python
from solution import count_even_subarrays_and_pairs

def test_no_elements():
    assert count_even_subarrays_and_pairs([]) == (0, 0)

def test_no_even_numbers():
    assert count_even_subarrays_and_pairs([1, 3, 5, 7]) == (0, 0)

def test_one_even_number():
    assert count_even_subarrays_and_pairs([1, 2, 3, 5]) == (0, 0)

def test_two_even_numbers():
    assert count_even_subarrays_and_pairs([2, 4]) == (1, 1)

def test_mixed_numbers():
    assert count_even_subarrays_and_pairs([2, 3, 6, 7, 4]) == (3, 4)

def test_all_even():
    assert count_even_subarrays_and_pairs([2, 4, 6, 8]) == (10, 15)

def test_end_with_even():
    assert count_even_subarrays_and_pairs([1, 3, 5, 2, 4]) == (1, 1)

def test_start_and_end_with_even():
    assert count_even_subarrays_and_pairs([2, 1, 2, 3, 4, 2]) == (6, 6)

def test_all_odds():
    assert count_even_subarrays_and_pairs([1, 1, 1, 1, 1]) == (0, 0)

def test_mixed_adjacent_evens():
    assert count_even_subarrays_and_pairs([2, 2, 3, 4, 2, 2]) == (9, 14)
```
<|Test End|>