QUESTION

Write a Python function that takes a dictionary of string keys and a list of lists, where each list consists of strings. The task is to:

1. For each key-value pair in the dictionary:
   - Use the key as a substring to determine if it is present in any string within the lists.
   - For each string that contains the substring, remove consecutive duplicate characters.

2. Group the cleaned strings based on their lengths divided by a user-specified integer `n`.

3. For each group:
   - Count how many lists contain a string that ends with a letter.
   - Determine the longest length of such strings within the group.

4. Return a dictionary where the keys are the remainders of the lengths, and the values are tuples containing:
   - The count of lists with at least one string ending with a letter.
   - The maximum length of such strings within each group.

This question simplifies the original by focusing on substring presence instead of regular expressions, and it involves lists of strings rather than tuples with mixed types.

SOL & TESTS

```python
<|Solution Begin|>
def process_strings(string_dict, list_of_lists, n):
    """
    Processes strings based on defined logic:
    - Removes consecutive duplicate characters if key is in string.
    - Groups strings by length % n.
    - Returns a dictionary with counts and max lengths for each group.
    """
    from itertools import groupby
    
    def remove_consecutive_duplicates(s):
        return ''.join(k for k, _ in groupby(s))
    
    result = {}

    for list_idx, lst in enumerate(list_of_lists):
        for key in string_dict.keys():
            matched_strings = [s for s in lst if key in s]

            for original_str in matched_strings:
                cleaned_str = remove_consecutive_duplicates(original_str)
                length_mod = len(cleaned_str) % n

                # Ensure the key for the remainder exists in the result
                if length_mod not in result:
                    result[length_mod] = {'count': 0, 'max_length': 0}

                is_ending_with_letter = cleaned_str[-1].isalpha()
                if is_ending_with_letter:
                    result[length_mod]['count'] += 1
                
                result[length_mod]['max_length'] = max(
                    result[length_mod]['max_length'], len(cleaned_str)
                )
                
    # Clean up: Convert dict of dicts to dict of tuples
    final_result = {k: (v['count'], v['max_length']) for k, v in result.items()}

    return final_result
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_strings

def test_process_strings_basic():
    string_dict = {"a": None, "b": None}
    list_of_lists = [["banana", "bandana", "cabana"], ["a√±a", "bbbbb"]]
    n = 3
    expected_result = {0: (2, 5), 2: (4, 6)}
    assert process_strings(string_dict, list_of_lists, n) == expected_result

def test_process_strings_no_matching_keys():
    string_dict = {"x": None, "y": None}
    list_of_lists = [["banana", "bandana"], ["cabana"]]
    n = 4
    expected_result = {}
    assert process_strings(string_dict, list_of_lists, n) == expected_result

def test_process_strings_all_strings_match_single_key():
    string_dict = {"a": None}
    list_of_lists = [["aaabaaa", "aabba"], ["banana"]]
    n = 2
    expected_result = {0: (3, 6)}
    assert process_strings(string_dict, list_of_lists, n) == expected_result

def test_process_strings_no_strings_ending_with_letter():
    string_dict = {"a": None}
    list_of_lists = [["123", "456"]]
    n = 5
    expected_result = {}
    assert process_strings(string_dict, list_of_lists, n) == expected_result

def test_process_strings_varied_cases():
    string_dict = {"a": None, "c": None}
    list_of_lists = [["aaa", "abc", "cde"], ["ana"], ["cab"]]
    n = 3
    expected_result = {0: (3, 3), 1: (1, 3)}
    assert process_strings(string_dict, list_of_lists, n) == expected_result
```
<|Test End|>