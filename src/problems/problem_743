QUESTION

Write a function to remove the bracket areas in a string, including nested brackets, and return the modified string with each word in reverse order but maintaining the original word order.

SOL & TESTS

```markdown
<|Solution Begin|>
```python
def remove_brackets_and_reverse_words(s):
    """
    This function removes all parts of the string that are inside brackets, including nested brackets,
    and then reverses each word in the resulting string while maintaining the original word order.
    """
    def remove_brackets(s):
        stack = []
        result = []
        for char in s:
            if char == '(':
                stack.append('(')
            elif char == ')':
                if stack:
                    stack.pop()
            elif not stack:
                result.append(char)
        return ''.join(result)

    def reverse_each_word(sentence):
        words = sentence.split()
        return ' '.join(word[::-1] for word in words)

    no_brackets = remove_brackets(s)
    return reverse_each_word(no_brackets)

```
<|Solution End|>
<|Test Begin|>
```python
from solution import remove_brackets_and_reverse_words

def test_basic_removal_and_reversal():
    assert remove_brackets_and_reverse_words("hello (world)") == "olleh"
    assert remove_brackets_and_reverse_words("a(bc)d") == "a d"
    assert remove_brackets_and_reverse_words("(abc)d(e)") == "d"

def test_nested_brackets():
    assert remove_brackets_and_reverse_words("text (with(nested) brackets) example") == "txet elpmaxe"
    assert remove_brackets_and_reverse_words("hello (world (nested) example) end") == "olleh dne"

def test_multiple_words():
    assert remove_brackets_and_reverse_words("one (two three) four (five) six") == "eno ruof xis"
    assert remove_brackets_and_reverse_words("(erase these) keep this") == "peek siht"

def test_no_brackets():
    assert remove_brackets_and_reverse_words("simple test") == "elpmis tset"

def test_all_brackets():
    assert remove_brackets_and_reverse_words("(remove all this)") == ""
    assert remove_brackets_and_reverse_words("() inside () nothing") == "gnithon"
```
<|Test End|>
```