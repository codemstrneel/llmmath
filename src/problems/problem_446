QUESTION

Create a Python function that takes in two arguments: a list of integers and a list of phrases (strings). The function should perform the following tasks:

1. Remove any numbers from the list of integers that appear more than once, preserving the order of their first occurrence when not removed.
2. Identify and return all unique phrases from the list of phrases, preserving the order of their first occurrences.

The function should return a tuple containing the processed list of integers with duplicates removed and a list of the unique phrases.

SOL & TESTS

```python
def process_lists(integers, phrases):
    """
    Processes the provided lists of integers and phrases.

    Removes any integers that appear more than once, preserving the order of their first occurrence when not removed.
    Identifies and returns all unique phrases, preserving the order of their first occurrences.

    :param integers: List of integers.
    :param phrases: List of phrases (strings).
    :return: Tuple containing the processed list of integers with duplicates removed and list of unique phrases.
    """
    # Create a dictionary to count occurrences of each integer
    int_count = {}
    for num in integers:
        int_count[num] = int_count.get(num, 0) + 1

    # Create a list to store numbers that appear only once
    unique_integers = [num for num in integers if int_count[num] == 1]

    # Use a set to track seen phrases and build the list of unique phrases
    seen_phrases = set()
    unique_phrases = []
    for phrase in phrases:
        if phrase not in seen_phrases:
            unique_phrases.append(phrase)
            seen_phrases.add(phrase)

    return unique_integers, unique_phrases
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_lists

def test_unique_integers_and_phrases():
    integers = [1, 2, 3, 2, 4, 5, 1, 3, 6]
    phrases = ["apple", "banana", "apple", "orange", "banana", "kiwi"]
    result = process_lists(integers, phrases)
    assert result == ([4, 5, 6], ["apple", "banana", "orange", "kiwi"])

def test_no_duplicates_in_integers():
    integers = [1, 2, 3, 4, 5]
    phrases = ["apple", "orange", "grape"]
    result = process_lists(integers, phrases)
    assert result == ([1, 2, 3, 4, 5], ["apple", "orange", "grape"])

def test_no_duplicates_in_phrases():
    integers = [1, 1, 2, 2, 3, 3]
    phrases = ["apple", "banana", "orange"]
    result = process_lists(integers, phrases)
    assert result == ([], ["apple", "banana", "orange"])

def test_empty_lists():
    integers = []
    phrases = []
    result = process_lists(integers, phrases)
    assert result == ([], [])

def test_single_element_lists():
    integers = [1]
    phrases = ["single"]
    result = process_lists(integers, phrases)
    assert result == ([1], ["single"])

def test_all_unique_integers_and_phrases():
    integers = [1, 2, 3, 4]
    phrases = ["alpha", "beta", "gamma", "delta"]
    result = process_lists(integers, phrases)
    assert result == ([1, 2, 3, 4], ["alpha", "beta", "gamma", "delta"])
```
<|Test End|>