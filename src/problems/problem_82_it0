QUESTION

Write a function that rotates a given list of strings by a specified number of positions to the left. Then, for each string in the rotated list, use regex to find and return the starting index of all occurrences of a specific substring within each string.

SOLUTION/TESTS

<|Solution Begin|>
import re
from typing import List, Tuple

def solution(strings: List[str], rotate_by: int, substring: str) -> List[List[int]]:
    """
    Rotates a given list of strings by 'rotate_by' positions to the left.
    For each string in the rotated list, finds the starting index of all 
    occurrences of 'substring' using regex.
    """
    # Step 1: Rotate the list of strings to the left by 'rotate_by'
    n = len(strings)
    rotated_strings = strings[rotate_by % n:] + strings[:rotate_by % n]

    # Step 2: Find all occurrences of 'substring' in each rotated string
    result = []
    for string in rotated_strings:
        matches = [match.start() for match in re.finditer(re.escape(substring), string)]
        result.append(matches)
    
    return result
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_rotate_and_find_substring_occurrences():
    # Test basic rotation and substring finding
    assert solution(["apple", "banana", "cherry"], 1, "a") == [[1, 3], [1]]
    assert solution(["apple", "banana", "cherry"], 2, "e") == [[4], []]
    
    # Test no rotation
    assert solution(["apple", "banana", "cherry"], 0, "n") == [[], [2], []]
    
    # Test full length rotation (no change)
    assert solution(["apple", "banana", "cherry"], 3, "a") == [[0], [1, 3]]
    
    # Test with empty substring (should match all positions)
    assert solution(["apple", "banana", "cherry"], 1, "") == [list(range(len("banana") + 1)), list(range(len("cherry") + 1)), list(range(len("apple") + 1))]

def test_edge_cases():
    # Test empty list of strings
    assert solution([], 2, "a") == []
    
    # Test empty substring
    assert solution(["abcd"], 1, "") == [list(range(5))]  # should match all positions of "bcd"
    
    # Test rotate more than length of the list
    assert solution(["a", "b", "c"], 5, "a") == [[0], [], []]
    
    # Test substring not found
    assert solution(["hello", "world"], 1, "z") == [[], []]

def test_no_occurrences():
    # Test string with no occurrences of the substring
    assert solution(["hello", "world"], 1, "z") == [[], []]
    
def test_multiple_occurrences():
    # Test strings with multiple occurrences of the substring
    assert solution(["banana", "apple", "banana"], 2, "an") == [[1, 3], [1, 3]]
    
def test_rotation_with_repeated_patterns():
    # Test strings with repeated patterns, ensuring rotation is handled correctly
    assert solution(["abc", "def", "abc"], 2, "abc") == [[0], [0]]
<|Test End|>