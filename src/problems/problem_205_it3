QUESTION

Write a function that accepts a list of strings and a target count. First, for each string, pack consecutive duplicate characters into sublists and then sort each of these sublists alphabetically. From each sorted sublist, identify the second most frequently occurring character. Next, check if there are three unique second most frequent characters (from different strings) whose ASCII values' sum equals the target count. If such a combination exists, return the tuple of these three characters. Otherwise, return -1.

SOLUTION/TESTS

The attempts to solve the task are met with issues primarily because the solution attempts to determine the "second most frequent character" from packed sublists and the computed combinations of these in an inefficient or incorrect manner. Let's take a step-by-step approach to refine and correct both solution logic and the unit tests.

### Analysis:

1. **Identify Character Frequency:** The first task should be processing each string correctly to derive the frequency of characters within it. The focus is on identifying the second most frequent character from sorted data rather than subpacked data to avoid losing frequency details unintentionally.

2. **Check Unique Characters:** We need to gather unique second most frequent characters from all strings, and then proceed to check if there is any combination of them that achieves the required ASCII sum.

3. **Debugging:** Ensure that data structures that involve combinations of the characters are properly managed and that the correct data type is returned.

### Revised Solution:

Let's rewrite the solution to carefully handle character frequency counting and set management.

```python
<|Solution Begin|>
def solution(strings, target_count):
    from collections import Counter

    def second_most_frequent_char(s):
        count = Counter(s)
        if len(count) < 2:
            return None
        most_common = count.most_common()
        return most_common[1][0]

    second_most_chars = set()

    for s in strings:
        # Get sorted version of string
        sorted_s = ''.join(sorted(s))
        # Find the second most frequent character
        char = second_most_frequent_char(sorted_s)
        if char:
            second_most_chars.add(char)

    # Convert set to list to facilitate combinations
    smf_list = list(second_most_chars)

    if len(smf_list) < 3:
        return -1

    n = len(smf_list)
    # Check for combinations of three unique characters
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (ord(smf_list[i]) + ord(smf_list[j]) + ord(smf_list[k])) == target_count:
                    return (smf_list[i], smf_list[j], smf_list[k])

    return -1
<|Solution End|>
```

### Adjusted Unit Tests:

We'll create tests that ensure the solution's logic works as expected for varied input cases and edge scenarios, and confirm that the solution behaves correctly irrespective of input order.

```python
<|Test Begin|>
def test_solution_no_matching_triplet():
    assert solution(["aaa", "bbb", "ccc"], 300) == -1

def test_solution_matching_triplet():
    result = solution(["aabcc", "ddeeff", "gghhii"], (ord('b') + ord('e') + ord('h')))
    assert sorted(result) == sorted(('b', 'e', 'h'))

def test_solution_insufficient_second_frequents():
    assert solution(["aabc", "aabb", "cabc"], ord('a') + ord('b') + ord('c')) == -1

def test_solution_empty_strings():
    assert solution(["", "", ""], 300) == -1

def test_solution_single_characters():
    assert solution(["a", "b", "c"], ord('a') + ord('b') + ord('c')) == -1

def test_solution_identical_strings():
    assert solution(["aaa", "aaa", "aaa"], 0) == -1

def test_solution_with_valid_output():
    result = solution(["xxabyy", "ffeeg", "hhij"], (ord('x') + ord('f') + ord('h')))
    assert sorted(result) == sorted(('x', 'f', 'h'))

def test_solution_partial_triplet():
    result = solution(["aabbcc", "ddee", "fg"], (ord('b') + ord('e') + ord('f')))
    assert sorted(result) == sorted(('b', 'e', 'f'))

<|Test End|>
```

This ensures comprehensive testing of the rewritten logic to correctly identify and sum up the ASCII values of unique second most frequent characters from the list of strings provided.