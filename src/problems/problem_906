QUESTION

Write a function to remove duplicates from a list of lists and ensure that each inner list is sorted in ascending order.

SOL & TESTS

Sure, here is the solution and corresponding unit tests for the given task.

<|Solution Begin|>

```python
def remove_duplicates_and_sort(list_of_lists):
    """
    Removes duplicate lists and sorts each list in ascending order in a list of lists.
    
    Args:
    list_of_lists (list of list of int): The list of lists from which to remove duplicates and sort.

    Returns:
    list of list of int: A list of unique, sorted lists.
    """
    # Sort each inner list
    sorted_lists = [sorted(inner_list) for inner_list in list_of_lists]
    # Remove duplicates using set and convert back to list
    unique_sorted_lists = list(map(list, set(map(tuple, sorted_lists))))
    # Return the lists in their original order of appearance
    unique_sorted_lists.sort(key=sorted_lists.index)
    return unique_sorted_lists
```

<|Solution End|>

<|Test Begin|>

```python
from solution import remove_duplicates_and_sort

def test_remove_duplicates_and_sort_no_duplicates():
    input_data = [[3,1,2], [5,4,6]]
    expected_output = [[1,2,3],[4,5,6]]
    assert remove_duplicates_and_sort(input_data) == expected_output

def test_remove_duplicates_and_sort_with_duplicates():
    input_data = [[1,3,2], [4,5,4], [1,3,2], [2,5,3]]
    expected_output = [[1,2,3],[4,4,5],[2,3,5]]
    assert remove_duplicates_and_sort(input_data) == expected_output

def test_remove_duplicates_and_sort_with_single_list():
    input_data = [[3,1,2]]
    expected_output = [[1,2,3]]
    assert remove_duplicates_and_sort(input_data) == expected_output

def test_remove_duplicates_and_sort_empty():
    input_data = []
    expected_output = []
    assert remove_duplicates_and_sort(input_data) == expected_output

def test_remove_duplicates_and_sort_single_element_lists():
    input_data = [[1], [1], [2]]
    expected_output = [[1], [2]]
    assert remove_duplicates_and_sort(input_data) == expected_output
```

<|Test End|>

This solution will effectively remove duplicate lists and ensure that each inner list is sorted in ascending order, maintaining the order of first appearance for each unique list. The accompanying unit tests cover various scenarios including cases with no duplicates, with duplicates, single list inputs, empty inputs, and single element list inputs.