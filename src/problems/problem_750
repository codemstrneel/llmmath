QUESTION

Create a Python function that processes a string to identify and return the position of the rightmost set bit of the length of sequences consisting of one uppercase letter followed by lowercase letters, excluding any sequences found within square brackets "[ ]". If no such sequence outside square brackets is found, the function should return -1. The function should handle edge cases such as empty strings, strings entirely enclosed in square brackets, or strings without uppercase letters followed by lowercase letters.

SOL & TESTS

Sure! Below is the implementation of the solution followed by the unit tests.

<|Solution Begin|>
```python
def find_rightmost_set_bit_position(s):
    """
    Finds the position of the rightmost set bit of the length 
    of sequences consisting of one uppercase letter followed 
    by lowercase letters, excluding those within square brackets.

    Returns -1 if no such sequence is found.
    """
    import re

    # Regular expression to match sequences of one uppercase letter followed by lowercase letters
    pattern = r'\b[A-Z][a-z]*\b'

    # Regex pattern to find sequences within square brackets
    ignore_pattern = r'\[.*?\]'

    # Remove sequences within square brackets
    segments = re.split(ignore_pattern, s)
    
    # This list will store the lengths of valid sequences
    valid_lengths = []

    for segment in segments:
        matches = re.findall(pattern, segment)
        for match in matches:
            valid_lengths.append(len(match))

    if not valid_lengths:
        return -1

    # Get the length of the longest valid sequence
    max_length = max(valid_lengths)

    # Find the rightmost set bit position
    position = 0
    while max_length > 0:
        if max_length & 1 == 1:
            break
        max_length >>= 1
        position += 1

    return position
```
<|Solution End|>

<|Test Begin|>
```python
def test_no_sequences():
    assert find_rightmost_set_bit_position("") == -1
    assert find_rightmost_set_bit_position("[]") == -1
    assert find_rightmost_set_bit_position("xyz [Abc] kL [MnO]") == -1

def test_single_valid_sequence():
    assert find_rightmost_set_bit_position("Abc") == 1  # Length 3 -> binary '11'
    assert find_rightmost_set_bit_position("Defgh") == 0  # Length 5 -> binary '101'

def test_multiple_sequences():
    assert find_rightmost_set_bit_position("Abc Defg Hij") == 2  # Longest -> 'Hij': Len 3 -> '11'
    assert find_rightmost_set_bit_position("Mno Seq [Another] Upper") == 2  # Longest -> 'Upper': Len 5 -> '101'

def test_ignore_sequences_within_brackets():
    assert find_rightmost_set_bit_position("Abc xyz [LmnoPq] RStone") == 0  # 'RStone': Len 6 -> binary '110'

def test_consecutive_sequences():
    assert find_rightmost_set_bit_position("Aaa Bbb Ccc Ddd") == 2  # Longest same lengths: 3 -> binary '11'
    assert find_rightmost_set_bit_position("A [B] C") == 0  # Both A and C: Len 1 -> binary '1'
```
<|Test End|>