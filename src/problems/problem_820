QUESTION

Write a function to determine if there is a pair in the array whose sum is equal to a given value.

SOL & TESTS

## Solution:

To solve this problem, we will iterate through the array while checking if the difference between the target sum and the current element exists in a set of seen numbers. If it does, this means we've found a pair whose sum equals the target. Otherwise, we add the current element to the set and continue.

```python
def has_pair_with_sum(arr, target_sum):
    """
    Returns True if there is a pair in the array `arr` whose sum equals `target_sum`.
    """
    seen = set()
    for number in arr:
        if target_sum - number in seen:
            return True
        seen.add(number)
    return False
```

## Test:

We will write several unit tests to ensure the function works correctly for various scenarios.

```python
from solution import has_pair_with_sum

def test_has_pair_with_sum_found():
    assert has_pair_with_sum([1, 2, 3, 9], 11) is True

def test_has_pair_with_sum_not_found():
    assert has_pair_with_sum([1, 2, 3, 4], 8) is False

def test_has_pair_with_sum_with_zero():
    assert has_pair_with_sum([0, 4, 3, 0], 0) is True

def test_has_pair_with_negative_numbers():
    assert has_pair_with_sum([-1, -2, 1, 3, 2], 1) is True
    assert has_pair_with_sum([-1, -2, -3, -4], -6) is True

def test_has_pair_with_sum_single_element():
    assert has_pair_with_sum([5], 10) is False

def test_has_pair_with_sum_empty_array():
    assert has_pair_with_sum([], 5) is False
```

The tests cover cases where a pair is found, cases where it is not, scenarios with zero and negative numbers, single-element arrays, and empty arrays.