QUESTION

New Question: Write a function to sort each list in a given list of lists in ascending order.

SOLUTION/TESTS

Sure! Here is the solution to the problem, along with the unit tests.

<|Solution Begin|>
```python
def solution(lists):
    """
    Sorts each list within the provided list of lists in ascending order.
    
    :param lists: A list of lists that need to be sorted.
    :return: A new list of lists where each sublist is sorted in ascending order.
    """
    return [sorted(sublist) for sublist in lists]
```
<|Solution End|>

<|Test Begin|>
```python
from solution import solution

def test_single_sublist():
    assert solution([[3, 1, 2]]) == [[1, 2, 3]]

def test_multiple_sublists():
    assert solution([[3, 1, 2], [9, 7, 6], [4, 5, 2]]) == [[1, 2, 3], [6, 7, 9], [2, 4, 5]]

def test_empty_sublists():
    assert solution([[], [], []]) == [[], [], []]

def test_empty_list_of_lists():
    assert solution([]) == []

def test_sorted_sublists():
    assert solution([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]

def test_single_element_sublists():
    assert solution([[1], [2], [3]]) == [[1], [2], [3]]

def test_mixed_element_sublists():
    assert solution([[5, 3, 1], [2], []]) == [[1, 3, 5], [2], []]

def test_negative_numbers():
    assert solution([[-1, -3, -2], [0], [1, -1]]) == [[-3, -2, -1], [0], [-1, 1]]
```
<|Test End|>

These tests check different scenarios such as single and multiple sublists, empty lists and sublists, already sorted and unsorted lists, and lists with negative and positive numbers.