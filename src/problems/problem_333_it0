QUESTION

Write a function that processes a list of tuples, where each tuple consists of a number and a list of integers. The function should:

1. For each tuple, split the list of integers into sublists where each sublist has a sum of at most the specified number.
2. Calculate the nth Delannoy number, where n is the total number of sublists created across all tuples.
3. Return a list of new tuples, each consisting of the original number, the list of sublists, and the corresponding nth Delannoy number.

SOLUTION/TESTS

<|Solution Begin|>
def delannoy_number(n, m):
    """Calculates the Delannoy number D(n, m) recursively with memoization."""
    memo = {}

    def calculate(n, m):
        if (n, m) in memo:
            return memo[(n, m)]
        
        if n == 0 or m == 0:
            return 1
        value = calculate(n - 1, m) + calculate(n - 1, m - 1) + calculate(n, m - 1)
        memo[(n, m)] = value
        return value
    
    return calculate(n, m)

def solution(data):
    """
    Processes a list of tuples, and returns new tuples with sublists and Delannoy number.
    """
    
    def split_into_sublists(max_sum, num_list):
        result = []
        sublist = []
        current_sum = 0
        
        for num in num_list:
            if current_sum + num > max_sum:
                result.append(sublist)
                sublist = [num]
                current_sum = num
            else:
                sublist.append(num)
                current_sum += num
        
        if sublist:
            result.append(sublist)
        
        return result
    
    result = []
    total_sublists = 0  # Track across all tuples
    
    for number, num_list in data:
        sublists = split_into_sublists(number, num_list)
        total_sublists += len(sublists)
        result.append((number, sublists))
    
    # Calculate the nth Delannoy number, where n is the total number of sublists created
    nth_delannoy = delannoy_number(total_sublists, 1)
    
    # Append the nth Delannoy number to each tuple in result
    final_result = [(number, sublists, nth_delannoy) for number, sublists in result]
    
    return final_result
<|Solution End|>

<|Test Begin|>
def test_solution_with_example_case():
    input_data = [
        (5, [1, 2, 3, 4, 5]),
        (4, [3, 1, 4, 1, 5, 9, 2]),
    ]
    expected_output = [
        (5, [[1, 2, 2], [4, 1]], 65),
        (4, [[3, 1], [4], [1, 3], [5], [2]], 65),
    ]
    assert solution(input_data) == expected_output

def test_solution_with_empty_list():
    input_data = [(10, []), (3, [])]
    expected_output = [
        (10, [], 1),
        (3, [], 1),
    ]
    assert solution(input_data) == expected_output

def test_solution_with_single_element_lists():
    input_data = [(10, [1]), (3, [3])]
    expected_output = [
        (10, [[1]], 2),
        (3, [[3]], 2),
    ]
    assert solution(input_data) == expected_output

def test_solution_with_large_numbers():
    input_data = [(6, [6, 5, 4, 3, 2, 1])]
    expected_output = [
        (6, [[6], [5, 1], [4, 2], [3, 3], [2, 4], [1, 5]], 132),
    ]
    assert solution(input_data) == expected_output

def test_solution_with_all_elements_exceeding_max_sum():
    input_data = [(1, [2, 3, 4])]
    expected_output = [
        (1, [[2], [3], [4]], 4),
    ]
    assert solution(input_data) == expected_output
<|Test End|>