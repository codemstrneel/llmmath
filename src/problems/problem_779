QUESTION

Write a function that processes a list of elements, performing these tasks:

1. Reverse the order of elements in the list.
2. Traverse the reversed list to identify and count elements up to, but not including, the first occurrence of a string. In this counted sublist, identify consecutive duplicates and construct a dictionary mapping each unique element to its frequency. If there are no strings, perform the operations on the entire list.

The function should return a tuple containing two elements:
- A dictionary reflecting the frequency of consecutive duplicates in the sublist (not including strings).
- The number of elements counted before the first occurrence of a string.

SOL & TESTS

```python
<|Solution Begin|>
def process_list(elements):
    """
    Processes the list as described in the problem statement.
    
    Parameters:
        elements (list): The list of elements to process.
    
    Returns:
        tuple: A dictionary mapping each unique element to its frequency of consecutive duplicates,
               and an integer representing the number of elements counted before the first string.
    """
    # Step 1: Reverse the order of elements in the list
    reversed_elements = elements[::-1]
    
    # Initialize the dictionary and counter
    frequency_dict = {}
    count = 0
    found_string = False
    
    # Traverse the reversed list
    for element in reversed_elements:
        if isinstance(element, str):
            found_string = True
            break  # Stop counting if a string is encountered

        count += 1
        
        # If the current element is the same as the previous one, increment its frequency
        if count > 1 and element == reversed_elements[len(reversed_elements)-count]:
            frequency_dict[element] = frequency_dict.get(element, 1) + 1
        else:
            # Initialize frequency to 1 if it's a new encounter or a different element
            frequency_dict[element] = 1
    
    return frequency_dict, count

<|Solution End|>
```

```python
<|Test Begin|>
from solution import process_list

def test_no_strings():
    assert process_list([1, 1, 2, 2, 2, 3]) == ({3: 1, 2: 3, 1: 2}, 6)

def test_single_string():
    assert process_list([1, 2, "a", 3, 2, 1]) == ({1: 1, 2: 1}, 2)

def test_multiple_strings():
    assert process_list([1, "b", 2, "a", 1]) == ({1: 1}, 1)

def test_all_strings():
    assert process_list(["x", "y", "z"]) == ({}, 0)

def test_no_consecutive_duplicates():
    assert process_list([1, 2, 3, "a"]) == ({3: 1, 2: 1, 1: 1}, 3)

def test_identical_elements():
    assert process_list([1, 1, 1, 1, "z"]) == ({1: 4}, 4)

def test_empty_list():
    assert process_list([]) == ({}, 0)

def test_no_non_string_in_reversed():
    assert process_list(["a", 1, 2, 1]) == ({1: 1}, 3)

<|Test End|>
```