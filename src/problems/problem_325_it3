QUESTION

Write a python function to determine whether the given positive integer is a perfect cube or not.

SOLUTION/TESTS

<|Solution Begin|>
def solution(n):
    """
    Determines if a given positive integer n is a perfect cube.
    
    :param n: A positive integer.
    :return: True if n is a perfect cube, False otherwise.
    """
    if n < 0:
        return False
    
    cube_root = round(n ** (1/3))
    return cube_root**3 == n
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_perfect_cube():
    assert solution(27) == True  # 3 * 3 * 3
    assert solution(8) == True   # 2 * 2 * 2
    assert solution(1) == True   # 1 * 1 * 1
    assert solution(64) == True  # 4 * 4 * 4

def test_not_perfect_cube():
    assert solution(2) == False
    assert solution(10) == False
    assert solution(26) == False
    assert solution(20) == False

def test_large_perfect_cube():
    assert solution(1000000) == True  # 100 * 100 * 100
    
def test_large_not_perfect_cube():
    assert solution(999999) == False

def test_edge_case_zero():
    # Note: As per problem statement, the input should be a positive integer,
    # so a test for 0 is not included here.
    pass
<|Test End|>