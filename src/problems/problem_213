QUESTION

**New Question:**

Write a Python function that takes two inputs: a list of tuples, where each tuple contains three elements — two integers and a string — and an integer `n`. The task is to perform the following:

1. Group the tuples based on their second integer element. Tuples with the same second integer should be combined into a list.
2. Within each group, count how many tuples have a string element that contains any sequence of repeated characters (e.g., "aa", "bbb") with a length of two or more.
3. For each group, find the maximum sum of the first integer element and the length of the string among all tuples in that group.
4. Return a dictionary where the keys are the second integer elements of the original tuples, and the values are tuples containing:
   - The count of tuples with a string containing repeated character sequences.
   - The maximum sum of the first integer element and the length of the string in that group.

For example, given the input list of tuples `[(3, 2, 'hello'), (5, 3, 'world'), (4, 2, 'bell'), (1, 3, 'tree')]` and `n = 1`, the output should be: `{2: (1, 8), 3: (1, 8)}`.

In this example, for the group with the second integer `2`, the string 'bell' contains the repeated sequence "ll", contributing to a count of 1, and the maximum sum of the first element and string length is `4 + 4 = 8` from the tuple `(4, 2, 'bell')`. For the group with the second integer `3`, the string 'tree' contains the repeated sequence "ee", contributing to a count of 1, and the maximum sum is `5 + 5 = 10` from the tuple `(5, 3, 'world')`.

SOL & TESTS

<|Solution Begin|>```python
def analyze_tuples(tuples, n):
    """
    Analyzes a list of tuples based on specific criteria and returns a dictionary
    with grouped results based on the second integer element of the tuples.
    """
    from collections import defaultdict
    
    # Grouping tuples by their second integer
    grouped = defaultdict(list)
    for first, second, string in tuples:
        grouped[second].append((first, string))
    
    result = {}
    
    for key, group in grouped.items():
        repeated_count = 0
        max_sum = 0
        
        for first, string in group:
            # Check for repeated sequence of characters
            if any(string[i] == string[i + 1] for i in range(len(string) - 1)):
                repeated_count += 1
            
            # Calculate the sum of the first integer and the length of the string
            current_sum = first + len(string)
            max_sum = max(max_sum, current_sum)
        
        result[key] = (repeated_count, max_sum)
    
    return result
```
<|Solution End|>

<|Test Begin|>```python
def test_analyze_tuples_basic_case():
    tuples = [(3, 2, 'hello'), (5, 3, 'world'), (4, 2, 'bell'), (1, 3, 'tree')]
    expected = {2: (1, 8), 3: (1, 8)}
    assert analyze_tuples(tuples, 1) == expected

def test_analyze_tuples_no_repeated():
    tuples = [(1, 1, 'abc'), (2, 1, 'def')]
    expected = {1: (0, 5)}
    assert analyze_tuples(tuples, 1) == expected

def test_analyze_tuples_no_strings():
    tuples = []
    expected = {}
    assert analyze_tuples(tuples, 1) == expected

def test_analyze_tuples_empty_strings():
    tuples = [(1, 1, ''), (2, 1, '')]
    expected = {1: (0, 2)}  # (0, 2) because max(1+0, 2+0) for length 0 strings
    assert analyze_tuples(tuples, 1) == expected

def test_analyze_tuples_all_repeated():
    tuples = [(2, 1, 'repeat'), (3, 1, 'aabb'), (1, 2, 'cc'), (4, 2, 'dd')]
    expected = {1: (2, 8), 2: (2, 6)}
    assert analyze_tuples(tuples, 1) == expected

def test_analyze_tuples_single_tuple():
    tuples = [(5, 4, 'abba')]
    expected = {4: (1, 9)}
    assert analyze_tuples(tuples, 1) == expected
```
<|Test End|>