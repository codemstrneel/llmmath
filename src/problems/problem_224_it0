QUESTION

Write a function that takes a list of strings and returns the count of how many of the strings at even indices, when interpreted as Roman numerals, represent an even integer. The function should treat invalid Roman numerals as zero.

SOLUTION/TESTS

<|Solution Begin|>
def solution(strings):
    """
    Counts the number of strings at even indices in the input list that, 
    when interpreted as Roman numerals, represent an even integer.
    Invalid Roman numerals are treated as zero.
    """
    def roman_to_int(s):
        roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        prev_value = 0
        total = 0
        for char in reversed(s.upper()):
            value = roman.get(char, 0)
            if value < prev_value:
                total -= value
            else:
                total += value
            prev_value = value
        return total if all(c in roman for c in s.upper()) else 0
        
    count = 0
    for i in range(0, len(strings), 2):
        if roman_to_int(strings[i]) % 2 == 0:
            count += 1
    return count
<|Solution End|>
<|Test Begin|>
def test_all_valid_and_even():
    assert solution(['II', 'I', 'IV', 'VII', 'VI']) == 3

def test_some_invalid():
    assert solution(['XX', 'I', '0', '', 'MCMXCIV']) == 2

def test_all_invalid():
    assert solution(['A', 'ZYY', 'PXI', 'BO', '']) == 3

def test_mixed_validity_and_parity():
    assert solution(['XX', 'IX', 'XI', 'IV', 'III']) == 1
    assert solution(['', 'IV', 'XC', 'VII', 'MCV']) == 2

def test_empty_list():
    assert solution([]) == 0

def test_single_element():
    assert solution(['V']) == 0
    assert solution(['X']) == 1

def test_valid_odd():
    assert solution(['I', 'III', 'IX']) == 0

def test_valid_even():
    assert solution(['II', 'IV', 'VI']) == 2
<|Test End|>