QUESTION

Create a function to calculate the square of individual elements in a list using a lambda function. Ensure that the function can handle both integer and floating-point numbers within the list. The function should also verify that all elements of the list are numeric data types (integers or floats); if any non-numeric element is found, raise a ValueError. Return the results as a list of floats.

SOL & TESTS

<|Solution Begin|>
```python
def square_elements(values):
    """
    Squares each element in the input list using a lambda function. 
    Ensures all elements are numeric, raising ValueError otherwise.

    Parameters:
    values (list): A list of numbers (int or float).

    Returns:
    list: A list of squares as floats.
    """
    if not all(isinstance(x, (int, float)) for x in values):
        raise ValueError("All elements must be integers or floats.")

    return list(map(lambda x: float(x**2), values))
```
<|Solution End|>
<|Test Begin|>
```python
from solution import square_elements
import pytest

def test_square_elements_with_integers():
    assert square_elements([1, 2, 3, 4]) == [1.0, 4.0, 9.0, 16.0]

def test_square_elements_with_floats():
    assert square_elements([1.5, 2.0, 3.5]) == [2.25, 4.0, 12.25]

def test_square_elements_with_mixed_numbers():
    assert square_elements([1, 2.5, 3, 4.5]) == [1.0, 6.25, 9.0, 20.25]

def test_square_elements_empty_list():
    assert square_elements([]) == []

def test_square_elements_single_element():
    assert square_elements([4]) == [16.0]

def test_square_elements_non_numeric_error():
    with pytest.raises(ValueError):
        square_elements([1, 'a', 3])

def test_square_elements_all_floats():
    assert square_elements([1.0, 2.0, 3.0]) == [1.0, 4.0, 9.0]
```
<|Test End|>