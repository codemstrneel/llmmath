QUESTION

Create a function that takes a list of dictionaries, where each dictionary represents a student's data with keys "name" (a string) and "scores" (a list of integers representing the student's scores in various assessments). Implement the following functionalities in the function:

1. Sort the list of dictionaries based on the sum of scores of each student.
2. After sorting, extract the top k students (based on the sum of their scores) and return the number of unique integers found in their scores.
3. Simultaneously, create a single concatenated string of all the names of these top k students and count the occurrences of a specified character in this concatenated string.

The function should return both the count of unique score integers and the character occurrence count in the concatenated string.

SOL & TESTS

<|Solution Begin|> 
```python
def process_students(students, k, char):
    """
    Processes a list of students to sort them by the sum of their scores and return:
    1. The number of unique integers in the scores of the top k students.
    2. The count of the specified character in the concatenated string of their names.
    
    Parameters:
    - students (list of dict): A list of dictionaries where each dictionary contains
                               "name" (str) and "scores" (list of int).
    - k (int): The number of top students to consider.
    - char (str): The character to count in the concatenated names.
    
    Returns:
    - tuple: (unique_count, char_count)
    """
    # Sort the students based on the sum of their scores
    students_sorted = sorted(students, key=lambda student: sum(student['scores']), reverse=True)

    # Get the top k students
    top_k_students = students_sorted[:k]

    # Collect all the scores from the top k students and get unique scores
    unique_scores = set()
    concatenated_names = ''
    for student in top_k_students:
        unique_scores.update(student['scores'])
        concatenated_names += student['name']

    # Count unique score integers
    unique_count = len(unique_scores)

    # Count occurrence of the specified character in the concatenated string
    char_count = concatenated_names.count(char)

    return unique_count, char_count
```
<|Solution End|>

<|Test Begin|>
```python
def test_process_students():
    students = [
        {"name": "Alice", "scores": [90, 85, 92]},
        {"name": "Bob", "scores": [92, 90, 85]},
        {"name": "Charlie", "scores": [85, 85, 85]},
        {"name": "David", "scores": [100, 100, 100]},
        {"name": "Eve", "scores": [70, 80, 90]},
    ]
    
    # Test case: Top 2 students, looking for 'a' in names
    result = process_students(students, 2, 'a')
    assert result == (5, 2)  # Unique scores {90, 85, 92, 100}, names "DavidAlice" has 2 'a's
    
    # Test case: Top 3 students, looking for 'e'
    result = process_students(students, 3, 'e')
    assert result == (6, 3)  # Unique scores {90, 85, 92, 100}, names "DavidAliceBob" has 3 'e's
    
    # Test case: All students, looking for 'i'
    result = process_students(students, 5, 'i')
    assert result == (8, 5)  # All scores are considered, names "DavidAliceBobCharlieEve" has 5 'i's

    # Test case: Edge case with k=0
    result = process_students(students, 0, 'x')
    assert result == (0, 0)  # No students selected, so no unique scores, no names

    # Test case: Single student, looking for character not in name
    students_single = [
        {"name": "Unique", "scores": [42, 42]},
    ]
    result = process_students(students_single, 1, 'x')
    assert result == (1, 0)  # Unique score {42}, 'x' not in "Unique"

if __name__ == "__main__":
    test_process_students()
    print("All tests passed!")
```
<|Test End|>