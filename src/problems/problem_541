QUESTION

**New Question:**

Write a Python function that processes a list of integers with the following operations: First, identify all numbers that are smaller than the median of the list. Then, for these identified numbers, apply a digit rotation (left rotate the digits as if they are characters in a string). Finally, return a dictionary where the keys are the original numbers before rotation, and the values are the numbers after the digit rotation.

---

**Explanation of Combos:**

- **Question 1 (Determine whether one number is smaller than another):** The new question requires identifying numbers smaller than the median, integrating a comparison task.

- **Question 2 (Left rotate the digits of a given number):** Incorporates digit rotation of the numbers identified, a concept used in rotating digits similar to left rotation.

- **Combines both by:** Taking numbers smaller than a certain value and performing a specific transformation on them, then organizing the results in a novel structure by using a dictionary where the transformation result is linked to the original values.

SOL & TESTS

```python
<|Solution Begin|>
import statistics

def process_numbers(lst):
    """
    Process a list of integers. The function identifies numbers smaller than 
    the median of the list, then applies a digit rotation to these numbers,
    and returns a dictionary with original numbers as keys and rotated numbers as values.
    
    :param lst: List of integers
    :return: Dictionary with original numbers as keys and rotated numbers as values
    """
    median_value = statistics.median(lst)
    result = {}
    
    for num in lst:
        if num < median_value:
            rotated_num = rotate_digits(num)
            result[num] = rotated_num
    
    return result

def rotate_digits(num):
    """
    Rotate the digits of a number to the left by one position.
    
    :param num: The integer to rotate
    :return: The integer result after rotating digits
    """
    num_str = str(num)
    
    if len(num_str) <= 1:
        return num
    
    rotated_str = num_str[1:] + num_str[0]
    return int(rotated_str)
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_numbers, rotate_digits

def test_process_numbers():
    assert process_numbers([9, 100, 10, 13, 20]) == {9: 9, 10: 1, 13: 31}
    assert process_numbers([1, 2, 3, 4, 5, 6]) == {1: 1, 2: 2, 3: 3}
    assert process_numbers([11, 9, 8, 7, 10]) == {9: 9, 8: 8, 7: 7}
    assert process_numbers([20, 21, 22, 23]) == {20: 2}
    assert process_numbers([1]) == {}
    assert process_numbers([333, 33, 3]) == {3: 3}

def test_rotate_digits():
    assert rotate_digits(123) == 231
    assert rotate_digits(10) == 1
    assert rotate_digits(5) == 5
    assert rotate_digits(300) == 3
    assert rotate_digits(45) == 54
    assert rotate_digits(0) == 0
```
<|Test End|>