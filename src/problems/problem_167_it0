QUESTION

Write a function that takes a list of words and performs the following operations:
1. Calculate the geometric sum of the length of each word divided by the first n positive integers, where n is the total number of words in the list.
2. Check whether the geometric sum calculated is even or odd, using integer precision.
3. Return a boolean indicating whether the sum is even, alongside the length of the word with the maximum magnitude represented as a complex number (using the word's length as both the real and imaginary parts).

SOLUTION/TESTS

<|Solution Begin|>
import cmath

def solution(words):
    """
    Given a list of words, this function calculates the geometric sum of the
    lengths of the words divided by the integers from 1 to the number of words.
    It returns a boolean indicating if the sum is even and the magnitude of
    the longest word (considered as a complex number with its length as both
    real and imaginary parts).
    """
    n = len(words)
    if n == 0:
        return (True, 0)

    # Calculate the geometric sum
    geo_sum = sum(len(word) / (i + 1) for i, word in enumerate(words))

    # Check if geometric sum is even or odd
    is_even = int(geo_sum) % 2 == 0

    # Find the maximum magnitude based on word length
    max_length = max(len(word) for word in words)
    max_magnitude = cmath.polar(complex(max_length, max_length))[0]

    return (is_even, max_magnitude)
<|Solution End|>
<|Test Begin|>
def test_solution_with_even_length_words():
    assert solution(["hello", "world"]) == (False, 7.0710678118654755)
    
def test_solution_with_odd_length_words():
    assert solution(["hi", "there", "friend"]) == (True, 8.48528137423857)
    
def test_solution_with_empty_list():
    assert solution([]) == (True, 0)
    
def test_solution_single_long_word():
    assert solution(["abcdefghijk"]) == (False, 15.556349186104045)
    
def test_solution_two_identical_words():
    assert solution(["mirror", "mirror"]) == (True, 8.48528137423857)
    
def test_solution_varied_lengths():
    assert solution(["short", "a", "a very long word"]) == (False, 14.142135623730951)
<|Test End|>