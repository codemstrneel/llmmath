QUESTION

Create a Python function that processes a list of sentences containing a sequence of words representing mathematical expressions mixed with street addresses. The function should perform the following tasks:

1. Abbreviate 'road' as 'rd.' in each sentence.
2. Identify and convert camel case formatted variable names in the mathematical expressions to snake case format.
3. Evaluate each mathematical expression present in the sentences, using a given dictionary where keys correspond to snake case variable names and values provide their respective numerical values. You can assume each expression is a valid arithmetic operation involving addition, subtraction, multiplication, or division of the variables.
4. Expand the functionality by finding pairs of numbers in each expression that yield the highest product and include that information with the result.
5. The function should return a list where each entry contains the modified sentence with the abbreviated 'road', the result of evaluating each expression, and the highest product pair information.

This problem involves string manipulation, case conversion, mathematical evaluation, and identifying pairs with the highest product in a dynamic setting.

SOL & TESTS

```markdown
<|Solution Begin|>
```python
import re

def camel_to_snake(name):
    return re.sub('([A-Z])', r'_\1', name).lower()

def eval_expression(expr, variables):
    code = compile(expr, '<string>', 'eval')
    return eval(code, {}, variables)

def find_highest_product_pair(expression, variables):
    terms = re.findall(r'\b\w+\b', expression)
    max_product = float('-inf')
    best_pair = None

    for i in range(len(terms)):
        for j in range(i+1, len(terms)):
            if terms[i] in variables and terms[j] in variables:
                product = variables[terms[i]] * variables[terms[j]]
                if product > max_product:
                    max_product = product
                    best_pair = (terms[i], terms[j])

    return best_pair, max_product

def process_sentences(sentences, variables):
    processed_sentences = []

    for sentence in sentences:
        # Step 1: Abbreviate 'road' to 'rd.'
        sentence = re.sub(r'\broad\b', 'rd.', sentence)

        # Step 2: Convert camel case to snake case for variables
        sentence = re.sub(r'\b[a-z]+(?:[A-Z][a-z]+)*\b', 
                          lambda match: camel_to_snake(match.group(0)), sentence)

        # Step 3 and 4: Evaluate expressions and find highest product pair
        modified_sentence = sentence
        expressions = re.findall(r'[^ ]+ = [^ ]+(?: [+/*-] [^ ]+)*', modified_sentence)
        eval_results = []
        highest_product_infos = []

        for expr in expressions:
            var, formula = expr.split(' = ')
            # Evaluate expression
            try:
                value = eval_expression(formula, variables)
                eval_results.append((var, value))

                # Find highest product pair
                best_pair, max_product = find_highest_product_pair(formula, variables)
                highest_product_info = {
                    "expression": var,
                    "product_pair": best_pair,
                    "product_value": max_product
                }
                highest_product_infos.append(highest_product_info)

            except Exception as e:
                eval_results.append((var, f"Error: {e}"))
                highest_product_infos.append({
                    "expression": var,
                    "product_pair": None,
                    "product_value": None
                })

        result = (modified_sentence, eval_results, highest_product_infos)
        processed_sentences.append(result)
    
    return processed_sentences
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_sentences

def test_process_sentences():
    sentences = [
        "The road is long. The tollCalculate = Distance * TollRate.",
        "mathVariable = xValue * yValue + 3."
    ]
    variables = {
        "distance": 100,
        "toll_rate": 5,
        "x_value": 10,
        "y_value": 20
    }

    result = process_sentences(sentences, variables)

    assert result[0][0] == "The rd. is long. The toll_calculate = distance * toll_rate."
    assert result[0][1] == [('toll_calculate', 500)]
    assert result[0][2][0]['expression'] == 'toll_calculate'
    assert result[0][2][0]['product_pair'] == ('distance', 'toll_rate')
    assert result[0][2][0]['product_value'] == 500

    assert result[1][0] == "math_variable = x_value * y_value + 3."
    assert result[1][1] == [('math_variable', 203)]
    assert result[1][2][0]['expression'] == 'math_variable'
    assert result[1][2][0]['product_pair'] == ('x_value', 'y_value')
    assert result[1][2][0]['product_value'] == 200

def test_abbreviation_and_conversion():
    sentences = [
        "CowRoad is a variable. HouseRoad = houseVarEnd - roadStart."
    ]
    variables = {
        "house_var_end": 500,
        "road_start": 200
    }

    result = process_sentences(sentences, variables)

    assert result[0][0] == "cow_road is a variable. house_rd. = house_var_end - road_start."
    assert result[0][1] == [('house_rd.', 300)]
    assert result[0][2][0]['expression'] == 'house_rd.'
    assert result[0][2][0]['product_pair'] == ('house_var_end', 'road_start')
    assert result[0][2][0]['product_value'] == 100000
```
<|Test End|>
```