QUESTION

Write a Python function that processes a given list of strings. Each string can contain words and numbers arbitrarily placed within it. The function should do the following:

1. Calculate the length of the last word in each string.
2. Identify and extract the numbers along with their positions (index starting from 0), replacing the numbers in the original string with underscores using regex.

The function should return a list of tuples, where each tuple contains:
- The original string with numbers replaced by underscores.
- The length of the last word in the modified string.
- A list of tuples, with each tuple containing a number found in the original string and its position.

For example, given the input list `["find 3 numbers 15 here", "where are the 9 answers"]`, the function should return:
`[
  ("find _ numbers __ here", 4, [(3, 5), (15, 14)]), 
  ("where are the _ answers", 7, [(9, 13)])
]`.

SOLUTION/TESTS

<|Solution Begin|>
import re

def solution(strings):
    results = []
    for s in strings:
        # Find all numbers in the string along with their positions
        matches = [(int(match.group()), match.start()) for match in re.finditer(r'\d+', s)]
        
        # Replace all numbers with underscores
        modified_string = re.sub(r'\d+', lambda x: '_' * len(x.group()), s)
        
        # Calculate the length of the last word
        last_word_length = len(modified_string.rstrip().split()[-1])

        results.append((modified_string, last_word_length, matches))
    
    return results
<|Solution End|>

<|Test Begin|>
def test_solution_typical_case():
    input_strings = ["find 3 numbers 15 here", "where are the 9 answers"]
    expected_output = [
        ("find _ numbers __ here", 4, [(3, 5), (15, 14)]),
        ("where are the _ answers", 7, [(9, 13)])
    ]
    assert solution(input_strings) == expected_output

def test_solution_single_word_with_numbers():
    input_strings = ["3 cats", "dogs 15", "123"]
    expected_output = [
        ("_ cats", 4, [(3, 0)]),
        ("dogs __", 4, [(15, 5)]),
        ("___", 0, [(123, 0)])
    ]
    assert solution(input_strings) == expected_output

def test_solution_no_numbers():
    input_strings = ["just words", "no numbers", "here either"]
    expected_output = [
        ("just words", 5, []),
        ("no numbers", 7, []),
        ("here either", 6, [])
    ]
    assert solution(input_strings) == expected_output

def test_solution_empty_string():
    input_strings = [""]
    expected_output = [("", 0, [])]
    assert solution(input_strings) == expected_output

def test_solution_edge_case_with_punctuation():
    input_strings = ["3.14 is pi", "what4ever", "score:100!"]
    expected_output = [
        ("__.14 is pi", 2, [(3, 0)]),
        ("what_ever", 5, [(4, 4)]),
        ("score:___!", 1, [(100, 6)])
    ]
    assert solution(input_strings) == expected_output
<|Test End|>