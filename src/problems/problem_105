QUESTION

Create a Python function that takes a list of weather data tuples and an ordered list of city names. Each weather data tuple consists of a city name, temperature, and wind speed. Your task is to:

1. Calculate the wind chill index for each city using the temperature and wind speed values provided in the tuples.
2. Re-arrange the weather data tuples based on the specified order of city names from the ordered list.
3. Provide the wind chill index values with a precision of 2 decimal places.

The function should return a list of tuples, where each tuple contains a city name and its corresponding wind chill index, arranged in the order specified by the ordered list of city names.

SOL & TESTS

Sure! Let's tackle the problem step by step:

1. **Calculate the Wind Chill Index:** 
   The Wind Chill Index can be calculated using the formula:

   \[
   WCI = 13.12 + 0.6215T - 11.37V^{0.16} + 0.3965TV^{0.16}
   \]

   where \( T \) is the temperature in Celsius and \( V \) is the wind speed in km/h.

2. **Re-arrange the Weather Data:**
   We'll make use of the given list of city names to arrange the results properly.

3. **Return a List of Tuples:**
   Finally, we format our results into a list of tuples and provide the wind chill index values rounded to two decimal places.

Let's implement this in Python:

<|Solution Begin|>
```python
def calculate_wind_chill(temp, wind_speed):
    """
    Calculate the wind chill index given temperature and wind speed.
    """
    return 13.12 + 0.6215 * temp - 11.37 * wind_speed**0.16 + 0.3965 * temp * wind_speed**0.16

def weather_wind_chill(weather_data, city_order):
    """
    Given a list of weather data tuples and an ordered list of city names, 
    calculate the wind chill index for each city and return a list of tuples
    with city name and wind chill index arranged in the specified order.
    """
    # Create a dictionary to store weather data by city
    weather_dict = {city: (temp, wind_speed) for city, temp, wind_speed in weather_data}

    # Prepare the result list
    result = []

    for city in city_order:
        if city in weather_dict:
            temp, wind_speed = weather_dict[city]
            wind_chill = calculate_wind_chill(temp, wind_speed)
            result.append((city, round(wind_chill, 2)))

    return result
```
<|Solution End|>

Now, let's develop some unit tests for the above implementation to ensure its correctness.

<|Test Begin|>
```python
def test_weather_wind_chill_basic():
    weather_data = [
        ('CityA', 10, 15),
        ('CityB', 0, 20),
        ('CityC', -5, 30)
    ]
    city_order = ['CityB', 'CityC', 'CityA']
    expected = [
        ('CityB', 0.74),
        ('CityC', -12.15),
        ('CityA', 7.18),
    ]
    assert weather_wind_chill(weather_data, city_order) == expected

def test_weather_wind_chill_with_missing_city():
    weather_data = [
        ('CityA', 10, 15),
        ('CityB', 0, 20)
    ]
    city_order = ['CityB', 'CityC', 'CityA']
    expected = [
        ('CityB', 0.74),
        ('CityA', 7.18),
    ]
    assert weather_wind_chill(weather_data, city_order) == expected

def test_weather_wind_chill_empty_weather_data():
    weather_data = []
    city_order = ['CityA', 'CityB']
    expected = []
    assert weather_wind_chill(weather_data, city_order) == expected

def test_weather_wind_chill_empty_city_order():
    weather_data = [
        ('CityA', 10, 15)
    ]
    city_order = []
    expected = []
    assert weather_wind_chill(weather_data, city_order) == expected

def test_weather_wind_chill_all_cities_match_order():
    weather_data = [
        ('CityA', 10, 15),
        ('CityB', 0, 20)
    ]
    city_order = ['CityA', 'CityB']
    expected = [
        ('CityA', 7.18),
        ('CityB', 0.74)
    ]
    assert weather_wind_chill(weather_data, city_order) == expected
```
<|Test End|>

These tests cover a range of scenarios including basic functionality, handling missing cities in weather data, and empty input data.