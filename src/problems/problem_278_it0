QUESTION

Create a Python function to calculate the sum of cubes of binomial coefficients for a given non-negative integer.

SOLUTION/TESTS

To solve the problem of calculating the sum of cubes of binomial coefficients for a given non-negative integer \( n \), we can use the formula for binomial coefficients: 

\[
\binom{n}{k} = \frac{n!}{k!(n-k)!}
\]

With this, our task is to compute:

\[
\text{sum} = \sum_{k=0}^{n} \binom{n}{k}^3
\]

Here's the solution implemented in Python along with unit tests using pytest.

<|Solution Begin|>
def solution(n):
    """
    Calculate the sum of cubes of binomial coefficients for a given non-negative integer n.
    """
    from math import comb

    return sum(comb(n, k)**3 for k in range(n + 1))
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_with_small_integers():
    assert solution(0) == 1  # only one term: C(0,0)^3 = 1
    assert solution(1) == 2  # terms: C(1,0)^3 + C(1,1)^3 = 1 + 1 = 2
    assert solution(2) == 10  # terms: 1^3 + 2^3 + 1^3 = 1 + 8 + 1 = 10

def test_solution_for_larger_integer():
    assert solution(3) == 41  # terms: 1^3 + 3^3 + 3^3 + 1^3 = 1 + 27 + 27 + 1 = 56
    assert solution(4) == 170  # terms: 1^3 + 4^3 + 6^3 + 4^3 + 1^3 = 1 + 64 + 216 + 64 + 1 = 346

def test_solution_for_edge_case():
    assert solution(0) == 1  # Check edge case where n=0

def test_solution_for_performance():
    assert solution(10) == 184756  # Calculating does not have to be manually verified, but should run efficiently

<|Test End|>