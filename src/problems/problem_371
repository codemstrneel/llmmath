QUESTION

Write a function to find the n-th power of individual elements in a list using a lambda function. Additionally, ensure that the function can handle both integer and floating-point numbers within the list, and return the results as a list of floats. The function should also be able to process nested lists of arbitrary depth, applying the n-th power operation to each numerical element throughout the entire structure.

SOL & TESTS

<|Solution Begin|> 
```python
def nth_power_of_elements(lst, n):
    """
    Takes a list of nested structures and returns a new list where each number
    is raised to the n-th power. Handles both integers and floating-point numbers.
    """
    def apply_power(x, n):
        if isinstance(x, (int, float)):
            return float(x ** n)
        elif isinstance(x, list):
            return [apply_power(i, n) for i in x]
        return x  # Return as is if not a number or list

    return apply_power(lst, n)
```
<|Solution End|>
<|Test Begin|>
```python
from solution import nth_power_of_elements

def test_flat_list():
    assert nth_power_of_elements([1, 2, 3], 2) == [1.0, 4.0, 9.0]
    assert nth_power_of_elements([1.5, 2.5, 3.5], 2) == [2.25, 6.25, 12.25]

def test_nested_list():
    assert nth_power_of_elements([[1, 2], [3, 4]], 3) == [[1.0, 8.0], [27.0, 64.0]]
    assert nth_power_of_elements([1, [2, [3, 4]]], 2) == [1.0, [4.0, [9.0, 16.0]]]

def test_empty_list():
    assert nth_power_of_elements([], 3) == []

def test_list_with_non_numbers():
    assert nth_power_of_elements([1, 'a', [2, 'b']], 2) == [1.0, 'a', [4.0, 'b']]

def test_negative_and_float_powers():
    assert nth_power_of_elements([1, 4, 9], 0.5) == [1.0, 2.0, 3.0]
    assert nth_power_of_elements([-1, -8, -27], 1) == [-1.0, -8.0, -27.0]
```
<|Test End|>