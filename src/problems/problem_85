QUESTION

Write a Python function that, given a number, returns a sorted list of all its odd factors using heap sort.

SOLUTION/TESTS

<|Solution Begin|>
def solution(n):
    """
    Returns a sorted list of all odd factors of the given number n using heap sort.
    """
    def heapify(arr, n, i):
        largest = i
        left = 2 * i + 1
        right = 2 * i + 2

        if left < n and arr[left] > arr[largest]:
            largest = left

        if right < n and arr[right] > arr[largest]:
            largest = right

        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]  # swap
            heapify(arr, n, largest)

    def heap_sort(arr):
        n = len(arr)

        for i in range(n // 2 - 1, -1, -1):
            heapify(arr, n, i)

        for i in range(n-1, 0, -1):
            arr[i], arr[0] = arr[0], arr[i]  # swap
            heapify(arr, i, 0)

    if n < 1:
        return []

    odd_factors = [i for i in range(1, n+1) if n % i == 0 and i % 2 != 0]

    heap_sort(odd_factors)

    return odd_factors
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_single_odd_factor():
    assert solution(1) == [1]
    assert solution(3) == [1, 3]

def test_solution_multiple_odd_factors():
    assert solution(9) == [1, 3, 9]
    assert solution(15) == [1, 3, 5, 15]
    assert solution(21) == [1, 3, 7, 21]

def test_solution_even_number_with_odd_factors():
    assert solution(12) == [1, 3]
    assert solution(18) == [1, 3, 9]

def test_solution_no_odd_factors():
    assert solution(2) == [1]

def test_solution_large_number():
    assert solution(45) == [1, 3, 5, 9, 15, 45]

def test_solution_various_number_types():
    assert solution(0) == []
    assert solution(16) == [1]
    assert solution(27) == [1, 3, 9, 27]

def test_solution_negative_number():
    assert solution(-5) == []
<|Test End|>