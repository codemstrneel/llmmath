QUESTION

Write a Python function to process a list comprising integers, floating-point numbers, and strings. The function should return a tuple containing the following two elements:

1. A dictionary where each key is a unique string from the list, and its value is the frequency of that string in the list.

2. Another dictionary where each key is a unique integer derived by rounding the floating-point numbers in the list. The associated value should be a list of consecutive integers that appear after rounding all floating-point numbers.

SOL & TESTS

<|Solution Begin|>
```python
def process_items(items):
    """
    Process a list of items consisting of integers, floating-point numbers, and strings.
    
    Returns:
        tuple: A tuple containing two dictionaries:
            1. A dictionary of string frequencies.
            2. A dictionary where keys are integers from rounding floats 
               and values are lists of consecutive integers after rounding.
    """
    from collections import defaultdict
    import math

    string_count = defaultdict(int)
    rounded_ints = defaultdict(list)

    for item in items:
        if isinstance(item, str):
            string_count[item] += 1
        elif isinstance(item, (float, int)):
            rounded_value = round(item)
            rounded_ints[rounded_value].append(rounded_value)

    # Remove duplicates while maintaining order in the lists of rounded ints
    for key in rounded_ints:
        seen = set()
        rounded_ints[key] = [x for x in rounded_ints[key] if not (x in seen or seen.add(x))]

    return dict(string_count), dict(rounded_ints)
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_items

def test_empty_list():
    assert process_items([]) == ({}, {})

def test_only_strings():
    items = ["apple", "banana", "apple", "orange"]
    string_result, int_result = process_items(items)
    assert string_result == {"apple": 2, "banana": 1, "orange": 1}
    assert int_result == {}

def test_only_floats_and_ints():
    items = [3.2, 3.6, 2, 2.1, 4.0, -1.9]
    string_result, int_result = process_items(items)
    assert string_result == {}
    assert int_result == {3: [3, 3], 2: [2, 2], 4: [4], -2: [-2]}

def test_mixed_list():
    items = ["apple", 4.5, "banana", 3.7, "apple", 3.0, 4]
    string_result, int_result = process_items(items)
    assert string_result == {"apple": 2, "banana": 1}
    assert int_result == {5: [5], 4: [4], 3: [3]}

def test_integers_and_rounded_floats_consistency():
    items = [1.49, 1.50, 2.5, 3, "hello", "world", "hello"]
    string_result, int_result = process_items(items)
    assert string_result == {"hello": 2, "world": 1}
    assert int_result == {1: [1], 2: [2], 3: [3]}

def test_no_redundant_integers():
    items = [1.2, 1.8, 2.3, 2.7, "test"]
    string_result, int_result = process_items(items)
    assert string_result == {"test": 1}
    assert int_result == {1: [1], 2: [2, 2], 3: [3]}
```
<|Test End|>