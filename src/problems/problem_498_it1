QUESTION

Write a Python function to calculate the sum of the first n odd natural numbers, and then verify that the result is equal to the square of n.

SOLUTION/TESTS

<|Solution Begin|>
def solution(n):
    """
    Returns the sum of the first n odd natural numbers.
    """
    return sum(range(1, 2*n, 2))
<|Solution End|>
<|Test Begin|>
def test_solution_sum_of_odds():
    # Basic test for n = 1
    assert solution(1) == 1
    
    # Test for n = 2 (Sum: 1 + 3 = 4)
    assert solution(2) == 4

    # Test for n = 3 (Sum: 1 + 3 + 5 = 9)
    assert solution(3) == 9

    # Test for n = 4 (Sum: 1 + 3 + 5 + 7 = 16)
    assert solution(4) == 16

    # Test for n = 5 (Sum: 1 + 3 + 5 + 7 + 9 = 25)
    assert solution(5) == 25

    # A larger test for n = 10 (Sum: 1 + 3 + ... + 19 = 100)
    assert solution(10) == 100
    
    # Edge case test with n = 0 (Sum: 0)
    assert solution(0) == 0

def test_solution_square_property():
    # Ensuring that sum of the first n odd numbers equals n^2
    for n in range(1, 100):
        assert solution(n) == n**2
<|Test End|>