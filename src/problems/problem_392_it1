QUESTION

Write a function to perform chunking of tuples each of size n, ensuring that the function can handle large tuples efficiently both in terms of time and space complexity.

SOLUTION/TESTS

<|Solution Begin|>
def solution(input_tuple, n):
    """
    Splits the input tuple into chunks of size n.
    
    Args:
    input_tuple (tuple): The tuple to split into chunks.
    n (int): The size of each chunk.
    
    Returns:
    list: A list of tuples, where each tuple is of size n (except possibly the last one).
    """
    if n <= 0:
        raise ValueError("n must be greater than 0")
    return [input_tuple[i:i + n] for i in range(0, len(input_tuple), n)]
<|Solution End|>
<|Test Begin|>
from solution import solution
import pytest

def test_chunking_exact_divisions():
    assert solution((1, 2, 3, 4, 5, 6), 2) == [(1, 2), (3, 4), (5, 6)]

def test_chunking_with_leftover():
    assert solution((1, 2, 3, 4, 5), 2) == [(1, 2), (3, 4), (5,)]
    
def test_chunking_single_element():
    assert solution((1,), 3) == [(1,)]

def test_chunking_entire_tuple():
    assert solution((1, 2, 3), 3) == [(1, 2, 3)]

def test_chunking_empty_tuple():
    assert solution((), 3) == []

def test_chunking_large_tuple():
    large_tuple = tuple(range(10000))
    assert solution(large_tuple, 1000)[0] == tuple(range(1000))
    assert len(solution(large_tuple, 1000)) == 10

def test_chunking_n_greater_than_tuple_size():
    assert solution((1, 2, 3, 4, 5), 10) == [(1, 2, 3, 4, 5)]

def test_chunking_with_n_as_one():
    assert solution((1, 2, 3, 4, 5), 1) == [(1,), (2,), (3,), (4,), (5,)]

def test_invalid_chunk_size():
    with pytest.raises(ValueError):
        solution((1, 2, 3), 0)
        
    with pytest.raises(ValueError):
        solution((1, 2, 3), -1)
<|Test End|>