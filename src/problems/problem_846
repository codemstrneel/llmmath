QUESTION

Write a function to determine if a given string is a valid IPv4 address using regex. An IPv4 address consists of four numbers (each ranging from 0 to 255) separated by periods.

SOL & TESTS

<|Solution Begin|> 
```python
import re

def is_valid_ipv4_address(ip):
    """
    Returns True if the given string is a valid IPv4 address, otherwise returns False.
    """
    pattern = re.compile(r'^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$')
    match = pattern.match(ip)
    if not match:
        return False

    # Check that each of the captured groups is a number between 0 and 255
    return all(0 <= int(byte) <= 255 for byte in match.groups())
```
<|Solution End|>
<|Test Begin|>
```python
from solution import is_valid_ipv4_address

def test_valid_ipv4_addresses():
    assert is_valid_ipv4_address("192.168.0.1") is True
    assert is_valid_ipv4_address("255.255.255.255") is True
    assert is_valid_ipv4_address("0.0.0.0") is True

def test_invalid_ipv4_addresses():
    assert is_valid_ipv4_address("256.256.256.256") is False
    assert is_valid_ipv4_address("192.168.1") is False
    assert is_valid_ipv4_address("192.168.1.1.1") is False
    assert is_valid_ipv4_address("192.168.1.abc") is False
    assert is_valid_ipv4_address("192.168.1.256") is False
    assert is_valid_ipv4_address("") is False

def test_edge_case_ipv4_addresses():
    assert is_valid_ipv4_address("0.255.255.255") is True
    assert is_valid_ipv4_address("255.0.0.255") is True
    assert is_valid_ipv4_address("01.02.03.04") is True  # Leading zeros are valid

def test_invalid_format_addresses():
    assert is_valid_ipv4_address("999.999.999.999") is False
    assert is_valid_ipv4_address("1.1.1.") is False
    assert is_valid_ipv4_address(".1.1.1") is False
    assert is_valid_ipv4_address("1.1.1.1.") is False
    assert is_valid_ipv4_address("...") is False
```
<|Test End|>