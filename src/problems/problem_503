QUESTION

**Question:**

Write a Python function that processes a given input URL containing a date in the format `YYYY-MM-DD` and an integer `n`. The function should follow these steps:

1. Use regex to extract the year, month, and day from the URL.
2. Validate if these extracted values represent a real date.
3. Use the extracted and validated date values \([year, month, day]\) to construct a quadratic equation \( year \cdot x^2 + month \cdot x + day = 0 \).
4. Determine if the roots of this quadratic equation are integers.
5. If the roots are integers, do the following:
   - Calculate the sum of all even natural numbers within the range of the values of the integer roots, inclusive.
   - Use this sum to determine a percentage length of the list comprising integers from 1 to `n`.
   - Split the list `[1, 2, ..., n]` at the calculated percentage length.
   - Reverse each segment of the list.
   - Concatenate these reversed segments back together.
6. If the roots are not integers, return the list from `[1, 2, ..., n]` unchanged.

### Example:

For the URL `"https://example.com/date/2022-03-10/info"` and `n=20`, the quadratic is \(2022x^2 + 3x + 10 = 0\). Assume the roots are integers 1 and 2. The sum of even natural numbers in this range is 2, leading to splitting the list at 10% of its length, approximated as index 2. Lists provided by segments `1-2` and `3-20` are reversed and concatenated back as `[2, 1, 20, 19, ..., 3]`.

### Constraints:

- The URL always contains a date in the format `YYYY-MM-DD`.
- Assume `n` will be no greater than 1000.
- If rounding is required for decimal values, use standard Python rounding rules.
- Assume that the input URL is correctly formatted with a date segment, but the actual date validity needs to be checked separately.

SOL & TESTS

```python
import re
from datetime import datetime
from math import isqrt

def process_url(url, n):
    # Extract date using regex
    date_pattern = r"(\d{4})-(\d{2})-(\d{2})"
    matched = re.search(date_pattern, url)

    if not matched:
        return list(range(1, n + 1))
    
    year, month, day = map(int, matched.groups())

    # Validate date
    try:
        datetime(year, month, day)
    except ValueError:
        return list(range(1, n + 1))

    # Calculate roots of the quadratic equation
    discriminant = month**2 - 4 * year * day
    if discriminant < 0:
        return list(range(1, n + 1))

    sqrt_disc = isqrt(discriminant)
    
    if sqrt_disc * sqrt_disc != discriminant:
        return list(range(1, n + 1))

    root1 = (-month + sqrt_disc) // (2 * year)
    root2 = (-month - sqrt_disc) // (2 * year)

    if root1 * 2 * year != -month + sqrt_disc or root2 * 2 * year != -month - sqrt_disc:
        return list(range(1, n + 1))

    # Ensure roots are within correct range
    if root1 > root2:
        root1, root2 = root2, root1

    # Calculate sum of even numbers within the range between roots (inclusive)
    sum_of_evens = sum(x for x in range(root1, root2 + 1) if x % 2 == 0)

    # Calculate fraction of list length
    percentage_length = round(n * sum_of_evens / 100)

    # Split and reverse segments
    original_list = list(range(1, n + 1))
    split_point = percentage_length
    reversed_list = original_list[0:split_point][::-1] + original_list[split_point:][::-1]

    return reversed_list
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_url

def test_process_url_valid_date_with_integer_roots():
    url = "https://example.com/date/2022-03-10/info"
    n = 20
    result = process_url(url, n)
    expected = [2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3]
    assert result == expected

def test_process_url_invalid_date():
    url = "https://example.com/date/2022-02-30/info"
    n = 10
    result = process_url(url, n)
    expected = list(range(1, n + 1))
    assert result == expected

def test_process_url_valid_date_no_integer_roots():
    url = "https://example.com/date/2022-03-01/info"
    n = 15
    result = process_url(url, n)
    expected = list(range(1, n + 1))
    assert result == expected

def test_process_url_invalid_date_format():
    url = "https://example.com/date/abcd-ef-gh/info"
    n = 5
    result = process_url(url, n)
    expected = list(range(1, n + 1))
    assert result == expected

def test_process_url_valid_date_one_root():
    url = "https://example.com/date/2000-01-01/info"
    n = 10
    result = process_url(url, n)
    expected = list(range(1, n + 1))
    assert result == expected
```
<|Test End|>