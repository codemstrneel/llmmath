QUESTION

Write a function that takes two inputs: a string and a list of numbers. The function should return a dictionary where the keys are the most common alphanumeric characters from the string that appear at the end of the string, and the values are the list of numbers divisible by the number of occurrences of each character.

SOLUTION/TESTS

To solve this problem, we will create a function `solution` that takes a string and a list of numbers as input. The function should identify the most common alphanumeric characters that appear at the end of the string and return a dictionary. The keys in this dictionary will be these characters, and the values will be lists of numbers from the input list that are divisible by the frequency of occurrence of the corresponding character.

Let's implement this solution along with unit tests to verify our function.

<|Solution Begin|>
def solution(s: str, numbers: list) -> dict:
    from collections import Counter
    import re
    
    # Find all alphanumeric characters at the end of the string
    # Reverse the string and match to find the last contiguous sequence of alphanumeric characters
    alphanum_at_end = re.findall(r'[a-zA-Z0-9]+', s[::-1])
    alphanum_at_end = ''.join(alphanum_at_end)[::-1]

    # Calculate frequency of characters in the alphanumeric string found
    char_frequency = Counter(alphanum_at_end)
    
    # Find max frequency
    if not char_frequency:
        return {}  # In case no alphanumeric characters present
    
    max_count = max(char_frequency.values())
    
    # Find characters with max frequency
    max_chars = {char for char, count in char_frequency.items() if count == max_count}

    # Create result dictionary
    result = {}
    for char in max_chars:
        freq = char_frequency[char]
        result[char] = [num for num in numbers if num % freq == 0]

    return result
<|Solution End|>

<|Test Begin|>
def test_solution_empty_string():
    assert solution("", [1, 2, 3]) == {}

def test_solution_no_numbers_divisible():
    assert solution("aaa", [1, 2, 3]) == {'a': []}

def test_solution_single_character():
    assert solution("abc", [3, 6, 9]) == {'c': [3, 6, 9]}

def test_solution_multiple_characters_same_frequency():
    assert solution("aabbcc123", [2, 4, 6, 8, 12, 48]) == {'c': [4, 8, 12, 48], '3': [12]}

def test_solution_no_alphanumeric_end():
    assert solution("!!!abc!!!", [1, 2, 3, 6]) == {}

def test_solution_complex_string():
    assert solution("xx231122112", [11, 22, 33, 44, 55]) == {'1': [11, 22, 33, 44, 55], '2': [22, 44]}

def test_solution_only_non_alphanumeric():
    assert solution("!!!###", [1, 2, 3]) == {}

def test_solution_numbers_with_zero_divisibility():
    assert solution("foo123", [0, 1, 2]) == {'3': [0], 'o': []}

def test_solution_all_even():
    assert solution("even1111", [2, 4, 8, 16]) == {'1': [2, 4, 8, 16]}
<|Test End|>