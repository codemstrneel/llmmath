QUESTION

Write a function that takes in a binary tree and returns the sum of two lists where each list is generated by applying a lambda function on the heights of all leaf nodes. The first list should contain the Fibonacci numbers corresponding to these heights calculated using recursion, while the second list should contain polite numbers corresponding to these heights. Use the `map` function to generate these lists.

SOLUTION/TESTS

Here is the Python solution to the given task. I'll write a function called `solution` that performs the required operations on a binary tree, as well as the unit tests to verify the correctness of the solution.

```python
<|Solution Begin|>
# We'll define a simple tree node structure to work with.
class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right
        
def fibonacci(n):
    """Calculate Fibonacci number recursively."""
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

def polite_numbers(n):
    """Get polite numbers up to n using sequence: n(n+1)/2 - 1."""
    return (n * (n + 1)) // 2 - 1

def solution(root):
    """ 
    Takes in a binary tree and returns the sum of two lists. One list contains Fibonacci
    numbers of the heights of leaf nodes, and the other contains polite numbers.
    """
    def get_leaf_heights(node, current_height):
        if node is None:
            return []
        if node.left is None and node.right is None:
            return [current_height]
        return get_leaf_heights(node.left, current_height + 1) + get_leaf_heights(node.right, current_height + 1)
    
    # Get heights of all leaf nodes
    leaf_heights = get_leaf_heights(root, 0)
    
    # Generate lists by applying mappings as lambda functions
    fib_list = list(map(lambda x: fibonacci(x), leaf_heights))
    polite_list = list(map(lambda x: polite_numbers(x), leaf_heights))
    
    return sum(fib_list), sum(polite_list)
<|Solution End|>
<|Test Begin|>
def test_solution_empty_tree():
    assert solution(None) == (0, 0)

def test_solution_one_node():
    root = TreeNode(1)
    assert solution(root) == (1, -1) # Fibonacci(0) = 0 and polite(0) = -1
    
def test_solution_balanced_tree():
    root = TreeNode(1, TreeNode(2), TreeNode(3))
    # Leaf heights are [1, 1]
    # Fibonacci numbers [1, 1], Polite numbers [0, 0]
    assert solution(root) == (2, 0)

def test_solution_unbalanced_tree():
    root = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3))
    # Leaf heights are [2, 1]
    # Fibonacci numbers [1, 1], Polite numbers [2, 0]
    assert solution(root) == (2, 2)

def test_solution_complex_tree():
    root = TreeNode(1, 
                    TreeNode(2, TreeNode(4), TreeNode(5)), 
                    TreeNode(3, None, TreeNode(6)))
    # Leaf heights are [2, 2, 2]
    # Fibonacci numbers [1, 1, 1], Polite numbers [2, 2, 2]
    assert solution(root) == (3, 6)
<|Test End|>
```

The solution involves calculating the Fibonacci numbers and polite numbers for the heights of the leaf nodes of a binary tree. We traverse the tree to find the heights of its leaves, then use the `map` function with lambdas to apply the Fibonacci and polite number calculations. The unit tests check various tree structures, including an empty tree, a single node tree, balanced and unbalanced trees, and more complex structures.