QUESTION

Create a function that takes a list of strings where each string is a sentence containing both numbers and words. The function should perform the following operations:

1. Reverse the order of words in each sentence while maintaining the original character order within each word.
2. Identify all numbers present in the sentence and calculate the total sum of these numbers for each sentence.
3. Return a list of tuples where each tuple contains the modified sentence (with words reversed) and the sum of numbers identified in that sentence.

For example, given the input list `["The price is 45 dollars", "123 apples cost 15"]`, the output should be `[("dollars 45 is price The", 45), ("15 cost apples 123", 138)]`.

SOL & TESTS

<|Solution Begin|>
```python
def process_sentences(sentences):
    """
    Takes a list of sentences, reverses the order of words in each sentence while maintaining
    character order within each word, and sums all numbers found in each sentence.
    
    Args:
    - sentences (list): A list of strings, each being a sentence.

    Returns:
    - list of tuples: Each tuple contains the modified sentence and the sum of numbers in it.
    """
    result = []

    for sentence in sentences:
        words = sentence.split()
        reversed_sentence = ' '.join(reversed(words))
        
        sum_of_numbers = sum(int(word) for word in words if word.isdigit())
        
        result.append((reversed_sentence, sum_of_numbers))

    return result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_sentences

def test_reverse_words():
    assert process_sentences(["Hello world"]) == [("world Hello", 0)]
    
def test_single_number_sentence():
    assert process_sentences(["The price is 45 dollars"]) == [("dollars 45 is price The", 45)]

def test_multiple_numbers_sentence():
    assert process_sentences(["123 apples cost 15"]) == [("15 cost apples 123", 138)]

def test_mixed_sentences():
    sentences = ["The price is 45 dollars", "123 apples cost 15", "No numbers here", "0 is zero"]
    expected = [
        ("dollars 45 is price The", 45),
        ("15 cost apples 123", 138),
        ("here numbers No", 0),
        ("zero is 0", 0)
    ]
    assert process_sentences(sentences) == expected

def test_empty_sentence():
    assert process_sentences([""]) == [("", 0)]

def test_sentence_with_only_numbers():
    assert process_sentences(["1 2 3 4 5"]) == [("5 4 3 2 1", 15)]
```
<|Test End|>