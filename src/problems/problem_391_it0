QUESTION

Create a function that groups elements of a list into consecutive sublists of length n, discarding any leftover elements that do not fit into a complete sublist.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst, n):
    """
    Groups elements of a list into consecutive sublists of length n,
    discarding any leftover elements that do not fit into a complete sublist.
    
    :param lst: List of elements to be grouped
    :param n: Length of each sublist
    :return: A list of sublists each of length n
    """
    return [lst[i:i+n] for i in range(0, len(lst) - len(lst) % n, n)]
<|Solution End|>

<|Test Begin|>
def test_grouping_exact_division():
    assert solution([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]

def test_grouping_with_remainder():
    assert solution([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6]]

def test_grouping_no_elements():
    assert solution([], 3) == []

def test_grouping_single_element():
    assert solution([1], 1) == [[1]]

def test_grouping_with_no_complete_groups():
    assert solution([1, 2], 3) == []

def test_grouping_large_n():
    assert solution([1, 2, 3, 4], 10) == []

def test_grouping_single_group():
    assert solution([1, 2, 3], 3) == [[1, 2, 3]]

def test_grouping_large_list():
    large_list = list(range(1, 101))
    expected = [list(range(i, i+5)) for i in range(1, 96, 5)]
    assert solution(large_list, 5) == expected
<|Test End|>