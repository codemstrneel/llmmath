QUESTION

Write a function to process a list of numerical tuples. For each tuple, calculate the area of a circle using the first element as the radius, and then round the result to the number of decimal places specified by the second element in the tuple. Return a new list with these processed values.

SOLUTION/TESTS

<|Solution Begin|>
import math

def solution(tuple_list):
    """
    Processes a list of tuples, where each tuple contains a radius and
    a number of decimal places. Calculates the area of a circle using the
    radius and rounds it to the specified decimal places.

    Args:
    tuple_list (list of tuples): A list where each tuple contains two elements.
                                 The first element is the radius (float or int),
                                 and the second element is the number of
                                 decimal places (int).

    Returns:
    list: A list of calculated areas rounded to the specified decimal places.
    """
    results = []
    for radius, decimals in tuple_list:
        area = math.pi * (radius ** 2)
        rounded_area = round(area, decimals)
        results.append(rounded_area)
    return results
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_default_cases():
    assert solution([(1, 2), (1, 3), (1, 4)]) == [3.14, 3.142, 3.1416]
    assert solution([(3, 2), (2, 0), (5, 1)]) == [28.27, 13.0, 78.5]

def test_large_radius():
    assert solution([(100, 2), (200, 3)]) == [31415.93, 125663.707]

def test_zero_and_negative_radius():
    assert solution([(0, 2), (-1, 2)]) == [0.00, 3.14]

def test_varied_decimal_places():
    assert solution([(2, 1), (2, 5), (2, 0)]) == [12.6, 12.56637, 13]

def test_no_radius():
    assert solution([]) == []

def test_multiple_same_radius():
    assert solution([(10, 2), (10, 3), (10, 4)]) == [314.16, 314.159, 314.1593]
<|Test End|>