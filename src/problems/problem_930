QUESTION

Write a function to remove all empty tuples, tuples where the first element is `None`, and tuples where all elements are the same from a list of tuples.

SOL & TESTS

<|Solution Begin|> 
```python
def clean_tuples(tuples_list):
    """
    Removes empty tuples, tuples where the first element is None, and tuples 
    where all elements are the same from the given list of tuples.

    Parameters:
    - tuples_list (list): A list of tuples to be cleaned.

    Returns:
    - list: A list of tuples after filtering based on the criteria.
    """
    def is_homogeneous(t):
        return len(set(t)) == 1

    return [
        t for t in tuples_list 
        if t and t[0] is not None and not is_homogeneous(t)
    ]
```
<|Solution End|>

<|Test Begin|>
```python
from solution import clean_tuples

def test_empty_tuple_removal():
    assert clean_tuples([(), (1,), (2, 3)]) == [(1,), (2, 3)]

def test_none_first_element_removal():
    assert clean_tuples([(None, 2), (1, 2), (3, 3)]) == [(1, 2)]

def test_homogeneous_tuple_removal():
    assert clean_tuples([(1, 1, 1), (2, 2, 2), (1, 2), (1, 3, 1)]) == [(1, 2), (1, 3, 1)]

def test_combination_of_removals():
    assert clean_tuples([(None,), (), (1, 1, 1), (None, 1), (2, 5), (5, 5, 5), (1, 2)]) == [(2, 5), (1, 2)]

def test_no_removal_needed():
    assert clean_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]

def test_all_removals():
    assert clean_tuples([]) == []
    assert clean_tuples([(None,), (), (1, 1, 1), (None, 1), (2, 2), (5, 5, 5)]) == []
```
<|Test End|>