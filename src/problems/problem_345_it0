QUESTION

Write a function that takes three inputs: a list of dictionaries, an integer n, and a sorted array with one extra element compared to another sorted array. The function should perform the following tasks: 

1. Calculate the nth Fibonacci number and use it as a key to sort the list of dictionaries. 
2. Identify and return the index of the extra element in the first array. 
3. Check if any of the sequences contained in the dictionaries, once mapped through a transformation where each integer is replaced by the first digit of its factorial, forms a Fibonacci sequence.

Combine these functionalities and return a tuple containing the sorted list of dictionaries, the index of the extra element, and a list of indices of the dictionaries that match the Fibonacci condition. Use recursion where necessary and apply a map function to transform the sequences.

SOLUTION/TESTS

To address the given problem, we'll break down the solution into three primary components, each corresponding to the tasks outlined in the prompt. The final function will return a tuple with results from each of these tasks.

1. **Calculate the nth Fibonacci number**: We'll use a recursive function to compute the Fibonacci number, which will be used as a key to sort the list of dictionaries.

2. **Identify the index of the extra element**: We'll implement a function to detect the index of the extra element between two sorted arrays.

3. **Check sequences for the Fibonacci condition**: We'll transform each sequence contained within each dictionary by mapping integers to the first digit of their factorial. We then check if the transformed sequence forms a Fibonacci sequence.

Let's implement the solution as specified:

```python
<|Solution Begin|>
def nth_fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return nth_fibonacci(n-1) + nth_fibonacci(n-2)

def find_extra_element_index(arr1, arr2):
    # arr1 has one extra element than arr2
    for index in range(len(arr2)):
        if arr1[index] != arr2[index]:
            return index
    return len(arr1) - 1

def first_digit_of_factorial(n):
    if n == 0 or n == 1:
        return 1
    factorial = 1
    for i in range(2, n + 1):
        factorial *= i
    return int(str(factorial)[0])

def is_fibonacci_sequence(seq):
    if len(seq) < 2:
        return False
    a, b = seq[0], seq[1]
    for num in seq[2:]:
        if a + b != num:
            return False
        a, b = b, num
    return True

def solution(dictionaries, n, arr1, arr2):
    # Calculate the nth Fibonacci number
    fib_number = nth_fibonacci(n)
    
    # Sort dictionaries by nth Fibonacci number used as key
    sorted_dicts = sorted(dictionaries, key=lambda d: d.get(fib_number, 0))
    
    # Find the extra element index in arr1
    extra_index = find_extra_element_index(arr1, arr2)
    
    # Check each sequence in the dictionaries
    fib_seq_indices = []
    for idx, d in enumerate(sorted_dicts):
        if 'sequence' in d:
            transformed_sequence = list(map(first_digit_of_factorial, d['sequence']))
            if is_fibonacci_sequence(transformed_sequence):
                fib_seq_indices.append(idx)
    
    return (sorted_dicts, extra_index, fib_seq_indices)
<|Solution End|>
```

Now, let's go ahead and test this implementation with various test cases to ensure everything works as expected:

```python
<|Test Begin|>
from solution import solution

def test_solution_basic():
    dicts = [{'sequence': [5, 7, 12]}, {'sequence': [1, 1, 2, 3]}, {'sequence': [4, 6, 10]}]
    n = 5
    arr1 = [1, 2, 3, 4, 5]
    arr2 = [1, 2, 4, 5]
    expected = (
        [{'sequence': [1, 1, 2, 3]}, {'sequence': [5, 7, 12]}, {'sequence': [4, 6, 10]}],
        2,
        [0]
    )
    assert solution(dicts, n, arr1, arr2) == expected

def test_solution_no_fibonacci_in_list():
    dicts = [{'sequence': [7, 8, 15]}, {'sequence': [9, 9, 18]}, {'sequence': [11, 14, 25]}]
    n = 3
    arr1 = [5, 9, 13]
    arr2 = [5, 13]
    expected = (
        [{'sequence': [7, 8, 15]}, {'sequence': [9, 9, 18]}, {'sequence': [11, 14, 25]}],
        1,
        []
    )
    assert solution(dicts, n, arr1, arr2) == expected

def test_solution_extra_element_at_end():
    dicts = [{'sequence': [13, 21, 34]}, {'sequence': [8, 13, 21]}]
    n = 4
    arr1 = [1, 1, 2, 3, 5, 8]
    arr2 = [1, 1, 2, 3, 5]
    expected = (
        [{'sequence': [8, 13, 21]}, {'sequence': [13, 21, 34]}],
        5,
        [0, 1]
    )
    assert solution(dicts, n, arr1, arr2) == expected

def test_solution_no_sequences_key():
    dicts = [{'data': [1, 2, 3]}, {'data': [2, 3, 5]}]
    n = 6
    arr1 = [7, 11, 13]
    arr2 = [7, 11]
    expected = (
        [{'data': [1, 2, 3]}, {'data': [2, 3, 5]}],
        2,
        []
    )
    assert solution(dicts, n, arr1, arr2) == expected

def test_factorial_single_digit():
    dicts = [{'sequence': [1, 2]}, {'sequence': [2, 3]}, {'sequence': [3, 5]}]
    n = 2
    arr1 = [1, 4, 5, 6]
    arr2 = [1, 5, 6]
    expected = (
        [{'sequence': [1, 2]}, {'sequence': [2, 3]}, {'sequence': [3, 5]}],
        1,
        [0, 1]
    )
    assert solution(dicts, n, arr1, arr2) == expected
<|Test End|>
```

The above solution and test cases appropriately handle the tasks as defined in the problem statement.