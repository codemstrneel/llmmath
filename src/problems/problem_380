QUESTION

Create a function that takes a list of strings as input. Each string can either be a valid email address or a string representation of a float. Your function should return a dictionary with two keys: "emails" and "floats". Under the "emails" key, store a list of unique, valid email addresses found in the input, ensuring there are no consecutive duplicates. Under the "floats" key, store a list of tuples, where each tuple contains two processed elements: the original float converted to a tuple of its integer and decimal parts, and the square of the original float. If a string does not match either type, ignore it.

SOL & TESTS

```python
def process_strings(strings):
    """
    Processes a list of strings to separate valid email addresses and float strings.
    
    Args:
    strings (list): List of strings that are either email addresses or string representations of floats.
    
    Returns:
    dict: Dictionary with keys "emails" and "floats".
    """
    import re
    
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    result = {"emails": [], "floats": []}
    seen_emails = set()

    for s in strings:
        # Process floats
        try:
            num = float(s)
            int_part = int(num)
            decimal_part = num - int_part
            result["floats"].append(((int_part, decimal_part), num ** 2))
            continue
        except ValueError:
            pass
        
        # Process emails
        if re.match(email_pattern, s) and (s not in seen_emails or (result["emails"] and result["emails"][-1] != s)):
            result["emails"].append(s)
            seen_emails.add(s)
    
    return result
```

<|Solution End|>

<|Test Begin|>
```python
from solution import process_strings

def test_only_emails():
    assert process_strings(['test@example.com', 'user@domain.org']) == {
        "emails": ['test@example.com', 'user@domain.org'],
        "floats": []
    }

def test_only_floats():
    assert process_strings(['3.14', '2.718']) == {
        "emails": [],
        "floats": [((3, 0.14000000000000012), 9.8596), ((2, 0.7180000000000002), 7.389524)]
    }

def test_emails_and_floats_mixed():
    assert process_strings(['test@example.com', '42.0', 'user@domain.org', '2.5']) == {
        "emails": ['test@example.com', 'user@domain.org'],
        "floats": [((42, 0.0), 1764.0), ((2, 0.5), 6.25)]
    }

def test_ignore_invalid_strings():
    assert process_strings(['notAnEmail', '123.456', 'simple@domain']) == {
        "emails": [],
        "floats": [((123, 0.456), 15241.383936)]
    }

def test_remove_consecutive_duplicate_emails():
    assert process_strings(['test@example.com', 'test@example.com', 'user@domain.org']) == {
        "emails": ['test@example.com', 'user@domain.org'],
        "floats": []
    }

def test_empty_input():
    assert process_strings([]) == {
        "emails": [],
        "floats": []
    }

def test_email_and_float_with_duplicates():
    assert process_strings(['test@example.com', '3.0', 'test@example.com', '3.0']) == {
        "emails": ['test@example.com'],
        "floats": [((3, 0.0), 9.0), ((3, 0.0), 9.0)]
    }
```
<|Test End|>