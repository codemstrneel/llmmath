QUESTION

Write a function that takes a list of floats and a corresponding string of comma-separated numbers. For each float in the list, determine if it has the same number of digits after the decimal point as the corresponding number in the string. The function should return a list of tuples, each containing the float, the corresponding number from the string, and a boolean indicating whether they have the same number of decimal places.

SOLUTION/TESTS

<|Solution Begin|>
def solution(floats, str_numbers):
    """
    Determines if each float in the list has the same number of
    digits after the decimal point as the corresponding number
    in the comma-separated string. Returns a list of tuples.

    :param floats: List of floats
    :param str_numbers: String of comma-separated numbers
    :return: List of tuples (float, str_number, boolean)
    """
    str_nums_list = str_numbers.split(',')
    result = []
    for flt, str_num in zip(floats, str_nums_list):
        decimal_flt = str(flt).split('.')[-1] if '.' in str(flt) else ''
        decimal_str_num = str_num.split('.')[-1] if '.' in str_num else ''
        result.append((flt, str_num, len(decimal_flt) == len(decimal_str_num)))
    return result
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_same_decimal_length():
    floats = [1.23, 4.567, 8.9]
    str_numbers = '1.23,4.567,8.900'
    expected = [
        (1.23, '1.23', True),
        (4.567, '4.567', True),
        (8.9, '8.900', False)
    ]
    assert solution(floats, str_numbers) == expected

def test_different_decimal_length():
    floats = [1.234, 4.56, 7.8901]
    str_numbers = '1.23,4.5678,78.901'
    expected = [
        (1.234, '1.23', False),
        (4.56, '4.5678', False),
        (7.8901, '78.901', False)
    ]
    assert solution(floats, str_numbers) == expected

def test_no_decimal_numbers():
    floats = [1.0, 45.0, 123.0]
    str_numbers = '1,45.0,123.00'
    expected = [
        (1.0, '1', True),
        (45.0, '45.0', True),
        (123.0, '123.00', False)
    ]
    assert solution(floats, str_numbers) == expected

def test_empty_lists():
    floats = []
    str_numbers = ''
    expected = []
    assert solution(floats, str_numbers) == expected

def test_mixed_data():
    floats = [2.345, 67.8, 900.1234]
    str_numbers = '2.34,67.80,900.123'
    expected = [
        (2.345, '2.34', False),
        (67.8, '67.80', False),
        (900.1234, '900.123', False)
    ]
    assert solution(floats, str_numbers) == expected

<|Test End|>