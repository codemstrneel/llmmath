QUESTION

Write a Python function that processes a list of strings where each string is composed of a series of paired substrings. Each substring pair consists of a lowercase alphabet letter representing a city, followed by a number indicating the distance to the next city (e.g., "a12b24c30"). Your tasks are as follows:

1. Extract and separate the city labels and distances using regular expressions.
2. Determine if the set of distances could potentially form a cycle (i.e., the distance sum must be positive and not all distances can be identical).
3. If a valid cycle is possible, calculate the average distance and variance of the distances.
4. Return a list of tuples, each containing the average distance and variance for strings where a valid cycle is found. If a valid cycle is not found, record the tuple as (None, None).

This problem involves working with strings, data parsing, validating mathematical conditions for cycles, and performing statistical calculations with distances.

SOL & TESTS

```python
import re
from typing import List, Tuple, Union

def process_city_distance_strings(strings: List[str]) -> List[Tuple[Union[float, None], Union[float, None]]]:
    """
    Processes a list of strings to extract city distances and evaluate if they can form a valid cycle.
    
    Returns a list of tuples containing the average distance and variance for strings where a valid cycle is found.
    If a valid cycle is not found, the tuple contains (None, None).
    """
    results = []

    for s in strings:
        # Extract city labels and distances
        matches = re.findall(r"([a-z])(\d+)", s)
        distances = [int(distance) for _, distance in matches]

        # Check if the distances form a potential cycle
        if len(distances) == 0 or sum(distances) <= 0 or len(set(distances)) <= 1:
            results.append((None, None))
            continue
        
        # Calculate average distance
        avg_distance = sum(distances) / len(distances)
        
        # Calculate variance
        variance = sum((d - avg_distance) ** 2 for d in distances) / len(distances)
        
        results.append((avg_distance, variance))

    return results
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_city_distance_strings

def test_single_string_valid_cycle():
    strings = ["a12b24c18"]
    result = process_city_distance_strings(strings)
    assert result == [(18.0, 18.0)]  # distances are [12, 24, 18]

def test_single_string_no_cycle():
    strings = ["a10b10c10d10"]
    result = process_city_distance_strings(strings)
    assert result == [(None, None)]  # all distances are identical, no cycle

def test_multiple_strings_mixed():
    strings = ["a15b15c15", "a5b10c15d20", "x20y20z20"]
    result = process_city_distance_strings(strings)
    assert result == [(None, None), (12.5, 31.25), (None, None)]  # first and last have identical distances

def test_empty_input_string():
    strings = [""]
    result = process_city_distance_strings(strings)
    assert result == [(None, None)]  # no valid distances

def test_no_distances():
    strings = ["abc", "a1b", "z"]
    result = process_city_distance_strings(strings)
    assert result == [(None, None), (None, None), (None, None)]  # strings with no valid distance numbering

def test_varied_distances():
    strings = ["m5m5m5m", "a1b2c3", "p3q6r9"]
    result = process_city_distance_strings(strings)
    assert result == [(None, None), (2.0, 0.6666666666666666), (6.0, 6.0)]  # valid cycle only in second and third

```
<|Test End|>