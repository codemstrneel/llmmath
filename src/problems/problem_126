QUESTION

Create a function that first identifies and returns all equilibrium indices of a given list of floating-point numbers. Then, for each equilibrium index found, check if the number at that index is even or odd using its ceiling value. Return a dictionary where each equilibrium index is a key, and its value is a boolean indicating whether the ceiling value of that number is even or odd. Finally, the function should match and return a list of strings from a given list of strings, where each string contains an 'a' followed by zero or more 'b's.

In this question, you will be practicing the concepts of array indexing, mathematical conditions, string pattern matching, and combining these functionalities into a cohesive solution.

SOL & TESTS

```python
<|Solution Begin|> 
import math
import re

def find_equilibrium_indices(nums):
    # Identify all equilibrium indices
    total_sum = sum(nums)
    left_sum = 0
    equilibrium_indices = []
    
    for i, num in enumerate(nums):
        total_sum -= num
        
        if left_sum == total_sum:
            equilibrium_indices.append(i)
        
        left_sum += num
    
    return equilibrium_indices

def ceiling_parity_at_indices(nums, indices):
    # Determine even or odd parity of ceiling values at given indices
    parity_dict = {}
    for index in indices:
        ceiling_value = math.ceil(nums[index])
        parity_dict[index] = (ceiling_value % 2 == 0)
    
    return parity_dict

def find_strings_with_pattern(strings):
    # Find all strings that match the pattern 'a' followed by zero or more 'b's
    pattern = re.compile(r'^ab*$')
    matching_strings = [s for s in strings if pattern.match(s)]
    return matching_strings

def process_numbers_and_strings(nums, strings):
    equilibrium_indices = find_equilibrium_indices(nums)
    parity_dict = ceiling_parity_at_indices(nums, equilibrium_indices)
    matching_strings = find_strings_with_pattern(strings)
    return parity_dict, matching_strings
<|Solution End|>
```
```python
<|Test Begin|>
from solution import process_numbers_and_strings

def test_process_numbers_and_strings():
    # Test case 1: No equilibrium indices and no matching strings
    nums = [1.5, -1.5, 3.0]
    strings = ["abc", "a", "ab"]
    parity_dict, matching_strings = process_numbers_and_strings(nums, strings)
    assert parity_dict == {}
    assert matching_strings == ["a", "ab"]
    
    # Test case 2: One equilibrium index, mixed parity
    nums = [-7, 1, 5, 2, -1, 10, 2, 2]
    strings = ["ab", "b", "aa", "abb", "adb"]
    parity_dict, matching_strings = process_numbers_and_strings(nums, strings)
    assert parity_dict == {3: True}
    assert matching_strings == ["ab", "abb"]
    
    # Test case 3: Multiple equilibrium indices
    nums = [1.5, 0.5, 0.0, -2.0, 2.0, 1.5]
    strings = ["a", "ab", "bbb", "abb"]
    parity_dict, matching_strings = process_numbers_and_strings(nums, strings)
    assert parity_dict == {2: True, 3: False}
    assert matching_strings == ["a", "ab", "abb"]

def test_process_empty_nums():
    # Test case 4: Empty list of numbers
    nums = []
    strings = ["ab", "bbb"]
    parity_dict, matching_strings = process_numbers_and_strings(nums, strings)
    assert parity_dict == {}
    assert matching_strings == ["ab"]

def test_process_empty_strings():
    # Test case 5: Empty list of strings
    nums = [1.0, 2.0, -1.0, 1.0, -1.0]
    strings = []
    parity_dict, matching_strings = process_numbers_and_strings(nums, strings)
    assert parity_dict == {}
    assert matching_strings == []

def test_process_both_empty():
    # Test case 6: Both lists are empty
    nums = []
    strings = []
    parity_dict, matching_strings = process_numbers_and_strings(nums, strings)
    assert parity_dict == {}
    assert matching_strings == []
<|Test End|>
```