QUESTION

Write a function that takes a list of integers and an integer k, and returns the k elements with the smallest absolute difference from the arithmetic mean of the list. Implement your solution using a heap data structure.

SOLUTION/TESTS

<|Solution Begin|>
import heapq

def solution(numbers, k):
    """
    Returns the k elements from the list numbers with the smallest absolute difference
    from the arithmetic mean of the list.
    """
    if not numbers or k <= 0:
        return []

    mean = sum(numbers) / len(numbers)
    # Create a min-heap based on absolute difference from the mean
    heap = [(abs(num - mean), num) for num in numbers]
    heapq.heapify(heap)

    # Extract the k smallest elements from the heap
    result = []
    for _ in range(min(k, len(numbers))):
        result.append(heapq.heappop(heap)[1])

    return result
<|Solution End|>
<|Test Begin|>
def test_solution():
    assert set(solution([1, 2, 3, 4, 5], 2)) == {2, 3}
    assert set(solution([10, 12, 14, 16, 18], 3)) == {12, 14, 16}
    assert solution([5, 5, 5, 5], 4) == [5, 5, 5, 5]
    assert solution([1, 2, 3, 4, 5], 0) == []
    assert solution([], 3) == []
    assert set(solution([-10, -20, 0, 10, 20], 2)) == {0, 10}
    assert set(solution([7, 8, 9], 3)) == {7, 8, 9}
    mean_6_7 = (6+7) / 2
    assert set(solution([1, 6, 6, 7, 7, 12], 4)) == {6, 6, 7, 7}
<|Test End|>