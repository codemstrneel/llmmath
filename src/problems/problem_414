QUESTION

Create a Python function that takes a list of sentences and returns a dictionary for each sentence containing two keys: "word_frequencies" and "shortest_word_length". The "word_frequencies" key should map to another dictionary that holds the frequency of each word in the sentence. The "shortest_word_length" key should map to the length of the shortest word in the sentence. Each sentence should be treated independently.

SOL & TESTS

<|Solution Begin|>
```python
from collections import Counter

def analyze_sentences(sentences):
    """
    Analyzes a list of sentences and returns a list of dictionaries for each sentence,
    with keys "word_frequencies" and "shortest_word_length".
    
    Parameters:
    sentences (list): A list of strings where each string is a sentence.
    
    Returns:
    list: A list of dictionaries with the word frequencies and shortest word length for each sentence.
    """
    results = []
    for sentence in sentences:
        words = sentence.split()
        word_frequencies = Counter(words)
        shortest_word_length = min(len(word) for word in words) if words else 0
        results.append({
            "word_frequencies": word_frequencies,
            "shortest_word_length": shortest_word_length
        })
    return results
```
<|Solution End|>

<|Test Begin|>
```python
from solution import analyze_sentences

def test_analyze_empty_sentence():
    result = analyze_sentences([""])
    assert result == [{"word_frequencies": Counter(), "shortest_word_length": 0}]

def test_analyze_single_sentence():
    result = analyze_sentences(["hello world hello"])
    expected = [{"word_frequencies": Counter({"hello": 2, "world": 1}), "shortest_word_length": 5}]
    assert result == expected

def test_analyze_multiple_sentences():
    sentences = ["hello world", "a quick brown fox", "jumps over the lazy", "dog"]
    result = analyze_sentences(sentences)
    expected = [
        {"word_frequencies": Counter({"hello": 1, "world": 1}), "shortest_word_length": 5},
        {"word_frequencies": Counter({"a": 1, "quick": 1, "brown": 1, "fox": 1}), "shortest_word_length": 1},
        {"word_frequencies": Counter({"jumps": 1, "over": 1, "the": 1, "lazy": 1}), "shortest_word_length": 3},
        {"word_frequencies": Counter({"dog": 1}), "shortest_word_length": 3}
    ]
    assert result == expected

def test_analyze_sentence_with_same_length_words():
    sentence = ["cat bat hat", "apple pear grape"]
    result = analyze_sentences(sentence)
    expected = [
        {"word_frequencies": Counter({"cat": 1, "bat": 1, "hat": 1}), "shortest_word_length": 3},
        {"word_frequencies": Counter({"apple": 1, "pear": 1, "grape": 1}), "shortest_word_length": 4}
    ]
    assert result == expected

def test_analyze_sentence_with_punctuation():
    result = analyze_sentences(["hello, world!"])
    expected = [{"word_frequencies": Counter({"hello,": 1, "world!": 1}), "shortest_word_length": 6}]
    assert result == expected
```
<|Test End|>