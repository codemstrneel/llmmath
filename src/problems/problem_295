QUESTION

Write a function to identify and count the number of contiguous subarrays within an array of integers that have the same value.

SOL & TESTS

Sure, let's tackle this problem by writing a function that identifies and counts the number of contiguous subarrays where all elements are the same value in a given array of integers. We will then generate unit tests to verify the correctness of our solution.

```python
<|Solution Begin|>
def count_contiguous_constant_subarrays(arr):
    """
    Counts the number of contiguous subarrays with the same value.
    
    :param arr: List of integers
    :return: Integer count of contiguous subarrays with the same value
    """
    if not arr:
        return 0
    
    count = 0
    n = len(arr)
    i = 0
    
    while i < n:
        length = 1
        # Count how long the contiguous section with the same value is
        while i + 1 < n and arr[i] == arr[i + 1]:
            length += 1
            i += 1
        # Add the number of subarrays that can be formed from this contiguous block
        count += (length * (length + 1)) // 2
        i += 1
    
    return count
<|Solution End|>
```

Now, let's write the unit tests using pytest style to ensure our solution works correctly.

```python
<|Test Begin|>
from solution import count_contiguous_constant_subarrays

def test_empty_array():
    assert count_contiguous_constant_subarrays([]) == 0

def test_single_element_array():
    assert count_contiguous_constant_subarrays([1]) == 1

def test_all_same_elements():
    assert count_contiguous_constant_subarrays([1, 1, 1, 1]) == 10  # 4 single, 3 pairs, 2 triplets, 1 quadruplet

def test_no_repetitions():
    assert count_contiguous_constant_subarrays([1, 2, 3, 4, 5]) == 5  # 5 single elements

def test_mixed_array():
    assert count_contiguous_constant_subarrays([1, 2, 2, 3, 3, 3, 4]) == 10  # 1, 2*2, 3*3, 4

def test_varied_lengths():
    assert count_contiguous_constant_subarrays([1, 1, 2, 2, 2, 3]) == 8  # 2 singles, 1 pair, 3 triplets, 1 single

def test_large_contiguous_block():
    assert count_contiguous_constant_subarrays([5] * 100) == 5050  # 100*101//2
    
<|Test End|>
```

This setup provides a comprehensive plan to validate our function. The unit tests cover both edge cases and typical usage scenarios.