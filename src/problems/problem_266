QUESTION

Create a function that takes two lists of key-value pairs and returns a dictionary combining these pairs. If a key appears in both lists, the value from the second list should overwrite the value from the first list.

SOL & TESTS

<|Solution Begin|>
```python
def combine_key_value_pairs(list1, list2):
    """
    Combines two lists of key-value pairs into a dictionary. If a key appears in both lists,
    the value from the second list will overwrite the value from the first list.
    
    :param list1: First list of key-value pairs (tuples).
    :param list2: Second list of key-value pairs (tuples).
    :return: Dictionary with combined key-value pairs.
    """
    combined_dict = dict(list1)
    combined_dict.update(dict(list2))
    return combined_dict
```
<|Solution End|>
<|Test Begin|>
```python
from solution import combine_key_value_pairs

def test_combine_no_overlap():
    list1 = [('a', 1), ('b', 2)]
    list2 = [('c', 3), ('d', 4)]
    assert combine_key_value_pairs(list1, list2) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}

def test_combine_with_overlap():
    list1 = [('a', 1), ('b', 2)]
    list2 = [('b', 3), ('c', 4)]
    assert combine_key_value_pairs(list1, list2) == {'a': 1, 'b': 3, 'c': 4}

def test_combine_empty_first_list():
    list1 = []
    list2 = [('b', 3), ('c', 4)]
    assert combine_key_value_pairs(list1, list2) == {'b': 3, 'c': 4}

def test_combine_empty_second_list():
    list1 = [('a', 1), ('b', 2)]
    list2 = []
    assert combine_key_value_pairs(list1, list2) == {'a': 1, 'b': 2}

def test_combine_both_empty_lists():
    list1 = []
    list2 = []
    assert combine_key_value_pairs(list1, list2) == {}

def test_combine_single_element_lists():
    list1 = [('a', 1)]
    list2 = [('a', 2)]
    assert combine_key_value_pairs(list1, list2) == {'a': 2}
```
<|Test End|>