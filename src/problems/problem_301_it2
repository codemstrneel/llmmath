QUESTION

Write a Python function that takes a nested list of sublists, where each sublist may contain various data types including strings and numbers. Your function should perform the following tasks:

1. For each sublist, identify all string elements and replace every occurrence of the substring 'street' with 'st.'.
2. Extract and convert any numeric strings to floating-point numbers.
3. Create a tuple from these floating-point numbers, ignoring any non-numeric strings.
4. Collect the tuples from all sublists into a master list, which should then be returned as the output of the function. 
5. If a sublist does not contain numeric strings that can be converted to floats, include an empty tuple for that sublist in the master list.

SOLUTION/TESTS

I understand that the solution needs to handle replacement of the substring "street" with "st." in strings, convert numeric strings to floats, and capture these numbers in tuples for each sublist. If there are no convertible numbers, we should return an empty tuple for that sublist. Let's correct the solution and the test cases to ensure they meet these criteria.

Firstly, I'll provide the corrected solution:

<|Solution Begin|>
```python
def solution(nested_list):
    def process_sublist(sublist):
        num_items = []
        for item in sublist:
            if isinstance(item, str):
                item = item.replace('street', 'st.')
            try:
                num = float(item)
                num_items.append(num)
            except ValueError:
                continue
        return tuple(num_items)

    return [process_sublist(sublist) for sublist in nested_list]
```
<|Solution End|>

Now, let's update the test cases. We need to ensure the outputs are verified correctly and that the test for partial conversion is adjusted properly:

<|Test Begin|>
```python
def test_no_strings_replaced():
    assert solution([['123', '456', '789']]) == [(123.0, 456.0, 789.0)]

def test_numeric_conversion():
    assert solution([['123', 'abc', '456.78', '99']]) == [(123.0, 456.78, 99.0)]

def test_empty_sublist():
    assert solution([[]]) == [()]

def test_all_non_numeric():
    assert solution([['abc', 'def', 'ghi']]) == [()]

def test_mixed_list():
    assert solution([['123', 'abc', 'street 456', '789']]) == [(123.0, 789.0)]

def test_replacing_street():
    assert solution([['main street', '23', '456 street', '9.99', '5.6']]) == [(23.0, 456.0, 9.99, 5.6)]

def test_multiple_sublists():
    assert solution([['abc', 'street', '3.5'], ['4.0', '5', '6'], ['no numbers']]) == \
           [(3.5,), (4.0, 5.0, 6.0), ()]

def test_partial_conversion():
    assert solution([['123', '456 street'], ['789 st.', '0']]) == [(123.0, 456.0), (789.0, 0.0)]

def test_string_with_street():
    assert solution([['abc street', 'street street', '12 street']]) == [(12.0,)]
```
<|Test End|>

This should properly handle the task requirements and ensure all specified conditions are correctly tested.