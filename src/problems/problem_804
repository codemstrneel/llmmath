QUESTION

Create a function that processes a list containing either strings or integers, with the following operations:

1. **String Processing:**
   - Use regular expressions to find strings that start and end with a vowel (case-insensitive) and contain at least one occurrence of 'xy'.
   - For each string that meets the criteria, convert it from camel case to snake case format.

2. **Integer Processing:**
   - Identify the integers which have a largest prime factor greater than or equal to a certain value 'n'. 'n' is a parameter to be provided to the function.
   - For each integer meeting this criterion, replace it with its smallest prime divisor.

3. **Return Result:**
   - Return a dictionary with two keys:
     - `"processed_strings"`: A list of the strings that were converted from camel case to snake case.
     - `"transformed_integers"`: A list of integers transformed by replacing with their smallest prime divisor, as described in the Integer Processing step.

SOL & TESTS

```python
import re
from sympy import primerange, isprime

def camel_to_snake(name):
    """
    Convert camel case to snake case.
    """
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def get_largest_prime_factor(n):
    """
    Get the largest prime factor of a given integer n.
    """
    factor = 1
    # Check divisibility by 2 first
    while n % 2 == 0:
        factor = 2
        n //= 2
    # Check for other divisors from 3 onwards
    for i in range(3, int(n**0.5) + 1, 2):
        while n % i == 0:
            factor = i
            n //= i
    # If n is still greater than 2, then it is a prime number
    if n > 2:
        factor = n
    return factor

def get_smallest_prime_divisor(n):
    """
    Get the smallest prime divisor of a given integer n.
    """
    if n <= 1:
        return n
    if n % 2 == 0:
        return 2
    for i in range(3, n + 1, 2):
        if n % i == 0 and isprime(i):
            return i
    return n

def process_list(lst, n):
    processed_strings = []
    transformed_integers = []
    
    # Regular expression to match strings starting and ending with vowels and containing "xy"
    regex_pattern = re.compile(r'^[aeiou].*xy.*[aeiou]$', re.IGNORECASE)

    for item in lst:
        if isinstance(item, str):
            if regex_pattern.match(item):
                processed_strings.append(camel_to_snake(item))
        elif isinstance(item, int):
            if get_largest_prime_factor(item) >= n:
                transformed_integers.append(get_smallest_prime_divisor(item))
    
    return {"processed_strings": processed_strings,
            "transformed_integers": transformed_integers}
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_list

def test_process_list_strings():
    lst = ['AnxyZ', 'uXyz', 'abc', 'ioXyzI']
    result = process_list(lst, 5)
    assert result["processed_strings"] == ['anxy_z', 'io_xyz_i']

def test_process_list_integers():
    lst = [8, 15, 77, 49, 26]
    result = process_list(lst, 5)
    assert result["transformed_integers"] == [2, 5, 7, 7]

def test_process_list_mixed():
    lst = ['AxyaZy', 10, 'xyz', 25, 'endoeo', 100]
    result = process_list(lst, 3)
    assert result["processed_strings"] == ['axya_zy']
    assert result["transformed_integers"] == [2, 5, 2]

def test_no_qualified_strings():
    lst = ['abc', 'zxy']
    result = process_list(lst, 2)
    assert result["processed_strings"] == []

def test_no_qualified_integers():
    lst = [1, 2, 3, 4]
    result = process_list(lst, 10)
    assert result["transformed_integers"] == []

def test_empty_list():
    lst = []
    result = process_list(lst, 5)
    assert result == {"processed_strings": [], "transformed_integers": []}
```
<|Test End|>