QUESTION

Write a function to calculate the minimum cost required to traverse from the top-left corner to the bottom-right corner of a given 2D grid, where each cell contains a certain non-negative cost. You may only move right or down at each step.

SOL & TESTS

```python
<|Solution Begin|>
def min_cost_traversal(cost_grid):
    """
    Calculates the minimum cost to traverse from the top-left to the bottom-right corner of a grid.
    
    Parameters:
    cost_grid (list of list of int): 2D list representing the grid with non-negative costs.
    
    Returns:
    int: The minimum cost to traverse the grid.
    """
    if not cost_grid or not cost_grid[0]:
        return 0

    rows = len(cost_grid)
    cols = len(cost_grid[0])

    # Create a DP table to store minimum cost up to each cell
    dp = [[0] * cols for _ in range(rows)]

    # Initialize the starting point
    dp[0][0] = cost_grid[0][0]

    # Initialize the first row
    for j in range(1, cols):
        dp[0][j] = dp[0][j - 1] + cost_grid[0][j]

    # Initialize the first column
    for i in range(1, rows):
        dp[i][0] = dp[i - 1][0] + cost_grid[i][0]

    # Fill in the rest of the dp table
    for i in range(1, rows):
        for j in range(1, cols):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost_grid[i][j]

    # The minimum cost to reach the bottom-right corner
    return dp[rows - 1][cols - 1]
<|Solution End|>
```

```python
<|Test Begin|>
from solution import min_cost_traversal

def test_min_cost_single_cell():
    assert min_cost_traversal([[5]]) == 5

def test_min_cost_two_by_two_grid():
    assert min_cost_traversal([[1, 2], [1, 1]]) == 3

def test_min_cost_three_by_three_grid():
    cost_grid = [
        [1, 3, 1],
        [1, 5, 1],
        [4, 2, 1]
    ]
    assert min_cost_traversal(cost_grid) == 7

def test_min_cost_rectangular_grid():
    cost_grid = [
        [1, 2, 5],
        [3, 2, 1]
    ]
    assert min_cost_traversal(cost_grid) == 6

def test_min_cost_all_zeros():
    cost_grid = [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]
    ]
    assert min_cost_traversal(cost_grid) == 0

def test_min_cost_no_path():
    assert min_cost_traversal([]) == 0

def test_min_cost_single_row():
    assert min_cost_traversal([[1, 3, 1]]) == 5

def test_min_cost_single_column():
    assert min_cost_traversal([[1], [2], [3]]) == 6

<|Test End|>
```