QUESTION

Write a function that generates all sublists of a given list and then creates a square matrix filled with elements from each sublist summed together, in spiral order, starting from the top-left corner of the matrix.

SOLUTION/TESTS

To solve the problem, we need to tackle it in two main steps. First, we generate all possible sublists from a given list. Second, we create a square matrix where each cell contains the sum of elements from a sublist, arranged in spiral order.

### Solution Outline
1. **Generate Sublists**: For a given list, generate all possible contiguous sublists.
2. **Fill Matrix in Spiral Order**:
   - Calculate the size of the square matrix based on the number of sublists.
   - Fill the matrix in spiral order with the sums of the sublists.

Let's implement this step-by-step:
<|Solution Begin|>
```python
def solution(arr):
    def generate_sublists(lst):
        sublists = []
        for start in range(len(lst)):
            for end in range(start + 1, len(lst) + 1):
                sublists.append(lst[start:end])
        return sublists

    def spiral_fill(arr, n):
        matrix = [[0] * n for _ in range(n)]
        start_row, end_row, start_col, end_col = 0, n - 1, 0, n - 1
        index = 0
        
        while start_row <= end_row and start_col <= end_col:
            for col in range(start_col, end_col + 1):
                matrix[start_row][col] = arr[index]
                index += 1
            start_row += 1
            
            for row in range(start_row, end_row + 1):
                matrix[row][end_col] = arr[index]
                index += 1
            end_col -= 1
            
            if start_row <= end_row:
                for col in range(end_col, start_col - 1, -1):
                    matrix[end_row][col] = arr[index]
                    index += 1
                end_row -= 1
            
            if start_col <= end_col:
                for row in range(end_row, start_row - 1, -1):
                    matrix[row][start_col] = arr[index]
                    index += 1
                start_col += 1

        return matrix

    # Step 1: Generate sublists
    sublists = generate_sublists(arr)
    sublists_sums = [sum(sublist) for sublist in sublists]

    # Step 2: Calculate the size of the square matrix
    n = 0
    while n * n < len(sublists_sums):
        n += 1

    # Ensure we have enough elements to fill the square matrix, pad with zero if necessary
    sublists_sums.extend([0] * ((n * n) - len(sublists_sums)))

    # Step 3: Fill matrix in spiral order
    return spiral_fill(sublists_sums, n)
```
<|Solution End|>

<|Test Begin|>
```python
from solution import solution

def test_single_element():
    assert solution([1]) == [[1]]

def test_two_elements():
    expected = [[1, 3], [0, 2]]  # Generated sublists: [1], [1,2], [2]
    assert solution([1, 2]) == expected

def test_three_elements():
    expected = [[1, 3, 6],
                [0, 0, 5],
                [4, 3, 2]]  # Generated sublists: [1], [1,2], [1,2,3], [2], [2,3], [3]
    assert solution([1, 2, 3]) == expected

def test_with_zeros():
    expected = [[1, 1, 1],
                [0, 0, 0],
                [1, 0, 0]]  # Sublists: [0], [0, 0], [0, 0, 0], [0,0], [0], [0,1],[1]
    assert solution([0, 0, 1]) == expected

def test_four_elements():
    # expect a 3x3 matrix
    expected = [[1, 3, 6],
                [0, 0, 10],
                [10, 9, 4]]  # 10 comes from sublist [4]
    assert solution([1, 2, 3, 4]) == expected
```
<|Test End|>

This solution generates all sublists of the input list and sums their elements. It then fills a square matrix, which may be larger than needed, in spiral order with these sums. The tests check various scenarios to ensure the solution's correctness independently of its implementation.