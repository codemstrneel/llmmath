QUESTION

Write a Python function that processes a nested list of sublists, where each sublist may contain integers, strings, or other data types. For each sublist, perform the following tasks: 

1. Identify all string elements and replace the occurrence of the substring 'road' with 'rd.' in these strings.
2. Extract the last element of each sublist that is numeric (ignore any non-numeric last elements).
3. Push these identified numeric elements into a heap, and then retrieve and return a sorted list of these numeric elements, from smallest to largest. 

Ensure you handle non-numeric data appropriately while processing.

SOLUTION/TESTS

```python
<|Solution Begin|>
import heapq

def solution(nested_list):
    def is_number(s):
        try:
            float(s)
            return True
        except ValueError:
            return False
    
    numeric_heap = []
    
    for sublist in nested_list:
        # Replace 'road' with 'rd.' for string elements
        for i, item in enumerate(sublist):
            if isinstance(item, str):
                sublist[i] = item.replace('road', 'rd.')
        
        # Extract the last numeric element
        if sublist and is_number(sublist[-1]):
            heapq.heappush(numeric_heap, sublist[-1])
    
    # Retrieve and return a sorted list of these numeric elements
    return [heapq.heappop(numeric_heap) for _ in range(len(numeric_heap))]

<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_single_sublist():
    data = [["main road", 4, "old road", 5]]
    assert solution(data) == [5]

def test_solution_multiple_sublists():
    data = [
        ["first road", 8], 
        ["second street", "another road", 2],
        ["no road here", 3.5, "final road", 3]
    ]
    assert solution(data) == [2, 3]

def test_solution_no_numeric_last_element():
    data = [
        ["main ave", "final path"],
        ["roadway", "street", "15th road"],
        ["4th street", "old street"]
    ]
    assert solution(data) == []

def test_solution_empty_and_mixed_sublists():
    data = [
        ["empty street", "empty rd."], 
        ["old road", 9.1, "new rd.", 7.5],
        []
    ]
    assert solution(data) == [7.5]

def test_solution_handling_strings_without_road():
    data = [
        ["first street", 5],
        ["second lane", "another avenue", 1.5]
    ]
    assert solution(data) == [1.5]

<|Test End|>
```