QUESTION

Write a function that accepts a list of lists, where each sublist contains integers representing side lengths of potential triangles. The function should perform the following tasks:

1. For each sublist, determine if it forms a valid triangle. If the triangle is valid and the perimeter of the triangle is even, find the minimum and maximum integers within the sublist and calculate their difference. Add up all these differences across valid triangles.

2. If the final sum of differences falls within the range specified by the smallest and largest side lengths observed across all sublists (regardless of validity), return the number of valid triangles. Otherwise, return the sum of differences.

Assume all side lengths are positive integers and that sublists with fewer than three elements should be ignored.

SOLUTION/TESTS

```python
<|Solution Begin|>
def solution(lists):
    def is_valid_triangle(sides):
        a, b, c = sorted(sides)
        return a + b > c
    
    valid_triangle_count = 0
    sum_of_differences = 0
    all_sides = []

    for sides in lists:
        if len(sides) < 3:
            continue
        all_sides.extend(sides)
        if is_valid_triangle(sides):
            valid_triangle_count += 1
            if sum(sides) % 2 == 0:
                min_side = min(sides)
                max_side = max(sides)
                sum_of_differences += max_side - min_side

    if all_sides:
        global_min = min(all_sides)
        global_max = max(all_sides)
        if global_min <= sum_of_differences <= global_max:
            return valid_triangle_count

    return sum_of_differences
<|Solution End|>

<|Test Begin|>
def test_empty_lists():
    assert solution([]) == 0
    assert solution([[], [], []]) == 0

def test_valid_triangles_with_even_perimeters():
    assert solution([[6, 8, 10], [3, 4, 5]]) == 3

def test_valid_triangles_with_odd_perimeters():
    assert solution([[3, 4, 5]]) == 0

def test_mixed_validity_triangles():
    assert solution([[3, 4, 5], [2, 2, 3], [5, 1, 1], [7, 24, 25]]) == 1

def test_sum_of_differences_in_range():
    assert solution([[10, 6, 8], [12, 5, 9], [14, 10, 5]]) == 2

def test_sum_of_differences_out_of_range():
    assert solution([[10, 6, 10], [14, 10, 5]]) == 8

def test_single_element_sublists():
    assert solution([[5], [10], [15], [20, 15]]) == 0

def test_no_valid_triangles():
    assert solution([[1, 1, 3], [2, 2, 4], [5, 9, 3]]) == 0

def test_avoid_duplicate_sides():
    assert solution([[7, 10, 5], [10, 5, 7], [5, 7, 10]]) == 6
<|Test End|>
```