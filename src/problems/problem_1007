QUESTION

Create a function that takes a list of tuples, a dictionary, and a string text as input. This function should perform the following tasks:

1. **Identify Long Chains:** From the list of tuples, identify tuples where both elements are strings at least 7 characters long and share common prefixes of at least 3 characters. Use a lambda function to check for common prefixes.

2. **Filter and Count Occurrences:** From the dictionary, consider only key-value pairs where the length of the key is even, and count the occurrences of each key in the given text.

3. **Merge and Analyze:** Merge the keys from the dictionary into a sorted set. For each key in this set, convert it to uppercase and check if it exists as a complete word in the provided text.

4. **Maximum Character Difference:** From the identified long chains in step 1, find the tuple that has the maximum character difference between the lengths of its two elements when comparing against the occurrences counted in step 2.

5. **Return Result:** Return both the set of dictionary keys found as complete words in the text and the tuple with the maximum character difference identified from the previous steps.

This question involves tuple processing, dictionary filtering, string occurrence counting, set operations, and calculating differences, offering a thorough assessment of the candidate's capability to integrate diverse computational concepts into a single function.

SOL & TESTS

<|Solution Begin|>```python
def process_data(tuples_list, dictionary, text):
    """
    Process the input data based on the given rules.
    
    Parameters:
    - tuples_list: list of tuples, where each tuple contains two strings
    - dictionary: dictionary where keys are strings
    - text: string where words are separated by spaces
    
    Returns:
    - A tuple containing:
        1. A set of dictionary keys converted to uppercase that also appear as complete words in the text.
        2. The tuple with the maximum character difference from identified long chains.
    """
    # Step 1: Identify long chains
    long_chains = list(filter(
        lambda t: len(t[0]) >= 7 and len(t[1]) >= 7 and 
                  t[0][:3] == t[1][:3],
        tuples_list
    ))

    # Step 2: Filter and count occurrences
    even_keys = {k for k in dictionary.keys() if len(k) % 2 == 0}
    words = text.split()
    occurrences = {k: words.count(k) for k in even_keys}

    # Step 3: Merge and analyze
    keys_set = sorted(set(even_keys))
    keys_found_as_words = {k.upper() for k in keys_set if k in words}

    # Step 4: Maximum character difference
    if long_chains:
        max_tuple = max(long_chains, 
                        key=lambda t: abs(len(t[0]) - len(t[1])) - 
                        (occurrences.get(t[0], 0) + occurrences.get(t[1], 0)))
    else:
        max_tuple = ("", "")

    # Step 5: Return result
    return keys_found_as_words, max_tuple
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_data

def test_long_chains_and_text_integration():
    tuples_list = [
        ("abcdefg", "abcdxyz"), 
        ("helloworld", "hewolfish"), 
        ("common", "command"), 
        ("short", "shrt")
    ]
    dictionary = {
        "abcd": 1, 
        "ef": 2,
        "helloworld": 3,
        "test": 4
    }
    text = "hello abcd helloworld test helloworld abcd"
    
    result = process_data(tuples_list, dictionary, text)
    
    assert "ABCD" in result[0]
    assert "TEST" in result[0]
    
    assert result[1] == ("helloworld", "hewolfish")

def test_no_long_chains():
    tuples_list = [
        ("short1", "short2"),
        ("tiny", "tinier")
    ]
    dictionary = {"keyone": 1, "shorty": 2}
    text = "keyone keyone"
    
    result = process_data(tuples_list, dictionary, text)
    
    assert not result[0], "Expected an empty set as no even-length keys are words in the text."
    assert result[1] == ("", ""), "Expected an empty tuple as no long chains were found."

def test_no_keys_in_text():
    tuples_list = [("commonlongtext", "comparablestring")]
    dictionary = {"inexistent": 1, "another": 2}
    text = "no match"
    
    result = process_data(tuples_list, dictionary, text)
    
    assert not result[0], "Expected an empty set as keys are not found in the text."
    assert result[1] == ("commonlongtext", "comparablestring")

def test_exact_matches():
    tuples_list = [("exactmatch", "exactmare")]
    dictionary = {"exactmatch": 1}
    text = "exactmatch exactmatch"
    
    result = process_data(tuples_list, dictionary, text)
    
    assert "EXACTMATCH" in result[0], "EXACTMATCH should be found and captured in text."
    assert result[1] == ("exactmatch", "exactmare"), "Expected the only long chain to be the max tuple."

def test_empty_inputs():
    result = process_data([], {}, "")
    assert not result[0], "Empty set expected for empty input dictionary and text."
    assert result[1] == ("", ""), "Empty tuple expected when there are no long chains."
```
<|Test End|>