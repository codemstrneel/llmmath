QUESTION

Create a Python function that takes a list of dictionaries as input. Each dictionary contains three keys: `'id'`, `'name'`, and `'value'`. The function should perform the following tasks:

1. Identify the dictionary where the `'id'` value is the highest among all dictionaries.
2. Write a lambda function to filter out dictionaries where either the `'id'` or the `'value'` is an even number.
3. For the dictionaries that pass this filter, count the number of consonants in the `'name'` value.
4. Calculate the average of the `'value'` from these filtered dictionaries.
5. Return a tuple containing:
   - The dictionary with the highest `'id'` value.
   - A list with the count of consonants in the `'name'` for each filtered dictionary.
   - The average of the `'value'` of filtered dictionaries.
   
The function should handle cases where the input list is empty, or if any dictionary has `None` as a value for any key. Make sure calculations are performed only on dictionaries with valid data.

SOL & TESTS

```python
def process_dictionaries(dict_list):
    """
    Processes a list of dictionaries and performs specified tasks.

    Parameters:
    dict_list (list of dict): A list of dictionaries with keys 'id', 'name', 'value'.

    Returns:
    tuple: A tuple containing:
        - The dictionary with the highest 'id' value.
        - A list with the count of consonants in the 'name' for each filtered dictionary.
        - The average of the 'value' of filtered dictionaries.
    """

    # Step 1: Find the dictionary with the highest 'id'
    highest_id_dict = None
    if dict_list:
        highest_id_dict = max(
            (d for d in dict_list if isinstance(d.get('id'), int)),
            key=lambda x: x['id'],
            default=None
        )

    # Step 2: Lambda function to filter dictionaries
    is_odd_id_and_value = lambda d: (d.get('id') % 2 != 0) if isinstance(d.get('id'), int) else False and \
                                    (d.get('value') % 2 != 0) if isinstance(d.get('value'), int) else False

    # Filter operation
    filtered_dicts = list(filter(is_odd_id_and_value, dict_list))

    # Step 3: Count consonants in the 'name' key
    def count_consonants(name):
        if not isinstance(name, str):
            return 0
        consonants = "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"
        return sum(1 for char in name if char in consonants)
    
    consonant_counts = [count_consonants(d.get('name')) for d in filtered_dicts]

    # Step 4: Calculate the average of 'value'
    values = [d.get('value') for d in filtered_dicts if isinstance(d.get('value'), int)]
    average_value = sum(values) / len(values) if values else 0

    return (highest_id_dict, consonant_counts, average_value)
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_dictionaries

def test_all_valid_inputs():
    data = [
        {'id': 2, 'name': 'Alice', 'value': 10},
        {'id': 5, 'name': 'Bob', 'value': 7},
        {'id': 3, 'name': 'Charlie', 'value': 6}
    ]
    result = process_dictionaries(data)
    assert result[0] == {'id': 5, 'name': 'Bob', 'value': 7}
    assert result[1] == [3]  # Only 'Bob' has odd id and value
    assert result[2] == 7.0  # Average of 'value' of filtered dicts

def test_empty_list():
    result = process_dictionaries([])
    assert result == (None, [], 0)

def test_none_values():
    data = [
        {'id': None, 'name': None, 'value': None},
        {'id': 7, 'name': 'John', 'value': None},
        {'id': None, 'name': 'Marry', 'value': 8}
    ]
    result = process_dictionaries(data)
    assert result[0] == {'id': 7, 'name': 'John', 'value': None}
    assert result[1] == []  # No valid name to count consonants
    assert result[2] == 0

def test_mixed_valid_and_invalid():
    data = [
        {'id': 1, 'name': 'Zebra', 'value': 13},
        {'id': 3, 'name': 'Horse', 'value': 15},
        {'id': 5, 'name': 'Tiger', 'value': None},
        {'id': 2, 'name': 'Lion', 'value': 14},
    ]
    result = process_dictionaries(data)
    assert result[0] == {'id': 5, 'name': 'Tiger', 'value': None}
    assert result[1] == [4, 3]  # 'Horse' has 4 consonants
    assert result[2] == 14.0  # Average from one valid dictionary with odd id and value

def test_no_dicts_meet_filter_criteria():
    data = [
        {'id': 2, 'name': 'Bear', 'value': 4},
        {'id': 8, 'name': 'Cub', 'value': 6}
    ]
    result = process_dictionaries(data)
    assert result[0] == {'id': 8, 'name': 'Cub', 'value': 6}
    assert result[1] == []
    assert result[2] == 0

def test_all_ids_are_none():
    data = [
        {'id': None, 'name': 'Alpha', 'value': 5},
        {'id': None, 'name': 'Bravo', 'value': 7}
    ]
    result = process_dictionaries(data)
    assert result[0] is None
    assert result[1] == []
    assert result[2] == 0
```
<|Test End|>