QUESTION

Create a Python function that analyzes a given string in the context of a mathematical expression. The function should perform the following tasks:

1. Determine whether any quadratic equations present in the string have integer roots and identify if these roots are numerically equal but opposite in sign.
2. Validate if coefficients of any quadratic equations found (denoted as a, b, and c) form an arithmetic sequence and ensure that the sum of these coefficients is a perfect square.
3. Count the number of vowels, consonants, whitespace, and various categories of characters within the string: digits, special characters, and Unicode characters. Return the counts in a dictionary with keys 'vowels', 'consonants', 'whitespace', 'alphabets', 'digits', 'special', and 'unicode'. 

Your solution should provide detailed feedback on each of these aspects when analyzing the string.

SOL & TESTS

<|Solution Begin|>```python
import re
import math

def analyze_expression_string(expression):
    results = {
        'quadratics_with_integer_and_opposite_roots': [],
        'valid_arithmetic_sequence_quadratics': [],
        'counts': {
            'vowels': 0,
            'consonants': 0,
            'whitespace': 0,
            'alphabets': 0,
            'digits': 0,
            'special': 0,
            'unicode': 0
        }
    }
    
    # Find all potential quadratic equations, assuming form ax^2 + bx + c
    pattern = r'([-+]?\d*)x\^2\s*([-+]\s*\d+)?x\s*([-+]\s*\d+)?'
    matches = re.findall(pattern, expression)
    
    for match in matches:
        # Parse coefficients
        a = int(match[0] or 1)
        b = int(match[1].replace(" ", "") or 0)
        c = int(match[2].replace(" ", "") or 0)
        
        # Check for integer roots with opposite sign
        discriminant = b**2 - 4*a*c
        if discriminant > 0:
            root1 = (-b + math.sqrt(discriminant)) / (2*a)
            root2 = (-b - math.sqrt(discriminant)) / (2*a)
            if root1.is_integer() and root2.is_integer() and root1 == -root2:
                results['quadratics_with_integer_and_opposite_roots'].append((a, b, c))
        
        # Check if coefficients form an arithmetic sequence
        if (b - a == c - b):
            coefficients_sum = a + b + c
            if math.isqrt(coefficients_sum)**2 == coefficients_sum:
                results['valid_arithmetic_sequence_quadratics'].append((a, b, c))
    
    # Character counts
    vowels = 'aeiouAEIOU'
    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'
    
    for char in expression:
        if char in vowels:
            results['counts']['vowels'] += 1
            results['counts']['alphabets'] += 1
        elif char in consonants:
            results['counts']['consonants'] += 1
            results['counts']['alphabets'] += 1
        elif char.isdigit():
            results['counts']['digits'] += 1
        elif char.isspace():
            results['counts']['whitespace'] += 1
        elif char.isalpha():
            results['counts']['alphabets'] += 1
        elif char.isprintable() and not char.isalnum():
            results['counts']['special'] += 1
        else:
            results['counts']['unicode'] += 1

    return results
```
<|Solution End|>

<|Test Begin|>```python
def test_analyze_expression_string():
    from solution import analyze_expression_string

    # Test case: quadratic with integer and opposite roots
    expression1 = "x^2 - 4"
    result1 = analyze_expression_string(expression1)
    assert result1['quadratics_with_integer_and_opposite_roots'] == [(1, 0, -4)]
    
    # Test case: quadratic with coefficients in arithmetic sequence and perfect square sum
    expression2 = "3x^2 + 5x + 7"
    result2 = analyze_expression_string(expression2)
    assert result2['valid_arithmetic_sequence_quadratics'] == [(3, 5, 7)]
    
    # Test case: counting characters
    complex_expression = "Hello World! x^2 + 2x - 3 = 0"
    result3 = analyze_expression_string(complex_expression)
    assert result3['counts'] == {
        'vowels': 3,        # e o o
        'consonants': 7,    # H ll W rld
        'whitespace': 7,    # spaces
        'alphabets': 10,    # both vowels and consonants
        'digits': 2,        # 2 3
        'special': 4,       # ! ^ + - 
        'unicode': 0        # Assuming no additional Unicode chars
    }
    
    # Test case: no quadratic equations
    plain_text = "Hello, this is just a test."
    result4 = analyze_expression_string(plain_text)
    assert result4['quadratics_with_integer_and_opposite_roots'] == []
    assert result4['valid_arithmetic_sequence_quadratics'] == []
    assert result4['counts']['vowels'] == 8
    assert result4['counts']['consonants'] == 11
    assert result4['counts']['digits'] == 0
    assert result4['counts']['special'] == 2
    assert result4['counts']['whitespace'] == 5
    assert result4['counts']['unicode'] == 0
    assert result4['counts']['alphabets'] == result4['counts']['vowels'] + result4['counts']['consonants']

def test_no_quadratic():
    from solution import analyze_expression_string

    # Check if no quadratics are found
    expression_no_quad = "There are no quadratic equations here!"
    result = analyze_expression_string(expression_no_quad)
    assert not result['quadratics_with_integer_and_opposite_roots']
    assert not result['valid_arithmetic_sequence_quadratics']

def test_unicode_characters():
    from solution import analyze_expression_string

    # Check unicode character handling
    unicode_expression = "This ðŸ˜ƒ is a unicode test! x^2 + x - 2"
    result = analyze_expression_string(unicode_expression)
    assert result['counts']['unicode'] == 1
    assert result['counts']['vowels'] == 6    # i a u e o e
    assert result['counts']['consonants'] == 10  # Ths s ncd t
    assert result['counts']['digits'] == 1       # 2
    assert result['counts']['special'] >= 1      # Including ! and possibly others from equation
    assert result['counts']['whitespace'] >= 5

```
<|Test End|>