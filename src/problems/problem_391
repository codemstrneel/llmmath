QUESTION

Write a function to find the n - cheap price items from a given dataset using heap queue algorithm, ensuring that the solution works efficiently even when the dataset contains up to 10 million items.

SOL & TESTS

<|Solution Begin|>
```python
import heapq

def find_cheapest_items(prices, n):
    """
    Returns the n cheapest items from the given prices list.
    Uses a heap to efficiently find the cheapest items, even for large datasets.
    
    :param prices: List of prices (must be floats or integers).
    :param n: Number of cheapest items to find (must be a non-negative integer).
    :return: List of n cheapest prices, sorted in ascending order.
    """
    if n <= 0:
        return []
    # Use a heap to find the n smallest elements
    cheapest_items = heapq.nsmallest(n, prices)
    return cheapest_items
```
<|Solution End|>

<|Test Begin|>
```python
from solution import find_cheapest_items

def test_find_cheapest_items_basic():
    prices = [1.99, 2.99, 0.99, 4.99, 3.99]
    assert find_cheapest_items(prices, 2) == [0.99, 1.99]

def test_find_cheapest_items_exact():
    prices = [5, 3, 9, 1, 4, 6]
    assert find_cheapest_items(prices, 5) == [1, 3, 4, 5, 6]

def test_find_cheapest_items_more_than_available():
    prices = [2, 2.5, 3.5]
    assert find_cheapest_items(prices, 5) == [2, 2.5, 3.5]

def test_find_cheapest_items_empty_list():
    assert find_cheapest_items([], 3) == []

def test_find_cheapest_items_n_zero():
    prices = [1.5, 2.5]
    assert find_cheapest_items(prices, 0) == []

def test_find_cheapest_items_large_n():
    prices = list(range(1, 1000001))
    assert find_cheapest_items(prices, 3) == [1, 2, 3]

def test_find_cheapest_items_duplicates():
    prices = [3, 1, 3, 1, 2, 2]
    assert find_cheapest_items(prices, 3) == [1, 1, 2]
```
<|Test End|>