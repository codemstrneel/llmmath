QUESTION

Write a function that takes a list of strings where each string is a representation of a list of integers. From each of these lists, retrieve the second-to-last element and convert it into a floating-point number. Then, push all these floating-point numbers into a min-heap and return a list containing these numbers in ascending order.

SOLUTION/TESTS

<|Solution Begin|>
import heapq

def solution(str_list):
    """
    Takes a list of strings where each string is a representation of a list of integers,
    retrieves the second-to-last element from each list, converts it into a float,
    and returns a list of these floats arranged in ascending order using a min-heap.
    
    :param str_list: List[str] - A list of strings where each string is a list of integers
    :return: List[float] - A sorted list of second-to-last floats from the input lists
    """
    min_heap = []
    for s in str_list:
        # Convert the string representation into a list of integers
        lst = list(map(int, s.strip('[]').split(',')))
        # Retrieve the second-to-last element
        if len(lst) < 2:
            raise ValueError("List is too short to have a second-to-last element")
        second_to_last = lst[-2]
        # Convert it to float and push it into the heap
        heapq.heappush(min_heap, float(second_to_last))
    
    # Retrieve the elements from the min-heap (already sorted asc) into a list
    sorted_floats = [heapq.heappop(min_heap) for _ in range(len(min_heap))]
    return sorted_floats
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_with_valid_lists():
    input_data = ["[1, 2, 3]", "[4, 5, 6]", "[7, 8, 9]"]
    expected_output = [2.0, 5.0, 8.0]
    assert solution(input_data) == expected_output

def test_solution_with_single_digit_lists():
    input_data = ["[10, 11, 12]", "[13, 14, 15]", "[16, 17, 18]"]
    expected_output = [11.0, 14.0, 17.0]
    assert solution(input_data) == expected_output

def test_solution_with_one_element():
    input_data = ["[0, 1]", "[2, 3]", "[4, 5]"]
    expected_output = [0.0, 2.0, 4.0]
    assert solution(input_data) == expected_output

def test_solution_with_negative_numbers():
    input_data = ["[-1, -2, -3]", "[-4, -5, -6]", "[-7, -8, -9]"]
    expected_output = [-8.0, -5.0, -2.0]
    assert solution(input_data) == expected_output

def test_solution_mixed_positive_and_negative():
    input_data = ["[-1, 0]", "[0, 1]", "[1, 2]", "[-2, -1]"]
    expected_output = [-2.0, -1.0, 0.0, 1.0]
    assert solution(input_data) == expected_output

def test_solution_with_invalid_short_list():
    input_data = ["[1]", "[2, 3]"]
    try:
        solution(input_data)
        assert False, "Expected ValueError but none was raised"
    except ValueError as e:
        assert str(e) == "List is too short to have a second-to-last element"
<|Test End|>