QUESTION

Create a Python function that processes a list comprising strings, numbers, and tuples, undertaking the following tasks:

1. **String Processing and Counting**:
   - Filter out strings that contain the letter 'e', convert them from camelCase to snake_case, and count the number of alphabets, digits, and special characters in each.
   - Store the results in a list of dictionaries, where each dictionary contains the original string, its snake_case version (if applicable), and the counts of alphabets, digits, and special characters.

2. **Numeric Analysis and Position-Based Operations**:
   - For each numeric element in the list, calculate both the cube root of its position in the list (starting at 1) and the frequency of consecutive duplicates for that element. 
   - Store the results in a dictionary that maps each original number to a tuple containing the cube root of its position and the frequency of consecutive duplicates.

3. **Tuple Relationships and Conditions**:
   - Identify pairs of tuples in the list to determine if one tuple is a superset of the other. If a superset relationship exists, calculate the largest prime factor of the sum of the tuple elements.
   - Return this information in a list as part of the result, containing the tuple pair, the determination of the superset relationship, and the largest prime factor.

4. **Output Format**:
   - The function should return a dictionary with three keys:
     - `"formatted_strings"`: A list of dictionaries with the original string, the snake_case version (if it contains 'e'), and counts of alphabets, digits, and special characters.
     - `"numeric_analysis"`: A dictionary mapping each number to a tuple of (cube root of position, frequency of consecutive duplicates).
     - `"tuple_relations"`: A list of information regarding tuple pairs, including their superset relationship status and the largest prime factor of the sum of the tuple elements.

SOL & TESTS

```python
<|Solution Begin|>

import re
from math import gcd

def camel_to_snake(name):
    """Convert camelCase to snake_case."""
    return re.sub(r'(?<!^)(?=[A-Z])', '_', name).lower()

def is_prime(n):
    """Check if the number is prime."""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def largest_prime_factor(n):
    """Find the largest prime factor of a number."""
    i = 2
    largest_prime = None
    while i <= n:
        if n % i == 0:
            if is_prime(i):
                largest_prime = i
            n = n // i
        else:
            i += 1
    return largest_prime

def process_elements(lst):
    formatted_strings = []
    numeric_analysis = {}
    tuple_relations = []
    
    def calculate_repeats(idx):
        return sum(1 for i in range(idx, len(lst)) if lst[i] == lst[idx])
    
    for index, item in enumerate(lst):
        # Process strings
        if isinstance(item, str):
            if 'e' in item:
                snake_case = camel_to_snake(item)
            else:
                snake_case = None
            alphabets_count = sum(c.isalpha() for c in item)
            digit_count = sum(c.isdigit() for c in item)
            special_characters_count = len(item) - alphabets_count - digit_count
            
            formatted_strings.append({
                "original": item,
                "snake_case": snake_case,
                "alphabets": alphabets_count,
                "digits": digit_count,
                "special_characters": special_characters_count
            })
        
        # Process numbers
        elif isinstance(item, (int, float)):
            position_cuberoot = (index + 1) ** (1 / 3)  # position is 1-based
            repeat_count = calculate_repeats(index)
            
            numeric_analysis[item] = (position_cuberoot, repeat_count)
        
        # Process tuples
        elif isinstance(item, tuple):
            for other_index, other_item in enumerate(lst[index + 1:], start=index + 1):
                if isinstance(other_item, tuple):
                    if set(item) > set(other_item):
                        superset = item
                        subset = other_item
                    elif set(other_item) > set(item):
                        superset = other_item
                        subset = item
                    else:
                        continue
                    sum_elements = sum(superset)
                    largest_prime = largest_prime_factor(sum_elements)
                    
                    tuple_relations.append({
                        "superset": superset,
                        "subset": subset,
                        "largest_prime_factor": largest_prime
                    })
    
    return {
        "formatted_strings": formatted_strings,
        "numeric_analysis": numeric_analysis,
        "tuple_relations": tuple_relations
    }

```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_elements

def test_process_elements_strings():
    lst = ["camelCaseValue", "simpleString", "Welcome123"]
    result = process_elements(lst)
    assert len(result["formatted_strings"]) == 3
    assert result["formatted_strings"][0]["original"] == "camelCaseValue"
    assert result["formatted_strings"][0]["snake_case"] == "camel_case_value"
    assert result["formatted_strings"][1]["original"] == "simpleString"
    assert result["formatted_strings"][1]["snake_case"] is None
    assert result["formatted_strings"][2]["original"] == "Welcome123"
    assert result["formatted_strings"][2]["alphabets"] == 7
    assert result["formatted_strings"][2]["digits"] == 3

def test_process_elements_numbers():
    lst = [10, 20, 20, 30, "str", 30, (1, 2)]
    result = process_elements(lst)
    assert isinstance(result["numeric_analysis"][10], tuple)
    assert result["numeric_analysis"][10][0] == 1.0
    assert result["numeric_analysis"][20][1] == 2
    assert result["numeric_analysis"][30][1] == 2

def test_process_elements_tuples():
    lst = [(1, 2, 3), (1, 2), "string"]
    result = process_elements(lst)
    assert len(result["tuple_relations"]) == 1
    assert result["tuple_relations"][0]["superset"] == (1, 2, 3)
    assert result["tuple_relations"][0]["subset"] == (1, 2)
    assert result["tuple_relations"][0]["largest_prime_factor"] == 3

def test_process_empty_list():
    lst = []
    result = process_elements(lst)
    assert result == {
        "formatted_strings": [],
        "numeric_analysis": {},
        "tuple_relations": []
    }

```
<|Test End|>