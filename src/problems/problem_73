QUESTION

Write a Python function to determine whether two given lists of integers are structurally identical.

SOLUTION/TESTS

To determine whether two given lists of integers are structurally identical, we must check if they have the same length and contain the same elements in the same order. The solution involves iterating over both lists and checking for equality at each index.

Here's the implementation of this function along with the corresponding unit tests:

```python
<|Solution Begin|>
def solution(list1, list2):
    """
    Determines if two lists are structurally identical.
    
    Args:
    list1: First list of integers.
    list2: Second list of integers.
    
    Returns:
    A boolean indicating if the lists are structurally identical.
    """
    return list1 == list2
<|Solution End|>
```

```python
<|Test Begin|>
def test_identical_lists():
    assert solution([1, 2, 3], [1, 2, 3]) == True

def test_different_lengths():
    assert solution([1, 2], [1, 2, 3]) == False

def test_different_elements():
    assert solution([1, 2, 3], [1, 2, 4]) == False

def test_empty_lists():
    assert solution([], []) == True

def test_single_element_lists_identical():
    assert solution([5], [5]) == True

def test_single_element_lists_different():
    assert solution([5], [6]) == False

def test_identical_nested_lists():
    assert solution([[1, 2], [3, 4]], [[1, 2], [3, 4]]) == True

def test_different_nested_lists():
    assert solution([[1, 2], [3, 4]], [[1, 2], [4, 3]]) == False

def test_lists_with_different_types():
    assert solution([1, '2', 3], [1, '2', 3]) == True
    assert solution([1, '2', 3], [1, 2, 3]) == False
<|Test End|>
```

These tests cover a variety of scenarios, ensuring that the function is thoroughly verified to handle different kinds of input lists correctly.