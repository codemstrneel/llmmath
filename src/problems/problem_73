QUESTION

Write a Python function that performs basic analysis of numbers and words separately. The function should take a list of integers and a string containing words.

The function should perform the following tasks:

1. Identify and return any consecutive numbers in the list that increase by exactly 1.

2. Calculate the total number of characters in the string.

The function should return a tuple containing:
- A list of identified sequences where consecutive integers increase by 1.
- The total number of characters in the string.

This problem involves recognizing simple numerical patterns and basic character counting, providing a straightforward way to analyze both numeric and text data.

SOL & TESTS

```python
<|Solution Begin|>
def analyze_numbers_and_words(numbers, words):
    """
    Analyzes a list of numbers and a string of words.
    :param numbers: List of integers.
    :param words: String containing words.
    :return: A tuple containing a list of consecutive increasing numbers by 1 and the total number of characters in the string.
    """
    # Identify sequences of consecutive numbers increasing by 1
    consecutive_sequences = []
    current_sequence = []

    for i in range(len(numbers) - 1):
        if numbers[i] + 1 == numbers[i + 1]:
            if not current_sequence:
                current_sequence.append(numbers[i])
            current_sequence.append(numbers[i + 1])
        else:
            if current_sequence:
                consecutive_sequences.append(current_sequence)
                current_sequence = []

    # Add any remaining sequence
    if current_sequence:
        consecutive_sequences.append(current_sequence)

    # Calculate the total number of characters
    total_characters = len(words)

    return consecutive_sequences, total_characters
<|Solution End|>
<|Test Begin|>
```python
def test_analyze_numbers_and_words():
    numbers1 = [1, 2, 3, 5, 6, 8, 10, 11, 12, 15]
    words1 = "hello world"
    result = analyze_numbers_and_words(numbers1, words1)
    assert result == ([[1, 2, 3], [5, 6], [10, 11, 12]], 11)
    
    numbers2 = [5, 7, 8, 9, 12, 13, 14, 15]
    words2 = "testing"
    result = analyze_numbers_and_words(numbers2, words2)
    assert result == ([[7, 8, 9], [12, 13, 14, 15]], 7)
    
    numbers3 = [1, 3, 5]
    words3 = ""
    result = analyze_numbers_and_words(numbers3, words3)
    assert result == ([], 0)
    
    numbers4 = [2, 3, 4, 5, 7, 8]
    words4 = "sequence"
    result = analyze_numbers_and_words(numbers4, words4)
    assert result == ([[2, 3, 4, 5], [7, 8]], 8)
    
    numbers5 = [10]
    words5 = "a single number"
    result = analyze_numbers_and_words(numbers5, words5)
    assert result == ([], 15)

    numbers6 = []
    words6 = "only words"
    result = analyze_numbers_and_words(numbers6, words6)
    assert result == ([], 10)

    numbers7 = []
    words7 = ""
    result = analyze_numbers_and_words(numbers7, words7)
    assert result == ([], 0)

from solution import analyze_numbers_and_words

# Run the tests
test_analyze_numbers_and_words()
<|Test End|>
```