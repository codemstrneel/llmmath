QUESTION

Create a Python function that calculates the sum of unique square roots of the prime factors of a given number.

SOL & TESTS

```markdown
<|Solution Begin|>
```python
from math import isqrt

def is_prime(n):
    """Returns True if n is a prime number, False otherwise."""
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    
    return True

def prime_factors(n):
    """Returns a set of prime factors of n."""
    factors = set()
    if n % 2 == 0:
        factors.add(2)
        while n % 2 == 0:
            n //= 2
    
    for i in range(3, isqrt(n) + 1, 2):
        if n % i == 0:
            if is_prime(i):
                factors.add(i)
            while n % i == 0:
                n //= i
                
    if n > 2 and is_prime(n):
        factors.add(n)
    
    return factors

def sum_of_unique_square_roots_of_prime_factors(n):
    """
    Returns the sum of unique square roots of the prime factors of n.
    """
    factors = prime_factors(n)
    sum_square_roots = sum(f**0.5 for f in factors)
    return sum_square_roots
```
<|Solution End|>
<|Test Begin|>
```python
from solution import sum_of_unique_square_roots_of_prime_factors

def test_no_prime_factors():
    assert sum_of_unique_square_roots_of_prime_factors(1) == 0

def test_prime_number():
    assert sum_of_unique_square_roots_of_prime_factors(13) == 13**0.5

def test_square_number_of_prime():
    assert sum_of_unique_square_roots_of_prime_factors(49) == 7**0.5

def test_product_of_primes():
    assert sum_of_unique_square_roots_of_prime_factors(6) == (2**0.5 + 3**0.5)

def test_multiple_prime_factors():
    assert sum_of_unique_square_roots_of_prime_factors(60) == (2**0.5 + 3**0.5 + 5**0.5)

def test_large_number():
    n = 2 * 3 * 5 * 7 * 11
    expected_sum = 2**0.5 + 3**0.5 + 5**0.5 + 7**0.5 + 11**0.5
    assert sum_of_unique_square_roots_of_prime_factors(n) == expected_sum
```
<|Test End|>
```