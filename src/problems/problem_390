QUESTION

Write a function to retrieve the m - highest rated movies from a given list of movies, where each movie is represented by a dictionary containing its title and rating. Implement this using an efficient sorting algorithm.

SOL & TESTS

<|Solution Begin|>
```python
def top_movies(movies, m):
    """
    Retrieves the m highest rated movies from the given list.

    Parameters:
    movies (list of dict): A list of dictionaries, each containing 'title' and 'rating' keys.
    m (int): Number of top-rated movies to retrieve.

    Returns:
    list of dict: A list containing the m highest rated movies.
    """
    # Sort the list of movies based on the 'rating' key in descending order
    sorted_movies = sorted(movies, key=lambda movie: movie['rating'], reverse=True)
    
    # Return the first m movies from the sorted list
    return sorted_movies[:m]
```
<|Solution End|>
<|Test Begin|>
```python
from solution import top_movies

def test_top_movies_general_case():
    movies = [
        {"title": "Movie A", "rating": 8.2},
        {"title": "Movie B", "rating": 9.0},
        {"title": "Movie C", "rating": 7.5},
        {"title": "Movie D", "rating": 8.8}
    ]
    result = top_movies(movies, 2)
    assert result == [
        {"title": "Movie B", "rating": 9.0},
        {"title": "Movie D", "rating": 8.8}
    ]

def test_top_movies_single_movie():
    movies = [{"title": "Movie A", "rating": 8.2}]
    result = top_movies(movies, 1)
    assert result == [{"title": "Movie A", "rating": 8.2}]

def test_top_movies_more_than_available():
    movies = [
        {"title": "Movie A", "rating": 8.2},
        {"title": "Movie B", "rating": 9.0}
    ]
    result = top_movies(movies, 5)
    assert result == [
        {"title": "Movie B", "rating": 9.0},
        {"title": "Movie A", "rating": 8.2}
    ]

def test_top_movies_zero_movies():
    movies = [
        {"title": "Movie A", "rating": 8.2},
        {"title": "Movie B", "rating": 9.0}
    ]
    result = top_movies(movies, 0)
    assert result == []

def test_top_movies_empty_list():
    movies = []
    result = top_movies(movies, 3)
    assert result == []
```
<|Test End|>