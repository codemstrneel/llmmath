QUESTION

Create a function that processes a list of tuples, each containing a string and a numerical value. The function should first sort the tuples based on the total number of digits present in the numerical value of each tuple. Then, it should find the n tuples with the smallest numerical values using a heap queue algorithm. If there is a tie in numerical values, prioritize tuples whose string components have a higher frequency of uppercase letters. After finding those n tuples, count and return the occurrence of a specified character in the concatenated string form of those n tuples' string components.

SOL & TESTS

```python
from heapq import nsmallest

def process_tuples(tuples_list, n, char):
    """
    Processes a list of tuples by sorting, finding the n tuples 
    with smallest numerical values and counting occurrences of a specified character.

    Args:
    tuples_list (list): List of tuples, each containing a string and a numerical value.
    n (int): Number of tuples to find with the smallest numerical values.
    char (str): Character whose occurrences in the string components of n tuples are counted.

    Returns:
    int: Count of specified character in the concatenated strings of selected n tuples.
    """
    
    # Sort tuples by the number of digits in the numerical value
    tuples_list_sorted = sorted(
        tuples_list, 
        key=lambda x: len(str(abs(int(x[1]))))  # Convert number to absolute integer then string to count digits
    )

    # Use a heap queue to find the n tuples with the smallest numerical values
    smallest_n_tuples = nsmallest(
        n, 
        tuples_list_sorted, 
        key=lambda x: (x[1], -sum(1 for c in x[0] if c.isupper()))  # Tie-breaking on uppercase letter frequency
    )

    # Concatenate the strings of the chosen tuples
    concatenated_strings = ''.join(t[0] for t in smallest_n_tuples)

    # Count the occurrences of the specified character
    return concatenated_strings.count(char)
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_tuples

def test_process_tuples_basic():
    tuples = [("Aa", 100), ("Ab", 101), ("Bcc", 2), ("DD", 22)]
    assert process_tuples(tuples, 2, 'A') == 1

def test_process_tuples_with_tiebreak():
    tuples = [("aa", 1), ("AA", 1), ("aA", 2), ("bb", 3)]
    assert process_tuples(tuples, 2, 'A') == 2

def test_process_tuples_no_uppercase():
    tuples = [("aa", 100), ("bb", 101), ("cc", 2), ("dd", 22)]
    assert process_tuples(tuples, 2, 'a') == 2

def test_process_tuples_large_n():
    tuples = [("abc", 100), ("def", 1000), ("ghi", 10), ("jkl", 200)]
    assert process_tuples(tuples, 3, 'x') == 0

def test_process_tuples_character_not_in_strings():
    tuples = [("aaa", 150), ("bbb", 250), ("ccc", 350)]
    assert process_tuples(tuples, 3, 'x') == 0

def test_process_tuples_empty_list():
    tuples = []
    assert process_tuples(tuples, 2, 'A') == 0
```
<|Test End|>