QUESTION

New Question: Write a function to sum elements in two equally-sized lists and then return the maximum possible sum by rearranging elements from both lists.

SOLUTION/TESTS

<|Solution Begin|>
def solution(list1, list2):
    """
    Returns the maximum possible sum by rearranging elements from two equally-sized lists.
    """
    if not list1 or not list2 or len(list1) != len(list2):
        raise ValueError("Lists must be of the same non-zero length")
    
    merged_list = list1 + list2
    merged_list.sort(reverse=True)
    
    return sum(merged_list[:len(list1)])

<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_basic():
    assert solution([1, 2, 3], [4, 5, 6]) == 21

def test_solution_with_zeros():
    assert solution([0, 0, 0], [0, 0, 0]) == 0

def test_solution_with_negative_numbers():
    assert solution([-1, -2, -3], [-4, -5, -6]) == -12

def test_solution_with_mixed_sign_numbers():
    assert solution([-10, 5, 4], [-2, 3, 1]) == 14

def test_solution_error_on_unequal_list_lengths():
    try:
        solution([1, 2], [1, 2, 3])
    except ValueError as e:
        assert str(e) == "Lists must be of the same non-zero length"

def test_solution_error_on_empty_lists():
    try:
        solution([], [])
    except ValueError as e:
        assert str(e) == "Lists must be of the same non-zero length"

def test_solution_maximum_sum():
    assert solution([7, 1, 3], [9, 5, 2]) == 24

<|Test End|>