QUESTION

Certainly! Hereâ€™s a novel coding question that combines core concepts from Questions 1 and 2:

**New Question:**

Create a function that takes a list of dictionaries and a string as inputs. Each dictionary contains a single sentence where a specific date is embedded in the format of "YYYY-MM-DD", and each key is the sentence itself.

The function should perform the following tasks:

1. Extract the date from each sentence using regular expressions and convert all the dates into a dictionary where the key is the original sentence, and the value is the extracted date.
2. Reverse the order of words in each sentence (the character order within words must remain unchanged).
3. Merge the new reversed sentence dictionary with a given dictionary such that if any sentences are duplicated, the date value from the latest extraction is preserved.
4. Remove duplicate words from the given input string, and for each unique word, store its first occurrence index in the cleaned string.
5. Return a tuple consisting of the merged dictionary (with reversed sentences and corresponding extracted dates) and a list of tuples, where each tuple consists of a unique word from the cleaned string and its corresponding index.

**Example:**

```python
def process_data(dictionaries, input_string):
    # Your implementation here
    pass

# Sample Input
dictionaries = [
    {"The meeting is scheduled on 2023-07-25": None},
    {"Remember to submit by 2023-08-15": None}
]
input_string = "This is a test. This test is only a test."

# Sample Output
# (
#   {"scheduled is meeting The on 2023-07-25": "2023-07-25", "submit to Remember by 2023-08-15": "2023-08-15"},
#   [("This", 0), ("is", 1), ("a", 2), ("test.", 3), ("only", 5)]
# )

output = process_data(dictionaries, input_string)
print(output)
```

In this problem, you will apply techniques from dictionary manipulation, string processing, regular expressions, and unique index tracking to achieve the desired output.

SOL & TESTS

<|Solution Begin|>```python
import re

def process_data(dictionaries, input_string):
    date_pattern = r"\d{4}-\d{2}-\d{2}"

    # Task 1: Extract dates and reverse sentences
    processed_dict = {}
    for item in dictionaries:
        for sentence, _ in item.items():
            # Extract date
            date_match = re.search(date_pattern, sentence)
            if date_match:
                date = date_match.group(0)
            else:
                continue
            
            # Reverse sentence word order
            words = sentence.split()
            reversed_sentence = ' '.join(reversed(words))
            
            # Store in dictionary
            processed_dict[reversed_sentence] = date

    # Task 3: Merge the new reversed sentence dictionary with the existing dictionary
    merged_dict = {}
    for d in dictionaries:
        merged_dict.update(d)
    merged_dict.update(processed_dict)  # Latest dates preserved

    # Task 4: Clean string and store unique words with their index
    words = input_string.split()
    seen_words = {}
    unique_words = []
    for index, word in enumerate(words):
        if word not in seen_words:
            unique_words.append((word, index))
            seen_words[word] = True

    return merged_dict, unique_words
```
<|Solution End|>

<|Test Begin|>```python
from solution import process_data

def test_process_data_extraction_and_reversal():
    # Test basic extraction and reversal logic
    dictionaries = [
        {"The meeting is scheduled on 2023-07-25": None},
        {"Remember to submit by 2023-08-15": None}
    ]
    input_string = "This is a test. This test is only a test."
    
    expected_result = (
        {
            "scheduled is meeting The on 2023-07-25": "2023-07-25",
            "submit to Remember by 2023-08-15": "2023-08-15"
        },
        [("This", 0), ("is", 1), ("a", 2), ("test.", 3), ("only", 5)]
    )
    assert process_data(dictionaries, input_string) == expected_result

def test_process_data_with_no_dates():
    # Test handling sentences without any dates
    dictionaries = [
        {"The event is important": None},
        {"Please note the following": None}
    ]
    input_string = "Note this is important."
    
    expected_result = (
        {
            "note Please following the": None,
            "important is event The": None
        },
        [("Note", 0), ("this", 1), ("is", 2), ("important.", 3)]
    )
    assert process_data(dictionaries, input_string) == expected_result

def test_process_data_handles_duplicates():
    # Test handling duplicate words in input_string and duplicate sentences
    dictionaries = [
        {"The meeting is scheduled on 2023-07-25": None},
        {"The meeting is scheduled on 2023-07-26": None}
    ]
    input_string = "Test this test"
    
    expected_result = (
        {
            "scheduled is meeting The on 2023-07-26": "2023-07-26",
        },
        [("Test", 0), ("this", 1), ("test", 2)]
    )
    assert process_data(dictionaries, input_string) == expected_result

def test_process_data_edge_cases():
    # Edge case tests
    dictionaries = []
    input_string = ""
    
    expected_result = (
        {},
        []
    )
    assert process_data(dictionaries, input_string) == expected_result
```
<|Test End|>