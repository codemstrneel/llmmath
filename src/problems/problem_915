QUESTION

Create a function that takes a list of strings and performs the following tasks:

1. For each string, utilize regular expressions to remove all non-alphanumeric characters.
2. Calculate the length of each cleaned string.
3. Return a tuple containing the original string, the cleaned string, and the length of the cleaned string for each input string in the list.

The function should have a signature like:

```python
def process_strings(strings: List[str]) -> List[Tuple[str, str, int]]:
    pass
```

For example, given the input `["hello@world!", "foo#bar", "fizz$buzz"]`, the function should return:
```
[
    ("hello@world!", "helloworld", 10),
    ("foo#bar", "foobar", 6),
    ("fizz$buzz", "fizzbuzz", 8)
]
```

SOL & TESTS

<|Solution Begin|> 
```python
import re
from typing import List, Tuple

def process_strings(strings: List[str]) -> List[Tuple[str, str, int]]:
    """
    Takes a list of strings and returns a list of tuples, each containing:
    - The original string
    - The cleaned string (non-alphanumeric characters removed)
    - The length of the cleaned string
    """
    result = []
    for s in strings:
        # Use regular expressions to remove non-alphanumeric characters
        cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', s)
        # Calculate the length of the cleaned string
        length = len(cleaned_string)
        # Append the tuple to the result list
        result.append((s, cleaned_string, length))
    return result
```
<|Solution End|>

<|Test Begin|>
```python
from solution import process_strings

def test_process_strings_basic():
    input_data = ["hello@world!", "foo#bar", "fizz$buzz"]
    expected_output = [
        ("hello@world!", "helloworld", 10),
        ("foo#bar", "foobar", 6),
        ("fizz$buzz", "fizzbuzz", 8)
    ]
    assert process_strings(input_data) == expected_output

def test_process_strings_no_specials():
    input_data = ["abc", "defgh", "123"]
    expected_output = [
        ("abc", "abc", 3),
        ("defgh", "defgh", 5),
        ("123", "123", 3)
    ]
    assert process_strings(input_data) == expected_output

def test_process_strings_all_specials():
    input_data = ["@#!", "%^&*", "()"]
    expected_output = [
        ("@#!", "", 0),
        ("%^&*", "", 0),
        ("()", "", 0)
    ]
    assert process_strings(input_data) == expected_output

def test_process_strings_with_numbers():
    input_data = ["a1b2c3", "123abc", "abc123xyz"]
    expected_output = [
        ("a1b2c3", "a1b2c3", 6),
        ("123abc", "123abc", 6),
        ("abc123xyz", "abc123xyz", 9)
    ]
    assert process_strings(input_data) == expected_output

def test_process_strings_empty_string():
    input_data = [""]
    expected_output = [("", "", 0)]
    assert process_strings(input_data) == expected_output
```
<|Test End|>