QUESTION

Write a function to count the same pair in two given lists using map function, ensuring that the function can handle lists containing nested structures, such as lists and tuples, and ignores elements that are not comparable due to type differences.

SOL & TESTS

```markdown
<|Solution Begin|>
```python
def count_same_pairs(list1, list2):
    """
    Counts the number of same pairs in two given lists, handling nested structures
    and ignoring type differences that prevent comparison.
    
    Args:
    - list1: The first list.
    - list2: The second list.
    
    Returns:
    - An integer count of pairs that are the same in both lists.
    """
    # Using map to apply a comparison function, filtering out non-comparable elements
    return sum(
        map(
            lambda pair: pair[0] == pair[1] if isinstance(pair[0], type(pair[1])) else False,
            zip(list1, list2)
        )
    )
```
<|Solution End|>
<|Test Begin|>
```python
from solution import count_same_pairs

def test_empty_lists():
    assert count_same_pairs([], []) == 0

def test_no_matches():
    assert count_same_pairs([1, 2, 3], [4, 5, 6]) == 0

def test_some_matches():
    assert count_same_pairs([1, 2, 3], [1, 5, 3]) == 2

def test_all_matches():
    assert count_same_pairs([7, 8, 9], [7, 8, 9]) == 3

def test_different_types_ignored():
    assert count_same_pairs([1, "a", (1, 2)], [1.0, 1, (1, 2)]) == 1

def test_nested_structures():
    assert count_same_pairs([(1, 2), [3, 4], "string"], [(1, 2), [3, 4], "test"]) == 2

def test_nested_different_types():
    assert count_same_pairs([[1, 2], (3, 4)], [(1, 2), [3, 4]]) == 0
```
<|Test End|>
```