QUESTION

Write a Python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign, and also verify if the coefficients a, b, and c form an arithmetic sequence.

SOL & TESTS

<|Solution Begin|>```python
def is_root_opposite_and_arithmetic(a, b, c):
    """
    Check whether the roots of the quadratic equation ax^2 + bx + c = 0 are numerically equal but opposite in sign,
    and also verify if the coefficients a, b, and c form an arithmetic sequence.
    """
    # Calculate the discriminant
    discriminant = b**2 - 4*a*c
    
    # Check if the discriminant is zero, which means roots are real and equal
    if discriminant != 0:
        return False
    
    # Roots are numerically equal and opposite in sign if and only if they are both zero
    # which is when b = 0 for a non-zero a and c
    if b != 0:
        return False
    
    # Check if the coefficients form an arithmetic sequence
    return b - a == c - b
```
<|Solution End|>

<|Test Begin|>```python
from solution import is_root_opposite_and_arithmetic

def test_arithmetic_sequence_valid():
    assert is_root_opposite_and_arithmetic(1, 2, 3) == True
    assert is_root_opposite_and_arithmetic(2, 4, 6) == True
    assert is_root_opposite_and_arithmetic(0, 1, 2) == False  # a can't be zero

def test_non_arithmetic():
    assert is_root_opposite_and_arithmetic(1, 0, 1) == False
    assert is_root_opposite_and_arithmetic(1, 3, 6) == False

def test_roots_zero_and_opposite():
    assert is_root_opposite_and_arithmetic(1, 0, 1) == False
    assert is_root_opposite_and_arithmetic(2, 0, -2) == False

def test_edge_cases():
    assert is_root_opposite_and_arithmetic(1, 1, 1) == False
    assert is_root_opposite_and_arithmetic(0, 0, 0) == False  # Degenerate case
    assert is_root_opposite_and_arithmetic(2, 4, 2) == True
    assert is_root_opposite_and_arithmetic(3, 6, 3) == True

def test_discriminant_not_zero():
    assert is_root_opposite_and_arithmetic(1, 1, 1) == False  # Discriminant > 0
    assert is_root_opposite_and_arithmetic(1, 4, 1) == False  # Discriminant > 0
```  
<|Test End|>