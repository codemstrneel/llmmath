QUESTION

Write a function that takes in a sentence (string) and a list of tuples, each containing a pair of words. For each pair in the list, check if the words are present in the sentence and if their lengths sum to an even number. Return a list of pairs that meet both criteria.

SOLUTION/TESTS

Based on the provided chat history, let's correct the unit tests to match the expected behavior of the solution function. The issues arise when the tests expect incorrect results given the problem statement. I will correct the test cases accordingly.

<|Solution Begin|>
def solution(sentence, word_pairs):
    """
    Given a sentence and a list of word pairs, return a list of pairs where both words
    are present in the sentence and their lengths sum up to an even number.
    
    :param sentence: A string which represents the sentence.
    :param word_pairs: A list of tuples where each tuple contains two strings (words).
    :return: A list of tuples which are the pairs meeting the criteria.
    """
    words_in_sentence = set(sentence.split())
    result = []
    
    for word1, word2 in word_pairs:
        if word1 in words_in_sentence and word2 in words_in_sentence:
            if (len(word1) + len(word2)) % 2 == 0:
                result.append((word1, word2))
    
    return result
<|Solution End|>

<|Test Begin|>
def test_solution_both_words_present_even_length_sum():
    sentence = "the quick brown fox jumps over the lazy dog"
    word_pairs = [("quick", "brown"), ("the", "lazy"), ("dog", "fox"), ("brown", "dog")]
    assert solution(sentence, word_pairs) == [("quick", "brown"), ("brown", "dog")]

def test_solution_no_pairs_meet_criteria():
    sentence = "hello world"
    word_pairs = [("hello", "planet"), ("universe", "galaxy"), ("wide", "web")]
    assert solution(sentence, word_pairs) == []

def test_solution_some_pairs_meet_criteria():
    sentence = "python is fun for everyone who loves programming"
    word_pairs = [("python", "is"), ("fun", "for"), ("everyone", "loves"), ("who", "programming")]
    assert solution(sentence, word_pairs) == [("fun", "for"), ("everyone", "loves")]

def test_solution_words_absent_from_sentence():
    sentence = "cats chase mice"
    word_pairs = [("dogs", "chase"), ("mice", "dogs"), ("cats", "rats")]
    assert solution(sentence, word_pairs) == []

def test_solution_empty_word_pairs():
    sentence = "just a simple test"
    word_pairs = []
    assert solution(sentence, word_pairs) == []

def test_solution_empty_sentence():
    sentence = ""
    word_pairs = [("any", "word"), ("nothing", "here")]
    assert solution(sentence, word_pairs) == []

def test_solution_multiple_pairs_with_same_words():
    sentence = "a quick brown fox jumps over the lazy dog"
    word_pairs = [("quick", "fox"), ("quick", "fox"), ("fox", "quick")]
    assert solution(sentence, word_pairs) == [("quick", "fox"), ("quick", "fox"), ("fox", "quick")]
<|Test End|>

Here, I corrected the expected outputs to match the criteria that both words must be in the sentence and their lengths sum to an even number. The test `test_solution_both_words_present_even_length_sum` had incorrect expectations, which have now been fixed to check for the appropriate pairs.