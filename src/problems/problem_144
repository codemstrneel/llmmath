QUESTION

Develop a function that verifies a decimal number, ensuring it has exactly two digits following the decimal point.

SOL & TESTS

<|Solution Begin|>
```python
def is_valid_decimal(number):
    """
    Checks if the given number is a valid decimal with exactly two digits after the decimal point.
    
    :param number: The number to check, either float or in string format.
    :return: True if the number is a decimal with exactly two digits after the decimal point, False otherwise.
    """
    try:
        # Convert the number to string in case it's not.
        number_str = str(number)
        # Split the string using the decimal point as separator.
        whole_part, decimal_part = number_str.split('.')
        # Verify if the decimal part has exactly two digits.
        return len(decimal_part) == 2
    except (ValueError, IndexError):
        # If there's an error during splitting or conversion, it means the number is not in a valid format.
        return False
```
<|Solution End|>

<|Test Begin|>
```python
from solution import is_valid_decimal

def test_valid_decimal():
    assert is_valid_decimal(10.99) == True
    assert is_valid_decimal('123.45') == True
    assert is_valid_decimal(0.01) == True

def test_invalid_decimal():
    assert is_valid_decimal('123.4') == False
    assert is_valid_decimal('45.') == False
    assert is_valid_decimal(100) == False

def test_non_decimal_input():
    assert is_valid_decimal('abc') == False
    assert is_valid_decimal('12.345') == False

def test_edge_cases():
    assert is_valid_decimal('0.00') == True
    assert is_valid_decimal('9999.99') == True
    assert is_valid_decimal('1234567890.12') == True
    assert is_valid_decimal('-0.01') == True
    assert is_valid_decimal('-10.10') == True
```
<|Test End|>