QUESTION

Write a Python function to move all zeroes to the end of the given list, while maintaining the relative order of non-zero elements, and do this without using extra space for another list or array.

SOL & TESTS

<|Solution Begin|>```python
def move_zeroes(nums):
    """
    Moves all zeroes in the given list to the end while maintaining the relative order 
    of the non-zero elements. This operation is done in-place without using extra space 
    for another list or array.
    """
    last_non_zero_found_at = 0
    
    # Move all non-zero elements to the front of the list
    for i in range(len(nums)):
        if nums[i] != 0:
            nums[last_non_zero_found_at] = nums[i]
            last_non_zero_found_at += 1
            
    # Fill the remaining elements with zeroes
    for i in range(last_non_zero_found_at, len(nums)):
        nums[i] = 0
```
<|Solution End|>

<|Test Begin|>
```python
from solution import move_zeroes

def test_move_zeroes_all_zeroes():
    nums = [0, 0, 0, 0]
    expected = [0, 0, 0, 0]
    move_zeroes(nums)
    assert nums == expected

def test_move_zeroes_no_zeroes():
    nums = [1, 2, 3, 4]
    expected = [1, 2, 3, 4]
    move_zeroes(nums)
    assert nums == expected

def test_move_zeroes_mixed():
    nums = [0, 1, 0, 3, 12]
    expected = [1, 3, 12, 0, 0]
    move_zeroes(nums)
    assert nums == expected

def test_move_zeroes_single_element():
    nums = [0]
    expected = [0]
    move_zeroes(nums)
    assert nums == expected

    nums = [5]
    expected = [5]
    move_zeroes(nums)
    assert nums == expected

def test_move_zeroes_alternate_zeroes():
    nums = [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]
    expected = [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]
    move_zeroes(nums)
    assert nums == expected

def test_move_zeroes_zeros_at_end():
    nums = [1, 2, 3, 0, 0]
    expected = [1, 2, 3, 0, 0]
    move_zeroes(nums)
    assert nums == expected
```
<|Test End|>