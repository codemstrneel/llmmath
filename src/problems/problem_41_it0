QUESTION

Write a python function to check whether the given number can be represented as a sum of squares of two non-negative integers.

SOLUTION/TESTS

To solve this problem, the task is to write a function that checks if a given non-negative integer `n` can be expressed as a sum of squares of two non-negative integers. This involves determining if there exist two integers `a` and `b` such that `n = a^2 + b^2`.

```python
<|Solution Begin|>
def solution(n):
    """
    Checks if the number n can be represented as a sum of squares of two non-negative integers.
    """
    if n < 0:
        return False
    
    a = 0
    while a * a <= n:
        b_square = n - a * a
        if int(b_square**0.5) ** 2 == b_square:
            return True
        a += 1
        
    return False
<|Solution End|>
```

Now, let's create the unit tests that will verify the correctness of this solution.

```python
<|Test Begin|>
from solution import solution

def test_can_be_sum_of_squares():
    assert solution(5) == True  # 1^2 + 2^2
    assert solution(34) == True # 3^2 + 5^2

def test_cannot_be_sum_of_squares():
    assert solution(3) == False
    assert solution(2) == False # 1^2 + 1^2 is not equal to 2

def test_sum_of_squares_zero():
    assert solution(0) == True  # 0^2 + 0^2

def test_large_number():
    assert solution(1000000) == True  # 1000^2 + 0^2

def test_large_prime():
    assert solution(999983) == False  # Large prime not expressible as a sum of two squares
    
<|Test End|>
```

These unit tests should cover the essence of the problem, including edge cases like zero, numbers that can and cannot be expressed as a sum of two squares, and larger numbers to test performance.