QUESTION

Write a function that partitions a list into non-overlapping sublists of size m, excluding any remaining elements that cannot form a complete sublist. If the list is empty or if m is zero, return an empty list.

SOLUTION/TESTS

<|Solution Begin|>
def solution(lst, m):
    """
    Partitions a list into non-overlapping sublists of size m.
    
    Parameters:
    - lst: List to be partitioned.
    - m: Size of the sublists.
    
    Returns:
    - A new list with sublists of size m.
    """
    if m <= 0 or len(lst) == 0:
        return []
    return [lst[i:i+m] for i in range(0, len(lst) - len(lst) % m, m)]
<|Solution End|>

<|Test Begin|>
def test_partition_normal_case():
    assert solution([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]

def test_partition_with_remaining_elements():
    assert solution([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6]]

def test_partition_with_exact_division():
    assert solution([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]

def test_partition_empty_list():
    assert solution([], 3) == []

def test_partition_zero_size():
    assert solution([1, 2, 3], 0) == []

def test_partition_negative_size():
    assert solution([1, 2, 3], -1) == []

def test_partition_size_greater_than_list():
    assert solution([1, 2, 3], 5) == []

def test_partition_single_element_lists():
    assert solution([1, 2, 3], 1) == [[1], [2], [3]]

def test_partition_large_m():
    assert solution([1, 2, 3], 10) == []

<|Test End|>