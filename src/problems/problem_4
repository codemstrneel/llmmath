QUESTION

Write a function that takes a list of tuples, where each tuple contains a string and a list of integers. The function should identify the tuple with the list whose sum of elements is the highest, reverse that list of integers, and then round up the sum of the elements in the reversed list to the nearest integer. Return the string associated with that tuple and the rounded sum as a tuple.

SOLUTION/TESTS

<|Solution Begin|>
from math import ceil

def solution(data):
    """
    Takes a list of tuples, where each tuple contains a string and 
    a list of integers. Identifies the tuple where the sum of the list 
    of integers is the highest, reverses that list, calculates the 
    sum and rounds it up to the nearest integer, and returns the string 
    and the rounded sum as a tuple.
    """
    max_sum = float('-inf')
    best_string = None
    best_reversed_sum = 0

    for string, numbers in data:
        current_sum = sum(numbers)
        if current_sum > max_sum:
            max_sum = current_sum
            best_string = string
            best_reversed_sum = ceil(sum(reversed(numbers)))
    
    return best_string, best_reversed_sum
<|Solution End|>
<|Test Begin|>
def test_solution_basic():
    data = [
        ("tuple1", [1, 2, 3]),
        ("tuple2", [4, 5, 6]),
        ("tuple3", [-1, -2, 10])
    ]
    assert solution(data) == ("tuple2", 15)

def test_solution_with_negative_numbers():
    data = [
        ("first", [-3, -5, -2]),
        ("second", [-8, -1, -6]),
        ("third", [-4, -3, -7])
    ]
    assert solution(data) == ("first", -10)

def test_solution_with_empty_list():
    data = [
        ("empty", []),
        ("non-empty", [1, 2])
    ]
    assert solution(data) == ("non-empty", 3)

def test_solution_single_element_list():
    data = [
        ("single", [100]),
        ("double", [50, 50])
    ]
    assert solution(data) == ("single", 100)
    
def test_solution_mixed_numbers():
    data = [
        ("mix1", [1, 2, 3, 10.5]),
        ("mix2", [1.5, 2.5, 3.5]),
        ("mix3", [0, 10])
    ]
    assert solution(data) == ("mix1", 17)
<|Test End|>