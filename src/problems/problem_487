QUESTION

Write a function to count alphabets, digits, and special characters in a given string. Additionally, ensure your function can handle strings with embedded Unicode characters and return the counts as a dictionary with keys 'alphabets', 'digits', 'special', and 'unicode'.

SOL & TESTS

<|Solution Begin|>```python
def count_characters(s):
    """
    Count the number of alphabets, digits, special characters, and unicode characters in a given string.

    :param s: Input string
    :return: Dictionary with counts of 'alphabets', 'digits', 'special', and 'unicode' characters
    """
    counts = {'alphabets': 0, 'digits': 0, 'special': 0, 'unicode': 0}
    
    for char in s:
        if char.isalpha():
            counts['alphabets'] += 1
        elif char.isdigit():
            counts['digits'] += 1
        elif ord(char) > 127:
            counts['unicode'] += 1
        else:
            counts['special'] += 1
            
    return counts
```
<|Solution End|>

<|Test Begin|>```python
def test_count_all_types():
    result = count_characters("abc123!@#\u1234")
    assert result == {'alphabets': 3, 'digits': 3, 'special': 3, 'unicode': 1}

def test_count_only_alphabets():
    result = count_characters("abcdef")
    assert result == {'alphabets': 6, 'digits': 0, 'special': 0, 'unicode': 0}

def test_count_mixed_unicode_and_special():
    result = count_characters("\u1234\u5678!@#")
    assert result == {'alphabets': 0, 'digits': 0, 'special': 3, 'unicode': 2}

def test_count_with_empty_string():
    result = count_characters("")
    assert result == {'alphabets': 0, 'digits': 0, 'special': 0, 'unicode': 0}

def test_count_digits():
    result = count_characters("123456")
    assert result == {'alphabets': 0, 'digits': 6, 'special': 0, 'unicode': 0}

def test_count_with_no_special_or_unicode():
    result = count_characters("abc123DEF")
    assert result == {'alphabets': 6, 'digits': 3, 'special': 0, 'unicode': 0}
```
<|Test End|>