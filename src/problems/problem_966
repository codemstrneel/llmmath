QUESTION

Write a function to find palindromes in a given list of strings using a lambda function, and ensure that the function has a time complexity of O(n * m), where n is the number of strings and m is the average length of the strings.

SOL & TESTS

```python
<|Solution Begin|>
def find_palindromes(strings):
    """
    Returns a list of palindromes found in the given list of strings.
    
    A palindrome is a string that reads the same backward as forward.
    """
    is_palindrome = lambda s: s == s[::-1]
    return list(filter(is_palindrome, strings))
```
<|Solution End|>
<|Test Begin|>
```python
from solution import find_palindromes

def test_find_palindromes_with_mixed_strings():
    assert find_palindromes(['racecar', 'hello', 'level', 'world']) == ['racecar', 'level']

def test_find_palindromes_with_no_palindrome():
    assert find_palindromes(['apple', 'banana', 'cat', 'dog']) == []

def test_find_palindromes_all_palindromes():
    assert find_palindromes(['madam', 'noon', 'civic', 'radar']) == ['madam', 'noon', 'civic', 'radar']

def test_find_palindromes_empty_list():
    assert find_palindromes([]) == []

def test_find_palindromes_with_single_character_strings():
    assert find_palindromes(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']

def test_find_palindromes_with_mixed_case_palindromes():
    assert find_palindromes(['Deed', 'Level', 'Wow', 'Hallo']) == ['Deed', 'Level', 'Wow']
```
<|Test End|>