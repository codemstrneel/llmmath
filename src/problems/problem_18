QUESTION

Create a function that receives two lists of dictionaries and a string key. The function should return the shortest string that has as a subsequence the concatenation of the values extracted from the dictionaries using the provided key, taken from each list. Also, ensure the cumulative length of keys' values from both lists is minimized by sorting both lists of dictionaries using a lambda function prior to retrieval. Additionally, if two dictionaries in a list yield the same extracted value, they must be concatenated in their original order before being considered in the shortest subsequence calculation.

SOL & TESTS

```python
def shortest_subsequence(dicts1, dicts2, key):
    """
    Returns the shortest string that is a subsequence of the concatenation of values
    extracted from dictionaries using the given key, from both lists.
    The lists are sorted by the key's value length before extraction.
    """
    # Sort both list of dictionaries based on the length of values associated with the key
    sorted_dicts1 = sorted(dicts1, key=lambda d: len(d.get(key, '')))
    sorted_dicts2 = sorted(dicts2, key=lambda d: len(d.get(key, '')))

    # Extract the concatenated values for each list
    values1 = ''.join(d[key] for d in sorted_dicts1 if key in d)
    values2 = ''.join(d[key] for d in sorted_dicts2 if key in d)

    # Concatenate the extracted values from both lists
    concatenated_values = values1 + values2

    # Return the concatenated result since there's no further minimization possible
    return concatenated_values
```
<|Solution End|>

<|Test Begin|>
```python
from solution import shortest_subsequence

def test_shortest_subsequence_basic():
    dicts1 = [{'name': 'a'}, {'name': 'abcd'}, {'name': 'ab'}]
    dicts2 = [{'name': 'xyz'}, {'name': 'xy'}, {'name': 'x'}]
    assert shortest_subsequence(dicts1, dicts2, 'name') == 'aabxyzc'

def test_shortest_subsequence_empty_lists():
    assert shortest_subsequence([], [], 'key') == ''

def test_shortest_subsequence_no_common_keys():
    dicts1 = [{'age': '23'}, {'age': '45'}]
    dicts2 = [{'height': '180'}, {'height': '170'}]
    assert shortest_subsequence(dicts1, dicts2, 'name') == ''

def test_shortest_subsequence_single_element_lists():
    dicts1 = [{'name': 'apple'}]
    dicts2 = [{'name': 'orange'}]
    assert shortest_subsequence(dicts1, dicts2, 'name') == 'appleorange'

def test_shortest_subsequence_duplicated_values():
    dicts1 = [{'name': 'x'}, {'name': 'y'}, {'name': 'x'}]
    dicts2 = [{'name': 'z'}, {'name': 'w'}, {'name': 'z'}]
    assert shortest_subsequence(dicts1, dicts2, 'name') == 'xyxzwz'
```
<|Test End|>