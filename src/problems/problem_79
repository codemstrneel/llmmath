QUESTION

Write a function to find the lateral surface area of a cone, and modify it to also calculate the total surface area of a cone, including the base.

SOLUTION/TESTS

<|Solution Begin|>
import math

def solution(radius, slant_height):
    """
    Returns a tuple containing the lateral surface area and the total surface area of a cone.
    The first element is the lateral surface area,
    and the second element is the total surface area including the base.
    
    Parameters:
    radius (float): The radius of the base of the cone.
    slant_height (float): The slant height of the cone.
    
    Returns:
    tuple: (lateral_surface_area, total_surface_area)
    """
    lateral_surface_area = math.pi * radius * slant_height
    base_area = math.pi * radius**2
    total_surface_area = lateral_surface_area + base_area
    return lateral_surface_area, total_surface_area
<|Solution End|>
<|Test Begin|>
import math
from solution import solution

def test_lateral_surface_area():
    lateral, _ = solution(3, 5)
    expected_lateral = math.pi * 3 * 5
    assert math.isclose(lateral, expected_lateral), f"Expected {expected_lateral}, got {lateral}"

def test_total_surface_area():
    _, total = solution(3, 5)
    expected_total = math.pi * 3 * 5 + math.pi * 3**2
    assert math.isclose(total, expected_total), f"Expected {expected_total}, got {total}"

def test_zero_radius():
    lateral, total = solution(0, 5)
    assert lateral == 0, f"Expected 0, got {lateral}"
    assert total == 0, f"Expected 0, got {total}"

def test_zero_slant_height():
    lateral, total = solution(3, 0)
    expected_total = math.pi * 3**2
    assert lateral == 0, f"Expected 0, got {lateral}"
    assert math.isclose(total, expected_total), f"Expected {expected_total}, got {total}"

def test_zero_radius_and_height():
    lateral, total = solution(0, 0)
    assert lateral == 0, f"Expected 0, got {lateral}"
    assert total == 0, f"Expected 0, got {total}"

<|Test End|>