QUESTION

Write a function that takes a list of lists, where each sublist contains positive integers representing side lengths of potential triangles, and a tuple with three integers. The function should perform the following tasks:

1. For each sublist, determine whether it forms a valid triangle. If the triangle is valid and the perimeter of the triangle is odd, calculate the area of the triangle using Heron's formula and round it up to two decimal places. Sum all these areas.

2. Check if the sum of areas is within the inclusive range specified by the first two integers of the tuple. If it is, proceed to find all integers in the list, concatenate them into a single string, and remove all characters except letters and numbers.

3. Return a dictionary with two key-value pairs:
   - "filtered_string": the cleaned string from step 2.
   - "area_sum": the summed areas from step 1 (consider only valid triangles with odd perimeters).

Assume all sublists contain at least three elements, that all side lengths are positive integers, and that the tuple contains distinct integers.

SOLUTION/TESTS

<|Solution Begin|>
def solution(triangle_lists, range_tuple):
    from math import sqrt, ceil
    
    def is_valid_triangle(sides):
        a, b, c = sorted(sides)
        return a + b > c

    def herons_area(sides):
        a, b, c = sides
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)

    total_area = 0
    for sides in triangle_lists:
        if len(sides) < 3:
            continue
        if is_valid_triangle(sides):
            a, b, c = sides
            perimeter = a + b + c
            if perimeter % 2 == 1:  # Check for odd perimeter
                total_area += herons_area(sides)
    
    lower_bound, upper_bound, _ = range_tuple
    if lower_bound <= total_area <= upper_bound:
        filtered_string = ''.join(filter(lambda x: x.isalnum(), ''.join(map(str, [x for sublist in triangle_lists for x in sublist]))))
    else:
        filtered_string = ''

    return {
        "filtered_string": filtered_string,
        "area_sum": total_area
    }
<|Solution End|>
<|Test Begin|>
def test_solution_example_case():
    triangle_lists = [[3, 4, 5], [6, 8, 10], [10, 6, 8]]
    range_tuple = (0, 10, 0)
    result = solution(triangle_lists, range_tuple)
    assert result == {"filtered_string": "36456108106", "area_sum": 12.0}

def test_solution_no_valid_triangles():
    triangle_lists = [[1, 1, 3], [1, 2, 4], [2, 2, 5]]
    range_tuple = (0, 10, 0)
    result = solution(triangle_lists, range_tuple)
    assert result == {"filtered_string": "113124225", "area_sum": 0.0}

def test_solution_odd_perimeter_check():
    triangle_lists = [[3, 4, 5], [7, 24, 25]]  # Only the first has odd perimeter
    range_tuple = (0, 100, 0)
    result = solution(triangle_lists, range_tuple)
    assert result == {"filtered_string": "347725", "area_sum": 6.0}  # area of [3, 4, 5] is 6

def test_solution_out_of_range_no_string():
    triangle_lists = [[3, 4, 5], [6, 8, 10]]
    range_tuple = (13, 20, 0)  # Total area 12.0 is out of bounds
    result = solution(triangle_lists, range_tuple)
    assert result == {"filtered_string": "", "area_sum": 12.0}

def test_solution_odd_and_valid_with_empty_string_case():
    triangle_lists = [[3, 4, 5], [7, 7, 2]]  # First is valid, second is not
    range_tuple = (5, 7, 0)
    result = solution(triangle_lists, range_tuple)
    assert result == {"filtered_string": "347772", "area_sum": 6.0}  # Only sum area of [3, 4, 5]

<|Test End|>