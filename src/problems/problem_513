QUESTION

**New Question:**

Write a Python function that processes a list of integers and a list of strings simultaneously with the following steps:

1. **Filter Negative Values:** First, filter out any integer from the list of integers that is negative. Simultaneously, remove strings from the list of strings that, when evaluated as integers, result in a negative number.

2. **Check for Integer Repetition:** For the filtered list of integers, find the integer that appears the most times. If thereâ€™s a tie, select the smallest integer.

3. **String Character Uniformity:** For the filtered list of strings, check if all characters in each string are the same. Create subsets of strings based on their uniqueness by length (e.g., group all strings of the same length separately if they are uniform).

4. **Return Results:** Return a tuple consisting of:
   - The integer with the maximum occurrences (from step 2). If the list is empty after filtering, return `None`.
   - The sum of the lengths of each subset of uniform strings (from step 3).

**Explanation of Combos:**

- **Negative Removal Concept:** Involves filtering out negative values, similar to removing negative numbers.
  
- **Maximum Occurrences in Lists:** Includes finding the integer with the most occurrences, drawing from the concept of determining the maximum frequency of an element.

- **Uniform Character Check and Subset Creation:** Combines checking if all characters in a string are identical and creating subsets based on uniqueness, inspired by both checking uniformity and organizing into subsets.

SOL & TESTS

<|Solution Begin|>```python
def process_lists(integers, strings):
    # Step 1: Filter negative values and corresponding strings
    filtered_integers = [num for num in integers if num >= 0]
    filtered_strings = [s for s in strings if s.isdigit() and int(s) >= 0]

    # Step 2: Check for integer repetition
    if not filtered_integers:
        max_occurred_integer = None
    else:
        from collections import Counter
        count = Counter(filtered_integers)
        max_count = max(count.values())
        candidates = [num for num, freq in count.items() if freq == max_count]
        max_occurred_integer = min(candidates)

    # Step 3: String character uniformity
    def are_characters_uniform(s):
        return len(set(s)) == 1
        
    uniform_string_lengths = {}
    for s in filtered_strings:
        if are_characters_uniform(s):
            length = len(s)
            if length in uniform_string_lengths:
                uniform_string_lengths[length].add(s)
            else:
                uniform_string_lengths[length] = {s}

    sum_of_lengths = sum(len(uniform_string_lengths[length]) for length in uniform_string_lengths)

    # Step 4: Return the results
    return (max_occurred_integer, sum_of_lengths)
```
<|Solution End|>

<|Test Begin|>```python
from solution import process_lists

def test_process_lists_no_negatives():
    integers = [1, 2, 2, 3, 1, 3, 3]
    strings = ["111", "22", "33", "4444", "55555", "333"]
    result = process_lists(integers, strings)
    assert result == (3, 4)

def test_process_lists_with_negatives():
    integers = [-1, -2, 2, 3, 3, -3, 0, 0, 3]
    strings = ["-111", "22", "-33", "333", "-4444", "0", "000"]
    result = process_lists(integers, strings)
    assert result == (3, 2)

def test_process_lists_all_negatives():
    integers = [-1, -2, -3]
    strings = ["-111", "-22"]
    result = process_lists(integers, strings)
    assert result == (None, 0)

def test_process_lists_empty():
    integers = []
    strings = []
    result = process_lists(integers, strings)
    assert result == (None, 0)

def test_process_lists_single_uniform_string():
    integers = [10, 10, 10]
    strings = ["1111", "2222"]
    result = process_lists(integers, strings)
    assert result == (10, 2)

def test_process_lists_no_uniform_strings():
    integers = [1, 2, 2, 3, 3, 3]
    strings = ["123", "456", "789"]
    result = process_lists(integers, strings)
    assert result == (3, 0)

def test_process_lists_uniform_and_non_uniform():
    integers = [2, 2, 3, 4]
    strings = ["111", "222", "123"]
    result = process_lists(integers, strings)
    assert result == (2, 2)
```
<|Test End|>