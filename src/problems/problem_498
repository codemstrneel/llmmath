QUESTION

Here is a new coding question that combines core concepts from Question 2 and Question 4 in a unique way:

### Novel Question:

Write a Python function that takes a list of strings `strings` and three integers `a`, `b`, and `c` as inputs. The function should perform the following tasks:

1. For each string in the list, count the number of vowels and consonants.
2. For each string, determine if the number of vowels is equal to the positive discriminant \(\Delta\) of a quadratic equation \(ax^2 + bx + c = 0\). The discriminant is given by \(\Delta = b^2 - 4ac\).
3. If the number of vowels matches the positive discriminant, calculate the sum of consonants in that string.
4. Construct a list of the consonant sums for strings where the condition from step 2 holds true.
5. Check if the coefficients \(a\), \(b\), and \(c\) form an arithmetic progression and determine the number of strings for which the discriminant condition holds.
6. If the coefficients form an arithmetic progression, return the average of the consonant sums calculated in step 4.

The function should return a dictionary with keys:
- `"consonant_sums"`: A list of the consonant sums of strings that met the condition.
- `"strings_matching_condition"`: The number of strings for which the discriminant condition holds.
- `"arithmetic_coefficient_average"`: The average consonant sum (rounded to two decimal places) if the coefficients form an arithmetic progression, or `None` if they do not.

### Example:

Given the list of strings `["example", "character", "orange"]` and coefficients `a = 1, b = 6, c = 9`:
1. Discriminant \(\Delta = 6^2 - 4 \times 1 \times 9 = 36 - 36 = 0\).

For each string:
- "example": 3 vowels, 4 consonants, does not meet condition.
- "character": 3 vowels, 6 consonants, does not meet condition.
- "orange": 3 vowels, 3 consonants, does not meet condition.

2. The arithmetic sequence condition is not met as \(1, 6, 9\) do not form an arithmetic progression.

3. Return:
```python
{
  "consonant_sums": [],
  "strings_matching_condition": 0,
  "arithmetic_coefficient_average": None
}
```

### Constraints:

1. Each string in `strings` will only contain alphabetical characters.
2. The integers `a`, `b`, and `c` are guaranteed to be such that the discriminant can be calculated without overflow.

SOL & TESTS

<|Solution Begin|>```python
def process_strings(strings, a, b, c):
    def is_vowel(char):
        return char.lower() in 'aeiou'
    
    def count_vowels_consonants(s):
        vowels = sum(1 for char in s if is_vowel(char))
        consonants = sum(1 for char in s if char.isalpha() and not is_vowel(char))
        return vowels, consonants

    def is_arithmetic_progression(x, y, z):
        return y - x == z - y

    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        discriminant = -1   # Assign an impossible value for discriminant if negative

    consonant_sums = []
    strings_matching_condition = 0
    
    for s in strings:
        vowels, consonants = count_vowels_consonants(s)
        if vowels == discriminant:
            consonant_sums.append(consonants)
            strings_matching_condition += 1

    if len(consonant_sums) == 0 or not is_arithmetic_progression(a, b, c):
        arithmetic_coefficient_average = None
    else:
        arithmetic_coefficient_average = round(sum(consonant_sums) / len(consonant_sums), 2)
    
    return {
        "consonant_sums": consonant_sums,
        "strings_matching_condition": strings_matching_condition,
        "arithmetic_coefficient_average": arithmetic_coefficient_average
    }
```<|Solution End|>

<|Test Begin|>```python
from solution import process_strings

def test_example_case():
    strings = ["example", "character", "orange"]
    a, b, c = 1, 6, 9
    result = process_strings(strings, a, b, c)
    assert result == {
        "consonant_sums": [],
        "strings_matching_condition": 0,
        "arithmetic_coefficient_average": None
    }

def test_one_string_meets_condition():
    strings = ["eeexample", "character", "orange"]
    a, b, c = 1, 0, 4
    result = process_strings(strings, a, b, c)
    assert result == {
        "consonant_sums": [5],
        "strings_matching_condition": 1,
        "arithmetic_coefficient_average": 5.0
    }

def test_two_strings_meet_condition_but_not_arithmetic():
    strings = ["eeee", "iiii", "abcd"]
    a, b, c = 1, 8, 16
    result = process_strings(strings, a, b, c)
    assert result == {
        "consonant_sums": [0, 0],
        "strings_matching_condition": 2,
        "arithmetic_coefficient_average": None
    }

def test_all_strings_meeting_condition_and_arithmetic():
    strings = ["aaaeeiiouu", "eeeiiiiuuu", "oeiouaeiou"]
    a, b, c = 2, 2, 0
    result = process_strings(strings, a, b, c)
    assert result == {
        "consonant_sums": [0, 0, 0],
        "strings_matching_condition": 3,
        "arithmetic_coefficient_average": 0.0
    }

def test_no_strings_meet_condition():
    strings = ["no", "match", "here"]
    a, b, c = 1, 1, 1
    result = process_strings(strings, a, b, c)
    assert result == {
        "consonant_sums": [],
        "strings_matching_condition": 0,
        "arithmetic_coefficient_average": None
    }
```<|Test End|>