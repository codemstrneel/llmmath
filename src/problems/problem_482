QUESTION

Create a Python function that takes an array of integers, where each element represents the maximum number of steps that can be taken forward from that element. Additionally, the function should accept a quadratic equation given by its coefficients. The task is to determine two things:

1. Compute the minimum number of jumps required to reach the end of the array.
2. For each jump index, check if it corresponds to an integer root of the given quadratic equation.

The function should return a dictionary with the following keys:
- "min_jumps": The minimum number of jumps required to reach the end of the array.
- "integer_root_indices": A list of indices in the array where the position corresponds to an integer root of the provided quadratic equation.

SOL & TESTS

```python
<|Solution Begin|> 
def min_jumps_with_roots(arr, a, b, c):
    def find_quadratic_integer_roots(a, b, c):
        """
        This function finds integer roots of a quadratic equation ax^2 + bx + c = 0.
        """
        discriminant = b ** 2 - 4 * a * c
        integer_roots = []
        
        if discriminant >= 0:
            sqrt_d = int(discriminant ** 0.5)
            if sqrt_d * sqrt_d == discriminant:  # perfect square check
                for sign in [-1, 1]:
                    root = (-b + sign * sqrt_d) / (2 * a)
                    if root.is_integer():
                        integer_roots.append(int(root))
        
        return integer_roots

    def min_jumps(arr):
        if len(arr) <= 1:
            return 0
        if arr[0] == 0:
            return float('inf')
        
        jumps = 0
        max_reach = arr[0]
        step = arr[0]
        n = len(arr)
        
        for i in range(1, n):
            if i == n - 1:
                return jumps + 1
            max_reach = max(max_reach, i + arr[i])
            step -= 1
            if step == 0:
                jumps += 1
                if i >= max_reach:
                    return float('inf')
                step = max_reach - i
        
        return float('inf')
    
    integer_roots = find_quadratic_integer_roots(a, b, c)
    index_integer_roots = [i for i in range(len(arr)) if i in integer_roots]
    
    result = {
        "min_jumps": min_jumps(arr),
        "integer_root_indices": index_integer_roots
    }
    
    return result
<|Solution End|>
```

```python
<|Test Begin|>
from solution import min_jumps_with_roots

def test_min_jumps_simple_case():
    assert min_jumps_with_roots([2, 3, 1, 1, 4], 1, -3, 2)["min_jumps"] == 2

def test_no_possible_jumps():
    assert min_jumps_with_roots([1, 0, 0, 0], 1, -3, 2)["min_jumps"] == float('inf')

def test_integer_root_indices():
    result = min_jumps_with_roots([2, 3, 1, 1, 4], 1, -1, -6)
    assert result["integer_root_indices"] == [2, 3]

def test_multiple_integer_root_indices():
    result = min_jumps_with_roots([1, 2, 3, 4, 5], 1, -3, 2)
    assert result["integer_root_indices"] == [1, 2]

def test_no_integer_roots():
    result = min_jumps_with_roots([3, 2, 1, 0, 4], 2, 3, 4)
    assert result["integer_root_indices"] == []
<|Test End|>
```