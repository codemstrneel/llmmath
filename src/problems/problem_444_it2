QUESTION

Write a function to compute the maximum sum of three distinct integers from a given list using sorting.

SOLUTION/TESTS

Let's address the issues in the solution and test cases, and make them correct. Specifically, we need to correct the logic to handle the case of all negative numbers and ensure the test format is structured correctly with the correct number of backticks for code blocks.

Given the task, the solution should handle the sorting correctly and identify the top three numbers for maximum sum without running into compilation issues.

Here's the corrected solution and test cases.

<|Solution Begin|>
```python
def solution(nums):
    """
    Returns the maximum sum of three distinct integers from the given list.
    
    :param nums: List of integers
    :return: Integer, the maximum sum of any three distinct integers
    """
    if len(nums) < 3:
        raise ValueError("The input list must contain at least three integers.")
    
    # Sort the list in non-decreasing order
    nums.sort()
    
    # The possible candidates for the maximum sum of three integers
    # are the sum of the last three sorted numbers or the first two and the last one (taking care of neg large/small)
    return max(nums[-1] + nums[-2] + nums[-3], nums[0] + nums[1] + nums[-1])
```
<|Solution End|>

<|Test Begin|>
```python
from solution import solution

def test_positive_numbers():
    assert solution([1, 2, 3, 4, 5]) == 12

def test_negative_numbers():
    assert solution([-10, -20, -30, -1]) == -11

def test_mixed_numbers():
    assert solution([-10, -20, 5, 30, 40]) == 75

def test_includes_zero():
    assert solution([-10, 0, 5, 2, 1]) == 8

def test_single_set_of_numbers():
    assert solution([1, 2, 3]) == 6

def test_large_numbers():
    assert solution([1000, 2000, 3000, -1000, -2000]) == 6000

def test_all_negative_with_large_abs():
    assert solution([-1, -2, -3, -4, -5]) == -6

def test_minimal_viable_list():
    assert solution([1, 2, 3]) == 6  # Directly testing the minimally valid input
    assert solution([-1, 0, 1]) == 0  # Mix with zero
    
def test_exceptions_on_small_list():
    try:
        solution([1, 2])
    except ValueError:
        assert True
    else:
        assert False

def test_duplicates_in_array():
    assert solution([2, 2, 2, 2, 2]) == 6  # Handles the list with same elements, should return sum of the three
```
<|Test End|>

This version ensures that syntax issues are resolved and includes handling for minimal size input constraints using exceptions.