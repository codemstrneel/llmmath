QUESTION

Write a function that processes a list of strings, where each string represents a set of coordinates in a 2D plane for a regular polygon (e.g., "A(1,2) B(3,4) C(5,6)"). The function should replace the coordinates of each point with the distance of that point from the origin (0,0). Then, sort the coordinates in increasing order based on these distances and return the modified list of strings.

SOLUTION/TESTS

<|Solution Begin|>
def solution(coordinate_strings):
    from math import sqrt
    
    def distance_from_origin(coord):
        x, y = coord
        return sqrt(x**2 + y**2)
    
    def parse_coordinates(coordinate_string):
        coordinates = []
        parts = coordinate_string.split(' ')
        for part in parts:
            name, coord_str = part[0], part[1:]
            x, y = map(int, coord_str.strip('()').split(','))
            coordinates.append((name, (x, y)))
        return coordinates
    
    def format_coordinates(coordinates):
        return ' '.join(f"{name}({dist:.2f})" for name, dist in coordinates)
    
    def process_string(coordinate_string):
        coordinates = parse_coordinates(coordinate_string)
        distances = [(name, distance_from_origin(coord)) for name, coord in coordinates]
        sorted_distances = sorted(distances, key=lambda x: x[1])
        return format_coordinates(sorted_distances)
    
    return [process_string(s) for s in coordinate_strings]

<|Solution End|>

<|Test Begin|>
def test_basic_case():
    input_data = ["A(3,4) B(1,1) C(0,0)"]
    expected_output = ["C(0.00) B(1.41) A(5.00)"]
    assert solution(input_data) == expected_output

def test_no_coordinates():
    input_data = [""]
    expected_output = [""]
    assert solution(input_data) == expected_output

def test_single_point():
    input_data = ["A(5,12)"]
    expected_output = ["A(13.00)"]
    assert solution(input_data) == expected_output

def test_all_same_distance():
    input_data = ["A(1,1) B(1,1) C(-1,-1)"]
    expected_output = ["A(1.41) B(1.41) C(1.41)"]
    assert solution(input_data) == expected_output

def test_multiple_strings():
    input_data = [
        "X(0,3) Y(4,3) Z(3,4)",
        "A(4,5) B(7,1) C(1,2)"
    ]
    expected_output = [
        "X(3.00) Z(5.00) Y(5.00)",
        "C(2.24) B(7.07) A(6.40)"
    ]
    assert solution(input_data) == expected_output

<|Test End|>