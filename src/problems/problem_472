QUESTION

Create a Python function that determines whether a cubic equation has roots that form a symmetric pattern around the y-axis (i.e., if for every root x, there exists a corresponding root -x among the roots of the equation). The function should take as input the coefficients of the cubic equation.

SOL & TESTS

To determine if a cubic equation has roots that are symmetric around the y-axis, we need to ensure that for every root \( x \), there exists a corresponding root \( -x \). A cubic equation is generally represented as \( ax^3 + bx^2 + cx + d = 0 \).

For the roots to be symmetric about the y-axis, the middle coefficient \( b \), representing the sum of roots taken one at a time, must be zero. Therefore, the cubic equation should not have the \( x^2 \) term, implying the equation reduces to \( ax^3 + cx + d = 0 \).

Let's implement a function to determine if the equation meets this criterion.

<|Solution Begin|> 
```python
def is_symmetric_roots(a, b, c, d):
    """
    Determines whether a cubic equation ax^3 + bx^2 + cx + d = 0 has roots that
    form a symmetric pattern around the y-axis.
    """
    # For the roots to be symmetric, the x^2 coefficient b must be zero
    return b == 0
```
<|Solution End|>

<|Test Begin|>
```python
from solution import is_symmetric_roots

def test_no_symmetric_roots_due_to_nonzero_b():
    assert is_symmetric_roots(1, 2, 3, 4) == False

def test_symmetric_roots_case():
    assert is_symmetric_roots(1, 0, -3, 2) == True

def test_zero_coefficients():
    assert is_symmetric_roots(0, 0, 0, 0) == True

def test_single_coefficient_nonzero():
    assert is_symmetric_roots(0, 0, 1, 0) == True

def test_negative_a_with_symmetric_roots():
    assert is_symmetric_roots(-2, 0, 4, -1) == True
```
<|Test End|>

This implementation checks whether the x^2 coefficient (second term) is zero, indicating symmetric roots around the y-axis if the equation is cubic. The tests check various scenarios to ensure the implementation is correct.