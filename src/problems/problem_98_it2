QUESTION

Write a function to find all the equilibrium indices of the given array that meet the additional condition: the value at the equilibrium index must be greater than the average of all elements in the array.

SOLUTION/TESTS

Let's go through the requirements and the previous tests to identify where the issues might be and correct them.

To recap, the `solution` function should:
1. Find equilibrium indices in an array, where the sum of elements on the left is equal to the sum of elements on the right.
2. Only consider indices where the element's value is greater than the average of all elements in the array.

Several test cases in the previous attempt had logical discrepancies. I will revise them to align correctly with the problem statement:

1. A single element should not be counted as an equilibrium index since there are no elements on either side.
2. Arrays without any equilibrium indices shouldn't return any indices.
3. Test cases should correctly account for the average condition.

Let's correct these and add new tests where necessary:

<|Solution Begin|>
def solution(arr):
    """
    Finds all equilibrium indices in the array where 
    the value at the index is greater than the average of all elements.
    An equilibrium index is an index where the sum of elements on the left is equal to the sum of elements on the right.
    """
    if not arr:
        return []

    total_sum = sum(arr)
    left_sum = 0
    avg = total_sum / len(arr)
    equilibrium_indices = []

    for i in range(len(arr)):
        right_sum = total_sum - left_sum - arr[i]

        if left_sum == right_sum and arr[i] > avg:
            equilibrium_indices.append(i)
        
        left_sum += arr[i]
        
    return equilibrium_indices
<|Solution End|>

<|Test Begin|>
import pytest

def test_solution_empty():
    assert solution([]) == []

def test_solution_no_equilibrium():
    assert solution([1, 2, 3]) == []

def test_solution_single_element():
    # No equilibrium when only one element (no left or right sum exists)
    assert solution([5]) == []

def test_solution_all_elements_equal():
    assert solution([10, 10, 10, 10, 10]) == []

def test_solution_with_valid_equilibria():
    # Average of array is 2.571428...
    # Valid equilibrium index is 3 with value 2 > 2.571428...
    assert solution([-7, 1, 5, 2, -4, 3, 0]) == []

def test_solution_with_valid_equilibria_2():
    arr = [1, 2, 3, 1, 3, 2, 1]
    # Total sum = 13, Average = ~1.857
    # Equilibrium at index 3, 4, and 5 with value 1, 3, and 2.
    # Only consider indices where the value is greater than the avg (1.857)
    # Hence, the valid equilibrium index is 4.
    assert solution(arr) == [4]

def test_solution_edge_cases():
    # Ensure to handle complex cases correctly
    assert solution([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == []
    # As no index has its value > average which are equilibrium points
    assert solution([10, 5, 5, 10, 10]) == []
<|Test End|>

Now the revised test cases should correctly evaluate the solution's behavior as per the problem statement.