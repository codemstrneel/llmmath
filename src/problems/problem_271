QUESTION

Create a function that takes a list of strings where each string can contain sentences with specific dates embedded in the format "YYYY-MM-DD". For each string, perform the following tasks:

1. Reverse the order of words in each sentence, similar to how you would perform in a typical string reversal task.
2. Extract any dates from the sentence using regular expressions and store them in a list.
3. If a sentence contains any alternating character patterns (i.e., it is made up of two alternating characters), note this information by returning a dictionary with the original sentence as the key and a boolean value indicating the presence of an alternating pattern as the value.
4. Return a tuple containing the modified list of sentences, the list of extracted dates, and the dictionary indicating alternating string patterns.

For example:

```python
input_data = [
    "The pattern ababab is interesting and ends on 2023-07-25",
    "Note that the event on 2021-12-12 is unique"
]

output = (
    ["interesting is ababab pattern The and ends on 2023-07-25", "unique is 2021-12-12 on event the that Note"],
    ["2023-07-25", "2021-12-12"],
    {
        "The pattern ababab is interesting and ends on 2023-07-25": True,
        "Note that the event on 2021-12-12 is unique": False
    }
)
```

This new question incorporates the concepts of reversing strings (akin to Question 1 and 4), extracting dates with regular expressions (from Question 4), and checking for alternating character patterns within strings (similar to Question 5) while developing a more complex and integrated challenge.

SOL & TESTS

<|Solution Begin|>```python
import re

def process_sentences(sentences):
    def reverse_words(sentence):
        """Reverse the order of words in a given sentence."""
        return ' '.join(sentence.split()[::-1])

    def extract_dates(sentence):
        """Extract dates in YYYY-MM-DD format from the sentence."""
        return re.findall(r'\b\d{4}-\d{2}-\d{2}\b', sentence)

    def is_alternating_pattern(sentence):
        """Check if a sentence contains an alternating character pattern."""
        words = sentence.split()
        for word in words:
            if len(word) >= 2 and all(word[i] == word[0] for i in range(0, len(word), 2)) and all(word[i] == word[1] for i in range(1, len(word), 2)):
                return True
        return False

    reversed_sentences = [reverse_words(s) for s in sentences]
    all_dates = [date for s in sentences for date in extract_dates(s)]
    alternating_patterns = {s: is_alternating_pattern(s) for s in sentences}

    return reversed_sentences, all_dates, alternating_patterns
```
<|Solution End|>

<|Test Begin|>```python
from solution import process_sentences

def test_process_sentences_basic():
    input_data = [
        "The pattern ababab is interesting and ends on 2023-07-25",
        "Note that the event on 2021-12-12 is unique"
    ]
    expected_output = (
        ["interesting is ababab pattern The and ends on 2023-07-25", "unique is 2021-12-12 on event the that Note"],
        ["2023-07-25", "2021-12-12"],
        {
            "The pattern ababab is interesting and ends on 2023-07-25": True,
            "Note that the event on 2021-12-12 is unique": False
        }
    )
    assert process_sentences(input_data) == expected_output

def test_process_sentences_no_dates():
    input_data = [
        "No dates here in this sentence",
        "Another without dates making it clear"
    ]
    expected_output = (
        ["sentence this in here dates No", "clear it making dates without Another"],
        [],
        {
            "No dates here in this sentence": False,
            "Another without dates making it clear": False
        }
    )
    assert process_sentences(input_data) == expected_output

def test_process_sentences_alternating_patterns():
    input_data = [
        "abacabadabacaba is an interesting concept",
        "xyxyxy loves simplicity",
        "mnopqmn is not alternating"
    ]
    expected_output = (
        ["concept interesting an is abacabadabacaba", "simplicity loves xyxyxy", "alternating not is mnopqmn"],
        [],
        {
            "abacabadabacaba is an interesting concept": False,
            "xyxyxy loves simplicity": True,
            "mnopqmn is not alternating": False
        }
    )
    assert process_sentences(input_data) == expected_output

def test_process_sentences_mixed_cases():
    input_data = [
        "12345678912345, 67890123456789, and none date",
        "abab is a short pattern"
    ]
    expected_output = (
        ["date none and 67890123456789, 12345678912345,", "pattern short a is abab"],
        [],
        {
            "12345678912345, 67890123456789, and none date": False,
            "abab is a short pattern": True
        }
    )
    assert process_sentences(input_data) == expected_output

def test_process_sentences_various_dates():
    input_data = [
        "The opening date is 2022-06-15 and closing date 2023-12-31",
        "Event 2023-01-01 is celebrated"
    ]
    expected_output = (
        ["2022-06-15 is date opening The and 2023-12-31 date closing", "celebrated is 2023-01-01 Event"],
        ["2022-06-15", "2023-12-31", "2023-01-01"],
        {
            "The opening date is 2022-06-15 and closing date 2023-12-31": False,
            "Event 2023-01-01 is celebrated": False
        }
    )
    assert process_sentences(input_data) == expected_output
```
<|Test End|>