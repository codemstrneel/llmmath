QUESTION

Create a Python function that combines duplicate word removal, zero movement, and length-based sorting. Given a list of strings, the function should first remove duplicate words within each string, then move any word containing the string "zero" to the end of the list. Once these operations are done, the function should sort the strings based on their length in descending order before returning the modified list of strings.

SOL & TESTS

Below is the solution to the task along with the unit tests.

<|Solution Begin|>```python
def process_strings(strings):
    """
    Processes a list of strings by removing duplicate words within each string,
    moving words containing 'zero' to the end of each string, and then
    sorting the list of strings based on their length in descending order.
    """
    processed_strings = []

    for string in strings:
        words = string.split()
        seen = set()
        filtered_words = []
        zero_words = []

        for word in words:
            if word not in seen:
                seen.add(word)
                if 'zero' in word:
                    zero_words.append(word)
                else:
                    filtered_words.append(word)
        
        # Combine non-zero words and zero-words
        processed_string = ' '.join(filtered_words + zero_words)
        processed_strings.append(processed_string)

    # Sort the processed strings based on their length in descending order
    processed_strings.sort(key=lambda x: len(x), reverse=True)
    
    return processed_strings
```
<|Solution End|>

<|Test Begin|>```python
from solution import process_strings

def test_duplicate_removal_single_string():
    assert process_strings(["hello world hello"]) == ["world hello"]

def test_zero_movement_single_string():
    assert process_strings(["zero three zeroone two"]) == ["three two zero zeroone"]

def test_full_processing():
    input_data = [
        "this zero is a test",
        "zerohello world zerohello",
        "zero zero removes zero",
        "just a regular sentence without zeros",
        "short zero"
    ]
    expected_output = [
        "just a regular sentence without zeros",
        "this is a test zero",
        "world zerohello",
        "removes",
        "short zero"
    ]
    assert process_strings(input_data) == expected_output

def test_empty_list():
    assert process_strings([]) == []

def test_single_word():
    assert process_strings(["zero"]) == ["zero"]
    assert process_strings(["simple"]) == ["simple"]

def test_mixed_inputs():
    input_data = [
        "quick brown fox zero jumps",
        "over the lazy dog",
        "over zero shadow",
        "apple orange banana zero"
    ]
    expected_output = [
        "quick brown fox jumps zero",
        "apple orange banana zero",
        "over the lazy dog",
        "over shadow zero"
    ]
    assert process_strings(input_data) == expected_output
```
<|Test End|>