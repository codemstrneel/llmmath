QUESTION

Write a function to subtract the elements of the given nested tuples. Ensure your solution handles tuples with varying depths of nesting.

SOL & TESTS

<|Solution Begin|>```python
def subtract_nested_tuples(t1, t2):
    """
    Recursively subtracts elements of two nested tuples t2 from t1.
    Note: The structure and depth of t1 and t2 must be identical.
    """
    if isinstance(t1, tuple) and isinstance(t2, tuple):
        return tuple(subtract_nested_tuples(a, b) for a, b in zip(t1, t2))
    else:
        return t1 - t2
```
<|Solution End|>
<|Test Begin|>```python
from solution import subtract_nested_tuples

def test_subtract_flat_tuples():
    assert subtract_nested_tuples((10, 20, 30), (1, 2, 3)) == (9, 18, 27)

def test_subtract_nested_tuples():
    assert subtract_nested_tuples((10, (20, 30), 40), (1, (2, 3), 4)) == (9, (18, 27), 36)

def test_subtract_deeper_nested_tuples():
    assert subtract_nested_tuples((10, (20, (30, 40)), 50), (1, (2, (3, 4)), 5)) == (9, (18, (27, 36)), 45)

def test_subtract_large_numbers():
    assert subtract_nested_tuples((1000, 2000, 3000), (500, 1000, 1500)) == (500, 1000, 1500)

def test_subtract_with_zero():
    assert subtract_nested_tuples((10, 0, 20), (0, 0, 10)) == (10, 0, 10)

def test_subtract_negative_numbers():
    assert subtract_nested_tuples((10, -20, 30), (5, -10, 15)) == (5, -10, 15)
```
<|Test End|>