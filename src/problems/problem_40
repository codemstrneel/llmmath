QUESTION

Write a Python function that takes a list of tuples, where each tuple represents a month and associated data. The function should return a tuple list where each tuple consists of letters representing each column for months with 31 days, and count the occurrences of lowercase letters across all those tuples.

SOLUTION/TESTS

To solve this problem, we need to achieve the following:

1. Identify the months with 31 days from the given list of tuples.
2. Filter these tuples based on the month.
3. Create a new list of tuples consisting only of the letters (columns) from these filtered tuples.
4. Count the occurrences of lowercase letters in all the tuples returned.

Let's implement the function step-by-step and ensure it meets the requirements.

```python
<|Solution Begin|>
def solution(data):
    """
    Takes a list of tuples where each tuple represents a month and associated data,
    returns a tuple list of letter representations for months with 31 days,
    and a count of lowercase letters across all tuples.
    """
    # List of months with 31 days
    months_with_31_days = {
        "January", "March", "May", "July",
        "August", "October", "December"
    }
    
    # Filter tuples that correspond to months with 31 days
    filtered_tuples = [
        tuple(item[1:]) for item in data if item[0] in months_with_31_days
    ]
    
    # Count lowercase letters in all tuples
    lowercase_count = sum(
        1 for tup in filtered_tuples for char in tup if char.islower()
    )
    
    return filtered_tuples, lowercase_count
<|Solution End|>
```

Now, let's create unit tests for this function. We'll cover various cases including months with and without 31 days, different mixes of character representations, and counting of lowercase letters.

```python
<|Test Begin|>
from solution import solution

def test_basic_case():
    data = [
        ("January", "A", "b", "C"),
        ("February", "d", "E", "F"),
        ("March", "g", "h", "i"),
        ("April", "J", "k", "L"),
        ("May", "m", "n", "o"),
        ("June", "p", "Q", "R"),
    ]
    expected_filtered = [
        ("A", "b", "C"),
        ("g", "h", "i"),
        ("m", "n", "o"),
    ]
    expected_lowercase_count = 7
    result = solution(data)
    assert result[0] == expected_filtered, f"Expected filtered tuples: {expected_filtered}, but got: {result[0]}"
    assert result[1] == expected_lowercase_count, f"Expected lowercase count: {expected_lowercase_count}, but got: {result[1]}"

def test_no_31_day_months():
    data = [
        ("February", "a", "B"),
        ("April", "c", "D"),
        ("June", "e", "F"),
    ]
    result = solution(data)
    assert result[0] == [], f"Expected filtered tuples to be empty but got: {result[0]}"
    assert result[1] == 0, f"Expected lowercase count to be 0 but got: {result[1]}"
    
def test_all_31_day_months():
    data = [
        ("January", "a", "B"),
        ("March", "c", "d"),
        ("May", "e", "f"),
        ("July", "g", "h"),
        ("August", "i", "J"),
        ("October", "k", "L"),
        ("December", "m", "n"),
    ]
    expected_filtered = [
        ("a", "B"),
        ("c", "d"),
        ("e", "f"),
        ("g", "h"),
        ("i", "J"),
        ("k", "L"),
        ("m", "n")
    ]
    expected_lowercase_count = 9
    result = solution(data)
    assert result[0] == expected_filtered, f"Expected filtered tuples: {expected_filtered}, but got: {result[0]}"
    assert result[1] == expected_lowercase_count, f"Expected lowercase count: {expected_lowercase_count}, but got: {result[1]}"

def test_empty_input():
    result = solution([])
    assert result[0] == [], "Expected filtered tuples to be empty for empty input"
    assert result[1] == 0, "Expected lowercase count to be 0 for empty input"
<|Test End|>
```

Each test case is designed to evaluate a different aspect of the function to ensure it works correctly in various situations.