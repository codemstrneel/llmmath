QUESTION

Write a function that takes an array of integers and a binary tree as inputs. First, compute and return the maximum product of three numbers from the array using a heap queue to ensure optimal time complexity. Then, traverse the binary tree to collect its node values into a list, removing any consecutive duplicate values. If the sum of the last two values in the modified list is greater than the maximum product found, replace those two values with the number 50. Finally, return both the maximum product and the modified list.

SOLUTION/TESTS

The failure in the test cases suggests there is a misunderstanding or error in handling the sequence logic and condition checks in the function. Let's reevaluate and ensure the solution logic meets all specified requirements:

**Task Breakdown:**
1. Calculate the maximum product of any three numbers in the array.
2. Traverse the binary tree in-order and list node values, removing consecutive duplicates.
3. If the sum of the last two values in this list exceeds the max product, replace them with 50.

**Adjustments to Make:**
- Modify the conditions and checking mechanism for the replacement case.
- Fix test cases to ensure proper logic flow and expected values.

Here's a solution revision plan:

1. **Ensure Correct Calculation**: The max product calculation looks sound, using a heap to optimize retrieval of largest/smallest elements.
2. **Correct In-order Traversal**: Confirm correct and duplicate-free aggregation of tree values.
3. **Revise Logic for Replacement**: Revisit conditions for replacing list's last two elements with 50.

Let's go ahead and apply these steps:

```python
<|Solution Begin|>
from heapq import nlargest, nsmallest

class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def solution(array, root):
    # Step 1: Find maximum product of three numbers from the array using a heap
    if len(array) < 3:
        raise ValueError("Array must contain at least three numbers.")
    max1, max2, max3 = nlargest(3, array)
    min1, min2 = nsmallest(2, array)
    max_product = max(max1 * max2 * max3, max1 * min1 * min2)
    
    # Step 2: Traverse the binary tree and collect node values
    def traverse_tree(node):
        """ Helper function to perform inorder traversal on the binary tree. """
        if not node:
            return []
        return traverse_tree(node.left) + [node.value] + traverse_tree(node.right)

    node_values = traverse_tree(root)

    # Step 3: Remove consecutive duplicate values from the list
    unique_values = []
    if node_values:
        unique_values.append(node_values[0])
        for value in node_values[1:]:
            if value != unique_values[-1]:
                unique_values.append(value)
    
    # Step 4: Check the sum of the last two values and possibly replace them with 50
    if len(unique_values) >= 2 and unique_values[-1] + unique_values[-2] > max_product:
        unique_values[-2:] = [50]
    
    return max_product, unique_values
<|Solution End|>
```

### Unit Tests
Here's the new set of unit tests to better reflect the logical requirements and expected outcomes:

```python
<|Test Begin|>
from solution import solution, TreeNode

def test_max_product():
    array = [3, 5, 1, 9, 7]
    tree = TreeNode(2, TreeNode(1), TreeNode(3))
    assert solution(array, tree) == (315, [1, 2, 3])

def test_sum_replacement():
    array = [1, 9, 8, 7, 6]
    tree = TreeNode(5, TreeNode(4), TreeNode(8, TreeNode(7), TreeNode(9)))
    assert solution(array, tree) == (504, [4, 5, 7, 9, 50])

def test_with_negatives():
    array = [-10, -10, 1, 3, 2]
    tree = TreeNode(1, TreeNode(0), TreeNode(-1, TreeNode(3), TreeNode(1)))
    assert solution(array, tree) == (300, [0, 1, 3, -1, 1])

def test_duplicate_removal():
    array = [2, 3, 5, 4]
    tree = TreeNode(2, TreeNode(2), TreeNode(3, TreeNode(2), TreeNode(2)))
    assert solution(array, tree) == (30, [2, 3])

def test_empty_tree():
    array = [1, 2, 3, 4, 5, 6]
    tree = None
    assert solution(array, tree) == (120, [])

def test_too_small_array():
    array = [1, 2]
    tree = TreeNode(1)
    try:
        solution(array, tree)
        assert False, "Function should raise error for too small array"
    except ValueError:
        pass
<|Test End|>
```

These tests cover scenarios including tree traversal, possible replacements, and array conditions. This should correct failed logic for expected outcomes.