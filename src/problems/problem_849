QUESTION

Write a function to determine the minimum number of meeting rooms required to accommodate all scheduled meetings in a conference center. Each meeting has a start and end time, and no two meetings can occur in the same room at the same time.

SOL & TESTS

```python
<|Solution Begin|>
def min_meeting_rooms(meetings):
    """
    Determines the minimum number of meeting rooms required.

    Parameters:
    meetings (list of tuples): Each tuple contains two integers representing 
                               the start and end times of a meeting.

    Returns:
    int: Minimum number of meeting rooms required.
    """
    if not meetings:
        return 0

    # Create two separate lists for start and end times
    start_times = sorted([meeting[0] for meeting in meetings])
    end_times = sorted([meeting[1] for meeting in meetings])

    start_pointer = 0
    end_pointer = 0
    used_rooms = 0
    max_rooms = 0
    
    # Iterate over intervals using two pointers
    while start_pointer < len(meetings):
        # If there is a meeting that has started before the last meeting has ended
        if start_times[start_pointer] < end_times[end_pointer]:
            used_rooms += 1
            start_pointer += 1
        else:
            # Move the end pointer if the earliest ending is after the latest starting
            used_rooms -= 1
            end_pointer += 1
        # Update the maximum number of rooms used
        max_rooms = max(max_rooms, used_rooms)
    
    return max_rooms
<|Solution End|>
```

```python
<|Test Begin|>
from solution import min_meeting_rooms

def test_min_meeting_rooms_no_meetings():
    assert min_meeting_rooms([]) == 0

def test_min_meeting_rooms_non_overlapping():
    assert min_meeting_rooms([(1, 2), (3, 4), (5, 6)]) == 1

def test_min_meeting_rooms_fully_overlapping():
    assert min_meeting_rooms([(1, 4), (2, 5), (3, 6)]) == 3

def test_min_meeting_rooms_partially_overlapping():
    assert min_meeting_rooms([(1, 3), (2, 4), (3, 5)]) == 2

def test_min_meeting_rooms_single_meeting():
    assert min_meeting_rooms([(1, 10)]) == 1

def test_min_meeting_rooms_mixed():
    assert min_meeting_rooms([(1, 5), (2, 6), (8, 9), (8, 9), (5, 8)]) == 3

def test_min_meeting_rooms_identical_meetings():
    assert min_meeting_rooms([(1, 4), (1, 4), (1, 4)]) == 3
<|Test End|>
```