QUESTION

Create a function that takes a list of tuples and a camel case string, performs two tasks, and returns the results as a dictionary:

1. Convert the camel case string to a snake case string.
2. Calculate the cumulative sum of all numerical values within the list of tuples.

The function should return a dictionary with the snake case transformation as one key-value pair and the cumulative sum as another key-value pair. Ensure that the list of tuples may contain both integers and other data types, but only integers contribute to the cumulative sum.

SOL & TESTS

<|Solution Begin|>```python
import re

def camel_to_snake(camel_str):
    """
    Converts a camel case string to a snake case string.
    """
    snake_str = re.sub('([a-z0-9])([A-Z])', r'\1_\2', camel_str)
    return snake_str.lower()

def calculate_cumulative_sum(tuples_list):
    """
    Calculates the cumulative sum of all integers in a list of tuples.
    """
    cumulative_sum = 0
    for tpl in tuples_list:
        for item in tpl:
            if isinstance(item, int):
                cumulative_sum += item
    return cumulative_sum

def transform_and_calculate(tuples_list, camel_str):
    """
    Takes a list of tuples and camel case string to perform two tasks:
    1. Convert the camel case string to a snake case string.
    2. Calculate the cumulative sum of all integers within the list of tuples.
    
    Returns:
        dict: containing the snake_case string and the cumulative sum.
    """
    snake_str = camel_to_snake(camel_str)
    cum_sum = calculate_cumulative_sum(tuples_list)
    return {'snake_case': snake_str, 'cumulative_sum': cum_sum}
```
<|Solution End|>

<|Test Begin|>```python
from solution import transform_and_calculate

def test_camel_to_snake_transformation():
    assert transform_and_calculate([], "CamelCaseString")['snake_case'] == "camel_case_string"
    assert transform_and_calculate([], "simpleTest")['snake_case'] == "simple_test"
    assert transform_and_calculate([], "ThisIsATest")['snake_case'] == "this_is_a_test"
    assert transform_and_calculate([], "camelTest")['snake_case'] == "camel_test"

def test_cumulative_sum():
    assert transform_and_calculate([(1, 2), (3, 4)], "")['cumulative_sum'] == 10
    assert transform_and_calculate([(1, 'a', (4, 5)), (3, 'b')], "")['cumulative_sum'] == 4
    assert transform_and_calculate([(10, 20), (30, 'b', 40)], "")['cumulative_sum'] == 100
    assert transform_and_calculate([(0, 0), (0, 0)], "")['cumulative_sum'] == 0
    assert transform_and_calculate([], "")['cumulative_sum'] == 0

def test_combined_functionality():
    result = transform_and_calculate([(1, 2, 'x'), (3, 'y', 4)], "SampleString")
    assert result == {'snake_case': 'sample_string', 'cumulative_sum': 10}
``` 
<|Test End|>