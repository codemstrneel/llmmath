QUESTION

Create a Python function that takes a list of non-empty tuples and a target integer. The function should first sort the list of tuples in increasing order based on the last element of each tuple. After sorting, multiply the adjacent elements within each tuple, and return a new list of tuples where each tuple contains the original elements followed by the product of adjacent elements. Finally, remove any tuples where the product of adjacent elements equals the given target integer.

For example:

```python
def process_tuples(tuples_list, target):
    # Your implementation here

# Example usage:
tuples = [(3, 1, 2), (4, 6, 5), (7, 8, 9)]
target = 6
print(process_tuples(tuples, target))
```

In this problem, you are combining the concepts of sorting tuples by the last element, multiplying adjacent elements, and conditionally filtering tuples based on computed criteria.

SOL & TESTS

<|Solution Begin|>```python
def process_tuples(tuples_list, target):
    """
    Process a list of tuples by sorting them based on the last element,
    calculating the product of adjacent elements, and filtering based on a target.
    
    :param tuples_list: List of non-empty tuples.
    :param target: An integer target.
    :return: Processed list of tuples.
    """
    # Step 1: Sort the tuples based on the last element
    tuples_list.sort(key=lambda x: x[-1])
    
    # Step 2: Create new tuples with the original elements and products of adjacent items
    processed_tuples = []
    for tup in tuples_list:
        products = [tup[i] * tup[i+1] for i in range(len(tup) - 1)]
        new_tuple = tup + tuple(products)
        processed_tuples.append(new_tuple)
    
    # Step 3: Filter out tuples where any product equals the target
    result = [tup for tup in processed_tuples if target not in tup[len(tup)//2:]]
    
    return result
```
<|Solution End|>

<|Test Begin|>```python
from solution import process_tuples

def test_process_tuples_example_case():
    assert process_tuples([(3, 1, 2), (4, 6, 5), (7, 8, 9)], 6) == [(3, 1, 2, 3, 2), (7, 8, 9, 56, 72)]

def test_process_tuples_multiple_removals():
    assert process_tuples([(3, 1, 2), (4, 6, 5), (2, 3, 2)], 6) == [(3, 1, 2, 3, 2)]
    
def test_process_tuples_no_removals():
    assert process_tuples([(1, 2, 3), (2, 3, 4)], 24) == [(1, 2, 3, 2, 6), (2, 3, 4, 6, 12)]
    
def test_process_tuples_all_removals():
    assert process_tuples([(2, 3), (1, 6), (3, 2)], 6) == []
    
def test_process_tuples_empty_input():
    assert process_tuples([], 6) == []
    
def test_process_tuples_large_numbers():
    assert process_tuples([(1000, 2000), (5000, 1000)], 2000000) == [(1000, 2000, 2000000)]
``` 
<|Test End|>