QUESTION

Create a function that takes a list of strings and a power value as input. The function should perform the following tasks:

1. Remove duplicate strings from the list in a case-insensitive manner, preserving the original order.
2. For each unique string, calculate the sum of the digits of the total length (number of characters) raised to the given power.
3. Return a dictionary where each unique string is a key and the corresponding value is the sum of the digits from step 2.

This problem combines elements of string manipulation, simple arithmetic operations, and dictionary usage, providing a multifaceted coding challenge.

SOL & TESTS

```markdown
<|Solution Begin|> 
```python
def process_strings(strings, power):
    """
    Processes a list of strings by removing duplicates (case insensitive),
    calculating the sum of the digits of the length raised to a given power,
    and returning a dictionary with the results.
    
    Parameters:
    strings (list): List of strings.
    power (int): Power value to which the length of the string is raised.

    Returns:
    dict: Dictionary with unique strings and corresponding calculated values.
    """
    seen = set()
    result = {}

    for s in strings:
        lower_s = s.lower()
        if lower_s not in seen:
            seen.add(lower_s)
            length_pow = len(s) ** power
            digit_sum = sum(int(digit) for digit in str(length_pow))
            result[s] = digit_sum

    return result
```
<|Solution End|>
<|Test Begin|> 
```python
from solution import process_strings

def test_process_strings_all_unique():
    strings = ["a", "ab", "abc"]
    power = 2
    expected = {"a": 1, "ab": 4, "abc": 9}
    assert process_strings(strings, power) == expected

def test_process_strings_with_duplicates_different_cases():
    strings = ["apple", "banana", "Apple", "BANANA", "orange"]
    power = 3
    # Lengths: apple: 5^3, banana: 6^3, orange: 6^3
    # Values: apple and Apple have the same length 125, sum of digits = 8
    # banana and BANANA have the same length 216, sum of digits = 9
    # orange: 216, sum of digits = 9
    expected = {"apple": 8, "banana": 9, "orange": 9}
    assert process_strings(strings, power) == expected

def test_process_strings_single_element():
    strings = ["hello"]
    power = 4
    length_pow = 5 ** 4  # 5^4 = 625
    expected = {"hello": 13}  # 6 + 2 + 5 = 13
    assert process_strings(strings, power) == expected

def test_process_strings_empty_list():
    strings = []
    power = 1
    expected = {}
    assert process_strings(strings, power) == expected

def test_process_strings_mixed_case():
    strings = ["Hero", "hero", "HERO"]
    power = 2
    length_pow = 4 ** 2  # 4^2 = 16
    expected = {"Hero": 7}  # 1 + 6 = 7, only one entry as all are duplicates
    assert process_strings(strings, power) == expected
```
<|Test End|>
```