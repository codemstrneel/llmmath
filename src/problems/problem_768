QUESTION

Create a Python function that processes a list composed of strings, numbers, and tuples, undertaking these tasks:

1. Filter out strings that contain the letter 'e' and convert them from camelCase to snake_case.
2. For each numeric element in the list, determine the cube root for the number's position in the list (starting at 1).
3. For any pair of tuples in the input list, determine if one tuple is a superset of the other and calculate the perimeter of a circle using tuple elements as the radius, only if a superset relationship exists between them.
4. Return a dictionary with:
   - "formatted_strings": A list of dictionaries, each holding the original string and its snake_case version if it contains 'e'.
   - "cube_roots": A list that maps each original number to the cube root of its position in the list.
   - "circle_perimeters": A list of perimeters calculated from tuple pairs meeting the superset condition.

SOL & TESTS

```python
import re
import math

def camel_to_snake(name):
    """
    Convert camelCase to snake_case
    """
    name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    name = re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()
    return name

def process_list(lst):
    formatted_strings = []
    cube_roots = []
    circle_perimeters = []

    for index, element in enumerate(lst, start=1):
        if isinstance(element, str):
            if 'e' in element:
                snake_case = camel_to_snake(element)
                formatted_strings.append({"original": element, "snake_case": snake_case})
        
        elif isinstance(element, (int, float)):
            cube_root = round(index ** (1/3), 6)  # precision up to 6 decimal points
            cube_roots.append({"original_number": element, "cube_root_of_position": cube_root})
        
        elif isinstance(element, tuple):
            for other in lst:
                if element != other and isinstance(other, tuple):
                    if set(element).issuperset(set(other)) or set(other).issuperset(set(element)):
                        perimeter = 2 * math.pi * sum(element)  # Calculate circle perimeter as `2Ï€r`, where `r` is sum of radii
                        circle_perimeters.append(perimeter)
                        break

    return {
        "formatted_strings": formatted_strings,
        "cube_roots": cube_roots,
        "circle_perimeters": circle_perimeters
}
```
<|Solution End|>
<|Test Begin|>
```python
from solution import process_list

def test_process_list_with_mixed_elements():
    result = process_list(['helloWorld', 8, (1, 2), 'Python', 27, (1, 2, 3)])
    assert result["formatted_strings"] == [{"original": "helloWorld", "snake_case": "hello_world"}]
    assert result["cube_roots"] == [{"original_number": 8, "cube_root_of_position": 1.259921}, {"original_number": 27, "cube_root_of_position": 1.817121}]
    assert len(result["circle_perimeters"]) == 0

def test_process_list_with_edge_case():
    # No elements contain 'e', no numeric values, no superset tuples
    result = process_list(['abcd', 'AbCdEfGh', (3,4)])
    assert result["formatted_strings"] == [{"original": "AbCdEfGh", "snake_case": "ab_cd_ef_gh"}]
    assert result["cube_roots"] == []
    assert len(result["circle_perimeters"]) == 0

def test_process_list_with_only_strings():
    result = process_list(['one', 'Two', 'threeFour'])
    assert result["formatted_strings"] == [{"original": "one", "snake_case": "one"}, {"original": "threeFour", "snake_case": "three_four"}]
    assert result["cube_roots"] == []
    assert len(result["circle_perimeters"]) == 0

def test_process_list_with_numeric_positions():
    result = process_list([11, 22, 22, 33, 44])
    assert len(result["formatted_strings"]) == 0
    assert result["cube_roots"] == [
        {"original_number": 11, "cube_root_of_position": 1.0},
        {"original_number": 22, "cube_root_of_position": 1.259921},
        {"original_number": 22, "cube_root_of_position": 1.442250},
        {"original_number": 33, "cube_root_of_position": 1.587401},
        {"original_number": 44, "cube_root_of_position": 1.709976}
    ]
    assert len(result["circle_perimeters"]) == 0

def test_process_list_with_superset_tuples():
    result = process_list([(2, 3), (2, 3, 5), 'ExampleString'])
    assert result["formatted_strings"] == [{"original": "ExampleString", "snake_case": "example_string"}]
    assert result["cube_roots"] == []
    assert len(result["circle_perimeters"]) == 1  # One pair (2,3) is a subset of (2,3,5)
```
<|Test End|>