QUESTION

Create a Python function that takes in two arguments: a list of words and a list of integers. The function should perform the following tasks:

1. Remove any words that appear more than once in the list, keeping only their first occurrence.
2. Identify and count sequences of increasing integers (e.g., in the list [1, 2, 3, 2, 3, 4, 1], the sequences are [1, 2, 3] and [2, 3, 4]) and return the lengths of these increasing sequences in a list.

The function should return a tuple containing the list of unique words and the list of lengths of the increasing integer sequences.

SOL & TESTS

```python
def process_data(words, nums):
    """
    Removes duplicate words, keeping only their first occurrence,
    and calculates the lengths of sequences of increasing numbers.
    
    Parameters:
    words (list of str): The list of words.
    nums (list of int): The list of integers.
    
    Returns:
    tuple: A tuple containing:
        - list of unique words in order of first appearance.
        - list of lengths of increasing sequences of integers.
    """
    
    # Task 1: Remove duplicates and keep the first occurrence
    seen_words = set()
    unique_words = []
    for word in words:
        if word not in seen_words:
            unique_words.append(word)
            seen_words.add(word)
            
    # Task 2: Identify increasing sequences
    if not nums:
        inc_lengths = []
    else:
        inc_lengths = []
        current_length = 1
        
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                current_length += 1
            else:
                if current_length > 1:
                    inc_lengths.append(current_length)
                current_length = 1
        
        # Append the last sequence if it's an increasing one.
        if current_length > 1:
            inc_lengths.append(current_length)
    
    return unique_words, inc_lengths
```

<|Test Begin|>
```python
from solution import process_data

def test_both_functions():
    words = ["apple", "banana", "apple", "orange", "banana", "kiwi", "kiwi"]
    nums = [1, 2, 3, 2, 3, 4, 1]
    expected = (["apple", "banana", "orange", "kiwi"], [3, 3])
    assert process_data(words, nums) == expected

def test_no_duplicate_words():
    words = ["apple", "banana", "orange", "kiwi"]
    nums = [1, 2, 1, 2, 1]
    expected = (["apple", "banana", "orange", "kiwi"], [2, 2])
    assert process_data(words, nums) == expected

def test_no_increasing_sequence():
    words = ["apple"]
    nums = [3, 2, 1]
    expected = (["apple"], [])
    assert process_data(words, nums) == expected

def test_all_increasing():
    words = []
    nums = [1, 2, 3, 4, 5]
    expected = ([], [5])
    assert process_data(words, nums) == expected

def test_empty_inputs():
    words = []
    nums = []
    expected = ([], [])
    assert process_data(words, nums) == expected

def test_single_word_and_number():
    words = ["apple", "apple", "apple"]
    nums = [1]
    expected = (["apple"], [])
    assert process_data(words, nums) == expected
```
<|Test End|>