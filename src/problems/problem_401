QUESTION

New Question: Write a function to determine the number of elements at corresponding positions in two given lists that are both even numbers. Use the map function to achieve this. Additionally, ensure that your solution is efficient for lists containing up to 10,000 elements.

SOL & TESTS

<|Solution Begin|>
```python
def count_even_pairs(list1, list2):
    """
    Returns the number of positions at which both elements in the two lists are even numbers.
    """
    # Use map to compare pairs and sum up the True values which are considered as 1
    return sum(map(lambda pair: pair[0] % 2 == 0 and pair[1] % 2 == 0, zip(list1, list2)))
```
<|Solution End|>
<|Test Begin|>
```python
from solution import count_even_pairs

def test_count_even_pairs_basic():
    assert count_even_pairs([2, 4, 6], [8, 10, 12]) == 3
    assert count_even_pairs([1, 3, 5], [7, 9, 11]) == 0
    assert count_even_pairs([2, 4, 6], [7, 9, 11]) == 0

def test_count_even_pairs_mixed():
    assert count_even_pairs([2, 3, 4, 5], [1, 2, 6, 8]) == 1
    assert count_even_pairs([2, 4, 3, 6], [4, 2, 5, 8]) == 3
    assert count_even_pairs([1, 2, 2, 2], [2, 1, 4, 2]) == 2

def test_count_even_pairs_different_lengths():
    assert count_even_pairs([2, 4, 6, 8], [8, 10]) == 2
    assert count_even_pairs([2], []) == 0
    assert count_even_pairs([], [2]) == 0

def test_count_even_pairs_large_input():
    list1 = [2] * 10000
    list2 = [4] * 10000
    assert count_even_pairs(list1, list2) == 10000
    
    list2 = [1] * 10000  # Now list2 has no even numbers
    assert count_even_pairs(list1, list2) == 0
  
def test_count_even_pairs_edge_cases():
    assert count_even_pairs([], []) == 0
    assert count_even_pairs([1,2,3,4], [4,3,2,1]) == 1
```
<|Test End|>