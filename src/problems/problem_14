QUESTION

Write a function that takes a list of tuples, where each tuple contains a string and a list of integers. The function should identify the tuple with the list whose sum of elements is the highest. Reverse that list of integers, round up the sum of the elements in the reversed list to the nearest integer, and then multiply this sum by the length of the original string in the tuple. Return the string associated with that tuple and the final calculated value as a tuple.

SOLUTION/TESTS

<|Solution Begin|>
import math

def solution(tuples_list):
    """
    This function takes a list of tuples, where each tuple contains a string and a list of integers.
    It identifies the tuple with the list whose sum of elements is the highest, reverses the list,
    rounds up the sum of the elements in the reversed list to the nearest integer, and then multiplies
    this sum by the length of the original string in the tuple.
    Finally, it returns the string associated with that tuple and the final calculated value as a tuple.
    """
    if not tuples_list:
        return None, 0

    max_tuple = max(tuples_list, key=lambda x: sum(x[1]))
    string, num_list = max_tuple
    reversed_sum = sum(reversed(num_list))
    rounded_sum = math.ceil(reversed_sum)
    final_value = rounded_sum * len(string)
    
    return string, final_value
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_solution_basic():
    input_data = [("alpha", [1, 2, 3]), ("beta", [4, 2, 1]), ("gamma", [0, 0, 7])]
    assert solution(input_data) == ("gamma", 35)

def test_solution_single_tuple():
    input_data = [("single", [3, 2, 1])]
    assert solution(input_data) == ("single", 18)

def test_solution_identical_sums():
    input_data = [("first", [2, 1, 3]), ("second", [3, 3, 0])]
    # Both have a sum of 6, second occurs last so should be chosen by max
    assert solution(input_data) == ("second", 18)

def test_solution_negative_integers():
    input_data = [("negatives", [-1, -3, -5]), ("positives", [1, 2, 3])]
    assert solution(input_data) == ("positives", 18)

def test_solution_empty_list():
    input_data = []
    assert solution(input_data) == (None, 0)

def test_solution_empty_inner_list():
    input_data = [("empty", [])]
    assert solution(input_data) == ("empty", 0)

def test_solution_large_numbers():
    input_data = [("big", [1000, 2000, 3000])]
    assert solution(input_data) == ("big", 18000)

def test_solution_float_rounding():
    input_data = [("test", [2.9, 0.1])]  # sum is 3.0 which rounds to 3, string length is 4
    assert solution(input_data) == ("test", 12)
<|Test End|>