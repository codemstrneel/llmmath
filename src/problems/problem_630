QUESTION

Write a Python function to check whether the given number can be represented as the product of two distinct Fibonacci numbers, where the Fibonacci numbers must have indices greater than 10.

SOL & TESTS

<|Solution Begin|>
```python
def can_be_product_of_two_fibs(n):
    """
    Checks if the given number can be represented as the product of two distinct
    Fibonacci numbers, with indices greater than 10.
    """
    if n <= 0:
        return False
        
    # Generate Fibonacci numbers with indices greater than 10
    fibs = []
    a, b = 89, 144 # Starting from F_11 and F_12 since F_11 = 89
    while a * b <= n:
        fibs.append(a)
        a, b = b, a + b

    # Check if any two distinct Fibonacci numbers from `fibs` can form the product `n`
    length = len(fibs)
    for i in range(length):
        for j in range(i + 1, length):
            if fibs[i] * fibs[j] == n:
                return True
    return False
```
<|Solution End|>
<|Test Begin|>
```python
from solution import can_be_product_of_two_fibs

def test_can_be_product_of_two_fibs_product_of_89_and_144():
    assert can_be_product_of_two_fibs(89 * 144) == True

def test_can_be_product_of_two_fibs_product_of_233_and_377():
    assert can_be_product_of_two_fibs(233 * 377) == True

def test_can_be_product_of_two_fibs_not_a_product():
    assert can_be_product_of_two_fibs(1500) == False

def test_can_be_product_of_two_fibs_small_number():
    assert can_be_product_of_two_fibs(1) == False

def test_can_be_product_of_two_fibs_large_number():
    assert can_be_product_of_two_fibs(10946 * 17711) == True

def test_can_be_product_of_two_fibs_number_equal_to_fib():
    assert can_be_product_of_two_fibs(233) == False  # 233 is a Fib number but not a product of two distinct Fibs

def test_can_be_product_of_two_fibs_negative_number():
    assert can_be_product_of_two_fibs(-233) == False
```
<|Test End|>