QUESTION

**Combined Question:**

Write a Python function that takes in two tuples of integers, `tuple1` and `tuple2`, and a list `indices`. Your function should perform the following:

1. Check if each element in `tuple2` is greater than the corresponding element in `tuple1` by index. Return a boolean result indicating whether this condition holds true for all elements.

2. Extract elements from both tuples based on the indices specified in the `indices` list and combine these elements into a new list, ensuring that only the highest value between the two tuples at each given index is included. Return this list of maximum values.

For example, given `tuple1 = (1, 2, 3, 4)`, `tuple2 = (4, 3, 2, 1)`, and `indices = [0, 2, 3]`, the function should return `(False, [4, 3, 4])`, since `tuple2` is not greater than `tuple1` at all indices, and the maximum elements extracted are from indices 0, 2, and 3 with values 4, 3, and 4 respectively.

SOL & TESTS

<|Solution Begin|> 
```python
def compare_and_extract(tuple1, tuple2, indices):
    """
    Check if each element in tuple2 is greater than the corresponding element in tuple1.
    Extract maximum elements from both tuples based on the given indices.

    Parameters:
    - tuple1: A tuple of integers.
    - tuple2: A tuple of integers.
    - indices: A list of indices.

    Returns:
    - A tuple (boolean, list of max elements).
    """
    # Check if each element in tuple2 is greater than the corresponding element in tuple1
    all_greater = all(a < b for a, b in zip(tuple1, tuple2))
    
    # Extract the maximum element at each index from both tuples
    max_elements = [max(tuple1[i], tuple2[i]) for i in indices]
    
    return all_greater, max_elements
```
<|Solution End|>

<|Test Begin|>
```python
from solution import compare_and_extract

def test_case_all_greater():
    tuple1 = (1, 2, 3)
    tuple2 = (4, 5, 6)
    indices = [0, 1, 2]
    assert compare_and_extract(tuple1, tuple2, indices) == (True, [4, 5, 6])

def test_case_not_all_greater():
    tuple1 = (1, 3, 5)
    tuple2 = (2, 2, 6)
    indices = [0, 1, 2]
    assert compare_and_extract(tuple1, tuple2, indices) == (False, [2, 3, 6])

def test_case_some_indices():
    tuple1 = (1, 2, 3, 4)
    tuple2 = (4, 3, 2, 1)
    indices = [0, 2, 3]
    assert compare_and_extract(tuple1, tuple2, indices) == (False, [4, 3, 4])

def test_case_empty_indices():
    tuple1 = (1, 2, 3)
    tuple2 = (4, 5, 6)
    indices = []
    assert compare_and_extract(tuple1, tuple2, indices) == (True, [])

def test_case_equal_tuples():
    tuple1 = (7, 8, 9)
    tuple2 = (7, 8, 9)
    indices = [0, 1, 2]
    assert compare_and_extract(tuple1, tuple2, indices) == (False, [7, 8, 9])

def test_case_single_element():
    tuple1 = (1,)
    tuple2 = (2,)
    indices = [0]
    assert compare_and_extract(tuple1, tuple2, indices) == (True, [2])
```
<|Test End|>