QUESTION

Write a function to find the area of a trapezium, and ensure that your function can handle inputs where the lengths of the parallel sides and the height are given as algebraic expressions involving simple variables (e.g., '2a + 3' for one of the sides).

SOL & TESTS

To solve the problem of finding the area of a trapezium when given lengths of the parallel sides and the height as algebraic expressions, we can utilize Python's `sympy` library. `sympy` is a Python library for symbolic mathematics, which allows manipulation of algebraic expressions, solving equations, and many other tasks.

The area \( A \) of a trapezium can be calculated using the formula:

\[ A = \frac{1}{2} \times ( \text{base}_1 + \text{base}_2 ) \times \text{height} \]

Given that the bases and height can be algebraic expressions, our function should handle the expressions symbolically using `sympy`.

Let's define the solution and test it:

<|Solution Begin|>
```python
from sympy import symbols, simplify

def trapezium_area(base1_expr, base2_expr, height_expr):
    """
    Computes the area of a trapezium given the expressions for the parallel sides and the height.
    
    Parameters:
    - base1_expr: A string representing the expression for the first parallel side.
    - base2_expr: A string representing the expression for the second parallel side.
    - height_expr: A string representing the expression for the height.
    
    Returns:
    - A sympy expression for the area of the trapezium.
    """
    # Define variables
    a, b, h = symbols('a b h')
    
    # Parse the expressions
    base1 = simplify(base1_expr)
    base2 = simplify(base2_expr)
    height = simplify(height_expr)
    
    # Calculate the area symbolically
    area_expr = (1/2) * (base1 + base2) * height
    
    return area_expr
```
<|Solution End|>

<|Test Begin|>
```python
from sympy import Eq, simplify
from solution import trapezium_area

def test_trapezium_area_numerical():
    area_expr = trapezium_area('3', '5', '4')
    assert simplify(area_expr) == 16

def test_trapezium_area_with_variables():
    area_expr = trapezium_area('2*a', 'a + 3', 'h')
    expected_expr = simplify((1/2) * ((2*a) + (a + 3)) * h)
    assert simplify(area_expr) == expected_expr

def test_trapezium_area_complex_expressions():
    area_expr = trapezium_area('2*a + b', '3*b', '2')
    expected_expr = simplify((1/2) * ((2*a + b) + (3*b)) * 2)
    assert simplify(area_expr) == expected_expr

def test_trapezium_area_zero_height():
    area_expr = trapezium_area('2*a', '3*b', '0')
    assert simplify(area_expr) == 0

def test_trapezium_area_zero_bases():
    area_expr = trapezium_area('0', '0', 'h')
    assert simplify(area_expr) == 0
```
<|Test End|>

In these tests, we cover several cases, including numerical inputs, expressions involving variables, complex expressions, and cases where bases or height are zero. This comprehensive testing strategy ensures that our trapezium area function works as expected in a variety of scenarios.