QUESTION

Write a function to separate and print the numbers and their position of a given string, and ensure that the function can handle strings with a maximum length of 10,000 characters.

SOL & TESTS

<|Solution Begin|>
```python
def extract_numbers_with_positions(s):
    """
    Extracts numbers and their positions from the given string.

    Args:
        s (str): The input string.

    Returns:
        List of tuples, where each tuple contains a number and its position.
    """
    numbers_with_positions = []
    num = ''
    for i, char in enumerate(s):
        if char.isdigit():
            if not num:
                start_index = i
            num += char
        elif num:
            numbers_with_positions.append((int(num), start_index))
            num = ''
    if num:  # To collect any remaining number at the end of the string
        numbers_with_positions.append((int(num), start_index))

    return numbers_with_positions
```
<|Solution End|>
<|Test Begin|>
```python
from solution import extract_numbers_with_positions

def test_extract_single_number():
    assert extract_numbers_with_positions("123abc") == [(123, 0)]

def test_extract_multiple_numbers():
    assert extract_numbers_with_positions("abc12def34") == [(12, 3), (34, 9)]

def test_extract_adjacent_numbers():
    assert extract_numbers_with_positions("55abc6789xyz") == [(55, 0), (6789, 5)]

def test_extract_no_numbers():
    assert extract_numbers_with_positions("abcdefgh") == []

def test_extract_numbers_with_spaces():
    assert extract_numbers_with_positions(" 12 34 ") == [(12, 1), (34, 4)]

def test_extract_numbers_in_long_string():
    long_string = "a" * 9995 + "12345"
    assert extract_numbers_with_positions(long_string) == [(12345, 9995)]

def test_extract_numbers_with_mixed_content():
    assert extract_numbers_with_positions("abc99xyz001at55bc") == [(99, 3), (1, 9), (55, 14)]
```
<|Test End|>