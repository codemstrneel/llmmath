QUESTION

Write a function that takes a list of lists of numbers and first reverses each individual list. After reversing, it recalculates the sum of elements in each of these reversed lists and rounds up each sum to the nearest tenth. The function should return a new list containing these rounded sums.

SOLUTION/TESTS

<|Solution Begin|>
from math import ceil

def solution(lists):
    """
    Takes a list of lists of numbers, reverses each individual list,
    calculates the sum of the reversed lists, rounds up to the nearest tenth,
    and returns a list of these rounded sums.
    """
    result = []
    for lst in lists:
        # Reverse the list
        reversed_lst = lst[::-1]
        # Calculate the sum of the reversed list
        lst_sum = sum(reversed_lst)
        # Round up to the nearest tenth
        rounded_sum = ceil(lst_sum * 10) / 10.0
        # Append the result to the list
        result.append(rounded_sum)
    return result
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_reverses_and_sums():
    assert solution([[1, 2, 3], [4, 5, 6]]) == [6.0, 15.0]

def test_empty_inner_lists():
    assert solution([[], []]) == [0.0, 0.0]

def test_negative_numbers():
    assert solution([[-1, -2, -3], [-4, -5, -6]]) == [-6.0, -15.0]

def test_mixed_numbers():
    assert solution([[1.5, 2.3], [3.1, -1.2]]) == [3.8, 1.9]

def test_single_element_lists():
    assert solution([[5], [3.3]]) == [5.0, 3.3]

def test_decimal_rounding():
    assert solution([[2.05, 3.75], [1.44, 0.56]]) == [5.8, 2.0]
<|Test End|>