QUESTION

Create a Python function that calculates the maximum number of segments of a specified length that can be formed from a total length \( n \), and then counts how many of these segment lengths fall within a given numerical range. The function should return a tuple containing the maximum number of segments and the count of segments within the specified range.

SOL & TESTS

```python
def calculate_segments(n, segment_length, range_min, range_max):
    """
    Calculate the maximum number of segments of a given length from a total length `n`,
    and count how many of these segments fall within a specified numerical range.

    Parameters:
    n (int): Total length.
    segment_length (int): Length of each segment.
    range_min (int): Minimum segment value for counting within range.
    range_max (int): Maximum segment value for counting within range.

    Returns:
    tuple: A tuple containing the maximum number of segments and the count of segments
           within the specified range.
    """
    if segment_length <= 0:
        raise ValueError("Segment length must be positive.")

    max_segments = n // segment_length
    segment_in_range_count = 0
    
    for i in range(1, max_segments + 1):
        segment_value = i * segment_length
        if range_min <= segment_value <= range_max:
            segment_in_range_count += 1

    return max_segments, segment_in_range_count
```
<|Solution End|>
<|Test Begin|>
```python
from solution import calculate_segments

def test_calculate_segments_exact_fit():
    assert calculate_segments(10, 2, 2, 8) == (5, 4)

def test_calculate_segments_no_fit():
    assert calculate_segments(5, 10, 0, 100) == (0, 0)

def test_calculate_segments_partial_fit():
    assert calculate_segments(20, 5, 5, 15) == (4, 3)

def test_calculate_segments_range_out_of_bounds():
    assert calculate_segments(15, 3, 20, 30) == (5, 0)

def test_calculate_segments_range_exact_count():
    assert calculate_segments(100, 10, 10, 100) == (10, 10)

def test_calculate_segments_invalid_segment_length():
    try:
        calculate_segments(10, 0, 2, 5)
    except ValueError as ve:
        assert str(ve) == "Segment length must be positive."

def test_calculate_segments_edge_case():
    assert calculate_segments(0, 1, 0, 0) == (0, 0)
```
<|Test End|>