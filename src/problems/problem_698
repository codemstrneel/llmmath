QUESTION

**Novel Question:**

Create a Python function that processes a nested data structure containing strings, integers, and tuples. The function should perform the following tasks:

1. Remove any characters that are not letters or numbers from each string found within the nested data structure.
2. For the integers extracted from the nested configuration, check if they are prime numbers.
3. Calculate the difference in integers from two adjacent tuples at each depth of nesting. Ensure that each tuple contains only integers.

The function should return a dictionary with the following information:
- "clean_strings": A list of processed strings where all non-alphanumeric characters have been removed.
- "prime_integers": A list of integers from the nested structure that are recognized as prime numbers.
- "tuple_differences": A dictionary where keys are tuple indices and values are lists of the differences computed from adjacent tuples at the same level.

Handle special cases such as:
- The nested structure could have varying depths and types.
- Strings that become empty after non-alphanumeric characters are removed.
- The absence of tuples or integers at some levels of nesting.

```python
def analyze_nested_data(nested_data):
    # Your implementation here

# Example usage
nested_data_example = [
    "a@bc!d", "123", (3, 5, 8), ["ef&g", "hi!jk", 19, (2, 5), (8, 13)],
    [(11, 17), "Lmno#12", 23]
]

result = analyze_nested_data(nested_data_example)
print(result)
# Example output:
# {
#   "clean_strings": ["abcd", "123", "efg", "hijk", "Lmno12"],
#   "prime_integers": [19, 23],
#   "tuple_differences": {0: [-18, -12, -5], 1: [-3, -8]}
# }
```

This problem combines elements of string cleaning using regex-like processes, identification of prime numbers similar to number theory, and operations on tuples from lists, integrating concepts of removing non-alphanumeric characters, number analysis, and nested structure manipulation.

SOL & TESTS

Sure, let's go through the solution step by step.

To solve the problem, we need to implement a function `analyze_nested_data` that processes a nested data structure as described. Here are the steps we'll take:

1. **Remove non-alphanumeric characters** from all strings within the nested data.
2. Identify **prime numbers** in the nested data.
3. Compute differences between integers in adjacent tuples at the same level within the nested data.

Here is the solution with the corresponding unit tests:

<|Solution Begin|>
```python
import re

def is_prime(num):
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

def clean_string(s):
    return re.sub(r'[^a-zA-Z0-9]', '', s)

def analyze_nested_data(nested_data):
    clean_strings = []
    prime_integers = []
    tuple_differences = {}

    def process(data, level=0):
        if isinstance(data, str):
            cleaned = clean_string(data)
            if cleaned:
                clean_strings.append(cleaned)
        elif isinstance(data, int):
            if is_prime(data):
                prime_integers.append(data)
        elif isinstance(data, tuple):
            if level not in tuple_differences:
                tuple_differences[level] = []
            for i in range(len(data) - 1):
                difference = data[i+1] - data[i]
                tuple_differences[level].append(difference)
        elif isinstance(data, list):
            for item in data:
                process(item, level + 1)

    process(nested_data)
    
    return {
        "clean_strings": clean_strings,
        "prime_integers": prime_integers,
        "tuple_differences": tuple_differences
    }

# Example usage
nested_data_example = [
    "a@bc!d", "123", (3, 5, 8), ["ef&g", "hi!jk", 19, (2, 5), (8, 13)],
    [(11, 17), "Lmno#12", 23]
]

result = analyze_nested_data(nested_data_example)
print(result)
```
<|Solution End|>

<|Test Begin|>
```python
from solution import analyze_nested_data

def test_analyze_nested_data():
    nested_data = [
        "a@bc!d", "123", (3, 5, 8), ["ef&g", "hi!jk", 19, (2, 5), (8, 13)],
        [(11, 17), "Lmno#12", 23]
    ]
    result = analyze_nested_data(nested_data)
    assert result["clean_strings"] == ["abcd", "123", "efg", "hijk", "Lmno12"]
    assert sorted(result["prime_integers"]) == [19, 23]
    assert result["tuple_differences"] == {2: [2, 3], 3: [3, 5], 4: [6]}

def test_empty_input():
    result = analyze_nested_data([])
    assert result["clean_strings"] == []
    assert result["prime_integers"] == []
    assert result["tuple_differences"] == {}

def test_no_strings_tuples_or_integers():
    nested_data = [(), "", [None, []]]
    result = analyze_nested_data(nested_data)
    assert result["clean_strings"] == []
    assert result["prime_integers"] == []
    assert result["tuple_differences"] == {}

def test_strings_only():
    nested_data = ["abc!!@#", "123!!!", "!@#$%^"]
    result = analyze_nested_data(nested_data)
    assert result["clean_strings"] == ["abc", "123", ""]
    assert result["prime_integers"] == []
    assert result["tuple_differences"] == {}

def test_integers_only():
    nested_data = [2, 3, 4]
    result = analyze_nested_data(nested_data)
    assert result["clean_strings"] == []
    assert sorted(result["prime_integers"]) == [2, 3]
    assert result["tuple_differences"] == {}
```
<|Test End|>

In the solution, we have:
- A function `is_prime` to check if a number is prime.
- A function `clean_string` to remove non-alphanumeric characters from strings.
- The main function `analyze_nested_data` that traverses a nested data structure, applies the cleaning and checking functions, and computes the necessary differences in tuples, resulting in the desired output dictionary.

The tests ensure that various input scenarios, such as nested structures, absence of specific types, and edge cases, are handled correctly.