QUESTION

Write a Python function that takes a string representing a quadratic equation and returns a modified version of the string where whitespace is replaced by underscores. Additionally, the function should return a boolean indicating whether the quadratic has real solutions.

SOLUTION/TESTS

<|Solution Begin|>
import re
from math import sqrt

def solution(equation):
    """
    Replace whitespace in the quadratic equation with underscores and check if the equation has real solutions.
    
    Args:
    equation: str - Quadratic equation of the form "ax^2 + bx + c = 0".
    
    Returns:
    tuple: (str, bool) - Modified equation with underscores and a boolean indicating if real solutions exist.
    """
    # Replace whitespace with underscores
    modified_equation = equation.replace(" ", "_")
    
    # Extract coefficients a, b, c from the equation
    pattern = r"([-+]?\d*)x\^2\s*([-+]?\d+)x\s*([-+]?\d+)"
    match = re.search(pattern, equation)

    if not match:
        raise ValueError("Equation does not match the required quadratic form ax^2 + bx + c.")

    a, b, c = match.groups()
    
    # Handling empty strings for coefficients
    def convert_coeff(coeff):
        if coeff in ["", "+"]:  # If empty or just '+', it represents 1
            return 1
        elif coeff == "-":      # If '-', it represents -1
            return -1
        else:
            return int(coeff)

    a = convert_coeff(a)
    b = int(b)
    c = int(c)
    
    # Calculate discriminant
    discriminant = b**2 - 4*a*c
    
    # Determine if the quadratic equation has real solutions
    has_real_solutions = discriminant >= 0
    
    return modified_equation, has_real_solutions

<|Solution End|>
<|Test Begin|>
def test_solution_real_solutions():
    equation = "3x^2 + 8x + 1 = 0"
    modified_equation, has_real_solutions = solution(equation)
    assert modified_equation == "3x^2_+_8x_+_1_=_0"
    assert has_real_solutions == True

def test_solution_no_real_solutions():
    equation = "2x^2 + 4x + 5 = 0"
    modified_equation, has_real_solutions = solution(equation)
    assert modified_equation == "2x^2_+_4x_+_5_=_0"
    assert has_real_solutions == False

def test_solution_zero_discriminant():
    equation = "x^2 + 2x + 1 = 0"
    modified_equation, has_real_solutions = solution(equation)
    assert modified_equation == "x^2_+_2x_+_1_=_0"
    assert has_real_solutions == True

def test_solution_negative_coefficients():
    equation = "-x^2 - 3x - 2 = 0"
    modified_equation, has_real_solutions = solution(equation)
    assert modified_equation == "-x^2_-_3x_-_2_=_0"
    assert has_real_solutions == True

def test_solution_single_term_coefficients():
    equation = "-3x^2 + 5x + 0 = 0"
    modified_equation, has_real_solutions = solution(equation)
    assert modified_equation == "-3x^2_+_5x_+_0_=_0"
    assert has_real_solutions == True

def test_solution_malformed_equation():
    try:
        solution("x^2 + bx + 5 = 0")
    except ValueError as e:
        assert str(e) == "Equation does not match the required quadratic form ax^2 + bx + c."

def test_solution_no_whitespace():
    equation = "x^2+2x+1=0"
    modified_equation, has_real_solutions = solution(equation)
    assert modified_equation == "x^2+2x+1=0"
    assert has_real_solutions == True

<|Test End|>