QUESTION

Write a function to remove the nested record from the given tuple, and ensure that the function can handle tuples with multiple nesting levels and varying data types, removing all instances of the specified nested record.

SOL & TESTS

```python
<|Solution Begin|> 
def remove_nested_record(t: tuple, record_to_remove) -> tuple:
    """
    Removes all instances of a specified nested record from a tuple, recursively handling nested tuples.
    
    Args:
    - t (tuple): The tuple from which to remove the specified record.
    - record_to_remove: The record to be removed from the tuple.
    
    Returns:
    - tuple: A new tuple with the specified record removed from all levels of nesting.
    """
    result = []
    for item in t:
        if isinstance(item, tuple):
            # Recursively call for nested tuples
            nested_result = remove_nested_record(item, record_to_remove)
            if nested_result:
                result.append(nested_result)
        elif item != record_to_remove:
            result.append(item)
    return tuple(result)

```
<|Solution End|>
<|Test Begin|>
```python
def test_remove_nested_record_flat():
    assert remove_nested_record((1, 2, 3, 4), 3) == (1, 2, 4)
    assert remove_nested_record((1, 2, 2, 3), 2) == (1, 3)
    assert remove_nested_record((), 1) == ()

def test_remove_nested_record_nested():
    assert remove_nested_record((1, (2, 3), 4), 2) == (1, (3,), 4)
    assert remove_nested_record((1, (2, 3), (4, 5)), 4) == (1, (2, 3), (5,))
    assert remove_nested_record((1, (2, (3, 4)), 5), 3) == (1, (2, (4,)), 5)

def test_remove_nested_record_multiple_occurrences():
    assert remove_nested_record((1, (2, 3), 3, (4, 3)), 3) == (1, (2,), (4,))
    assert remove_nested_record(((1, 2), 2, (3, (2,))), 2) == ((1,), (3,))

def test_remove_nested_record_no_removal():
    assert remove_nested_record((1, (2, 3), 4), 5) == (1, (2, 3), 4)
    assert remove_nested_record((1, (2, (3,)), 4), 6) == (1, (2, (3,)), 4)

def test_remove_nested_record_edge_cases():
    assert remove_nested_record(((), ((),)), ()) == ()
    assert remove_nested_record(((((),),),), ((),)) == ()
    assert remove_nested_record((1, 2, (3, (4,))), (4,)) == (1, 2, (3,))
```
<|Test End|>