QUESTION

Write a function that, given a list of integers representing a specific column index in a list of lists, computes the sum of all unique digits present in the elements of that column.

SOLUTION/TESTS

<|Solution Begin|>
def solution(data, column_index):
    """
    Given a list of lists (data) and a specific column index,
    computes the sum of all unique digits present in the elements of that column.
    """
    unique_digits = set()
    
    # Iterate over each row in the data list
    for row in data:
        if column_index < len(row):
            # Extract the column value
            column_value = str(row[column_index])
            # Add each character in the column to the unique digits set if it's a digit
            unique_digits.update(ch for ch in column_value if ch.isdigit())
    
    # Convert the unique digit strings to integers and return their sum
    return sum(int(digit) for digit in unique_digits)

<|Solution End|>
<|Test Begin|>
def test_solution():
    # Test case 1: Simple case with unique digits
    data1 = [[123, 456, 789], [987, 654, 321]]
    column_index1 = 0
    assert solution(data1, column_index1) == sum(range(10))  # 0 to 9 (all unique digits)

    # Test case 2: Column with repeated digits
    data2 = [[111, 222, 333], [444, 555, 666]]
    column_index2 = 0
    assert solution(data2, column_index2) == 1  # only unique digit 1

    # Test case 3: Column with mixed digits
    data3 = [[123, 456, 789], [111, 222, 333]]
    column_index3 = 1
    assert solution(data3, column_index3) == 15  # digits: 4,5,6,2

    # Test case 4: Single element in the column
    data4 = [[5], [15], [25]]
    column_index4 = 0
    assert solution(data4, column_index4) == 5+1+2  # digits: 5,1,2

    # Test case 5: Column with varying digit lengths
    data5 = [[12345], [67890], [12345]]
    column_index5 = 0
    assert solution(data5, column_index5) == 45  # digits: 0 to 9

    # Test case 6: Empty data
    data6 = []
    column_index6 = 0
    assert solution(data6, column_index6) == 0

    # Test case 7: Column index out of bounds
    data7 = [[1, 2], [3, 4], [5, 6]]
    column_index7 = 3
    assert solution(data7, column_index7) == 0

<|Test End|>