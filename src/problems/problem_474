QUESTION

Write a Python function to find and count pairs of elements in the given array whose sum is equal to a specified target value.

SOL & TESTS

<|Solution Begin|>```python
def count_pairs_with_sum(arr, target):
    """
    Finds and counts pairs of elements in the given array whose sum is equal to the target value.

    :param arr: List of integers
    :param target: Target integer sum
    :return: Number of pairs whose sum is equal to the target
    """
    count = 0
    seen = {}
    
    for number in arr:
        complement = target - number
        if complement in seen:
            count += seen[complement]
        
        if number in seen:
            seen[number] += 1
        else:
            seen[number] = 1
    
    return count
```
<|Solution End|>
<|Test Begin|>
```python
import pytest
from solution import count_pairs_with_sum

def test_no_pairs():
    assert count_pairs_with_sum([], 5) == 0
    assert count_pairs_with_sum([1, 2, 3], 10) == 0

def test_single_pair():
    assert count_pairs_with_sum([1, 9], 10) == 1
    assert count_pairs_with_sum([5, 5], 10) == 1

def test_multiple_pairs():
    assert count_pairs_with_sum([1, 5, 7, -1, 5], 6) == 3  # pairs are (1, 5), (7, -1), (1, 5)
    assert count_pairs_with_sum([2, 2, 2, 2], 4) == 6  # combinations: (0,1), (0,2), (0,3), (1,2), (1,3), (2,3)
    
def test_all_elements_zero():
    assert count_pairs_with_sum([0, 0, 0, 0], 0) == 6  # similar combination as above

def test_negative_numbers():
    assert count_pairs_with_sum([-1, -2, -3, 7, 5], 2) == 1  # pair (-3, 5)
    assert count_pairs_with_sum([-1, -2, -3, -4, -5], -8) == 1  # pair (-3, -5)

@pytest.mark.parametrize("arr, target, expected", [
    ([1, 2, 3, 4, 5], 5, 2),  # pairs (1, 4), (2, 3)
    ([1, 1, 1, 1], 2, 6),  # combinations: (0,1), (0,2), (0,3), (1,2), (1,3), (2,3)
    ([], 0, 0),  # empty list case
    ([1], 2, 0)  # single element, no pairs
])
def test_various_cases(arr, target, expected):
    assert count_pairs_with_sum(arr, target) == expected
```
<|Test End|>