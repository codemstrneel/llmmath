QUESTION

Construct a function that identifies sequences of one digit followed by letter characters.

SOL & TESTS

```python
import re

def find_digit_letter_sequences(input_string):
    """
    Identifies and returns all sequences in the input_string where a 
    digit is followed by one or more letter characters.
    
    Parameters:
    input_string (str): The string to search for sequences.
    
    Returns:
    list of str: A list containing the matched sequences.
    """
    pattern = r'\d[a-zA-Z]+'
    return re.findall(pattern, input_string)
```
<|Solution End|>
<|Test Begin|>
```python
from solution import find_digit_letter_sequences

def test_single_digit_followed_by_letters():
    assert find_digit_letter_sequences("1a") == ["1a"]

def test_multiple_sequences():
    assert find_digit_letter_sequences("1a 2b3c 4def") == ["1a", "2b", "3c", "4def"]

def test_no_match():
    assert find_digit_letter_sequences("1 23 abc") == []

def test_mix_of_digits_and_letters_no_successive():
    assert find_digit_letter_sequences("a1b2c3") == []

def test_edge_case_empty_string():
    assert find_digit_letter_sequences("") == []

def test_complex_strings():
    assert find_digit_letter_sequences("z5x7ay4c7") == ["5x", "7ay", "4c", "7"]

def test_multiple_digit_before_letters():
    assert find_digit_letter_sequences("12abc 3def") == ["2abc", "3def"]

def test_sequences_with_special_characters():
    assert find_digit_letter_sequences("1!a @2b# 3$c") == ["1a", "2b", "3c"]
```
<|Test End|>