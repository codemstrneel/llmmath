QUESTION

New Question: Write a function to calculate the number of matching key-value pairs between two dictionaries using the filter function.

SOL & TESTS

```python
<|Solution Begin|>
def count_matching_pairs(dict1, dict2):
    """
    Returns the number of matching key-value pairs between two dictionaries.
    """
    return len(list(filter(lambda k: k in dict2 and dict2[k] == dict1[k], dict1.keys())))
<|Solution End|>
```

```python
<|Test Begin|>
from solution import count_matching_pairs

def test_matching_pairs_same_dicts():
    dict1 = {'a': 1, 'b': 2, 'c': 3}
    dict2 = {'a': 1, 'b': 2, 'c': 3}
    assert count_matching_pairs(dict1, dict2) == 3

def test_matching_pairs_some_matching():
    dict1 = {'a': 1, 'b': 2, 'c': 4}
    dict2 = {'a': 1, 'b': 3, 'c': 4}
    assert count_matching_pairs(dict1, dict2) == 2

def test_matching_pairs_no_matching():
    dict1 = {'a': 1, 'b': 2, 'c': 3}
    dict2 = {'x': 1, 'y': 2, 'z': 3}
    assert count_matching_pairs(dict1, dict2) == 0

def test_matching_pairs_empty_dicts():
    dict1 = {}
    dict2 = {}
    assert count_matching_pairs(dict1, dict2) == 0

def test_matching_pairs_one_empty_dict():
    dict1 = {'a': 1, 'b': 2}
    dict2 = {}
    assert count_matching_pairs(dict1, dict2) == 0

def test_matching_pairs_different_types():
    dict1 = {'a': 1, 'b': '2', 'c': 3.0}
    dict2 = {'a': 1, 'b': 2, 'c': '3.0'}
    assert count_matching_pairs(dict1, dict2) == 1
<|Test End|>
```