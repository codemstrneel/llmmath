QUESTION

Write a function that takes two lists of numbers and a single string. The function should return a new list of tuples. Each tuple should contain:

1. The index of the element.
2. The sum of the elements at that index from the two lists.
3. The string concatenated with "Divisible" or "Not Divisible" depending on whether the sum from point 2 is divisible by the length of the string.

If the lists differ in length, only process up to the length of the shorter list.

SOLUTION/TESTS

Sure, let's implement the solution and the corresponding unit tests.

<|Solution Begin|>
def solution(list1, list2, s):
    """
    Returns a list of tuples. Each tuple contains:
    1. The index of the element.
    2. The sum of the elements at that index from the two lists.
    3. The string concatenated with "Divisible" or "Not Divisible" depending on
       whether the sum is divisible by the length of the string.
    """
    result = []
    length_s = len(s)

    for index in range(min(len(list1), len(list2))):
        sum_value = list1[index] + list2[index]
        if sum_value % length_s == 0:
            result.append((index, sum_value, s + "Divisible"))
        else:
            result.append((index, sum_value, s + "Not Divisible"))

    return result
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_example_case():
    assert solution([1, 2, 3], [4, 5, 6], "abc") == [
        (0, 5, "abcNot Divisible"),
        (1, 7, "abcNot Divisible"),
        (2, 9, "abcNot Divisible")
    ]

def test_different_length_lists():
    assert solution([1, 9], [5, 3, 11], "four") == [
        (0, 6, "fourDivisible"),
        (1, 12, "fourDivisible")
    ]

def test_string_length_divisibility():
    assert solution([3, 6, 9], [1, 2, 3], "xyz") == [
        (0, 4, "xyzNot Divisible"),
        (1, 8, "xyzNot Divisible"),
        (2, 12, "xyzDivisible")
    ]

def test_empty_lists():
    assert solution([], [], "empty") == []

def test_single_element_lists():
    assert solution([7], [3], "onetwo") == [
        (0, 10, "onetwoNot Divisible")
    ]

def test_negative_numbers():
    assert solution([-1, -3], [-4, -5], "test") == [
        (0, -5, "testDivisible"),
        (1, -8, "testNot Divisible")
    ]

def test_zero_length_string():
    assert solution([1, 2], [3, 4], "") == [
        (0, 4, "Divisible"),
        (1, 6, "Divisible")
    ]
<|Test End|>

These tests cover several cases including normal scenarios, empty lists, different length lists, and divisors based on string length.