QUESTION

Write a function that takes in a list of strings and a list of integers of equal length. The function should perform the following steps:

1. For each even index in the list of strings, interpret the string as a Roman numeral and determine if it represents an even integer. If any even-indexed string fails this condition, remove all non-alphanumeric characters from it using regex.

2. For each even index in the list of integers, check if the integer is both positive and even. If it is, replace it with its corresponding Roman numeral interpretation from the string list. If the integer does not meet these conditions, add the integer itself to a running total.

The function should return a tuple containing a modified list of strings (with non-alphanumeric characters removed for invalid Roman numerals) and the resulting integer sum from the modified integer list.

SOLUTION/TESTS

<|Solution Begin|>
import re

def solution(strings, integers):
    def is_valid_roman(s):
        """Check if a given string is a valid Roman numeral and even."""
        roman_to_int_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        sum_val = 0
        prev_value = 0
        for char in reversed(s):
            if char not in roman_to_int_map:
                return False
            value = roman_to_int_map[char]
            if value < prev_value:
                sum_val -= value
            else:
                sum_val += value
            prev_value = value
        return sum_val % 2 == 0 and sum_val > 0

    for i in range(0, len(strings), 2):
        if not is_valid_roman(strings[i]):
            strings[i] = re.sub(r'[^a-zA-Z0-9]', '', strings[i])

    total_sum = 0
    for i in range(0, len(integers), 2):
        if integers[i] > 0 and integers[i] % 2 == 0:
            integers[i] = strings[i]
        else:
            total_sum += integers[i]

    return (strings, total_sum)
<|Solution End|>

<|Test Begin|>
def test_solution():
    strings = ["II", "abc", "VI", "def"]
    integers = [4, 15, 12, -3]
    expected = (["II", "abc", "VI", "def"], 4)
    assert solution(strings, integers) == expected

    strings = ["", "example", "IX", "more"]
    integers = [0, 11, 22, 9]
    expected = (["", "example", "IX", "more"], 0)
    assert solution(strings, integers) == expected

    strings = ["IV", "dummy!@#", "IX", "data"]
    integers = [2, 0, 3, 5]
    expected = (["IV", "dummy", "IX", "data"], 5)
    assert solution(strings, integers) == expected

    strings = ["IV", "roman numerals", "XII", "check"]
    integers = [2, 3, 5, 7]
    expected = (["IV", "roman numerals", "XII", "check"], 5 + 2)
    assert solution(strings, integers) == expected

    strings = ["", "test", "XV!", "sample"]
    integers = [4, 0, 0, -1]
    expected = (["", "test", "XV", "sample"], 0)
    assert solution(strings, integers) == expected

def test_edge_cases():
    strings = ["IIII", "broken", "VV", "@@wrong"]
    integers = [1, 999, 2, 777]
    expected = (["IIII", "broken", "VV", "wrong"], 3)
    assert solution(strings, integers) == expected

    strings = []
    integers = []
    expected = ([], 0)
    assert solution(strings, integers) == expected

    strings = ["MCMXCIV", "grand"]
    integers = [1994, 5]
    expected = (["MCMXCIV", "grand"], 5)
    assert solution(strings, integers) == expected
    
<|Test End|>