QUESTION

Create a Python function that takes a list of strings and performs the following tasks:

1. Remove duplicate words from the list of strings, preserving the order of their first occurrences.
2. Count and return the number of words that were removed as duplicates.

The function should return a tuple containing the processed list of strings without duplicates and the count of removed words.

SOL & TESTS

<|Solution Begin|>```python
def process_words(word_list):
    """
    Removes duplicate words from the word_list while preserving the order
    of their first occurrence and counts the removed duplicates.

    Args:
    word_list (list of str): The list of words to be processed.

    Returns:
    tuple: A tuple containing the list of words without duplicates and
           the count of removed duplicate words.
    """
    seen = set()
    unique_words = []
    
    # Iterate over word_list and collect unique words
    for word in word_list:
        if word not in seen:
            unique_words.append(word)
            seen.add(word)
    
    # Count removed duplicates
    removed_count = len(word_list) - len(unique_words)
    
    return unique_words, removed_count
```
<|Solution End|>

<|Test Begin|>```python
from solution import process_words

def test_no_duplicates():
    assert process_words(["apple", "banana", "cherry"]) == (["apple", "banana", "cherry"], 0)

def test_all_duplicates():
    assert process_words(["apple", "apple", "apple"]) == (["apple"], 2)

def test_some_duplicates():
    assert process_words(["apple", "banana", "apple", "cherry", "banana"]) == (["apple", "banana", "cherry"], 2)

def test_empty_list():
    assert process_words([]) == ([], 0)

def test_duplicates_at_end():
    assert process_words(["apple", "banana", "cherry", "cherry", "banana", "apple"]) == (["apple", "banana", "cherry"], 3)
```
<|Test End|>