QUESTION

**New Question:**

Write a Python function that takes in a list of tuples and a list of integers. Your task is to perform the following operations:

1. Remove all empty tuples and tuples where the first element is `None` from the list of tuples.

2. For the list of integers, move all occurrences of zero to the end of the list while maintaining the relative order of the non-zero elements. This should be done in-place without using additional lists or arrays.

3. Once the integers are arranged, raise each non-zero integer in the list to the power of its position in the list using a lambda function.

Return a tuple containing the processed list of tuples and the modified list of integers.

For example, given `tuples_list = [(None, 1), (1, 2), (), (3, 4)]` and `integers_list = [0, 3, 2, 0, 4]`, the function should return `([(1, 2), (3, 4)], [9, 4, 0, 0])`.

SOL & TESTS

```python
<|Solution Begin|>
def process_lists(tuples_list, integers_list):
    """
    Processes the list of tuples and the list of integers as per the specifications.

    Parameters:
    tuples_list (list of tuples): List of tuples to be filtered.
    integers_list (list of int): List of integers to be rearranged and modified.

    Returns:
    tuple: A tuple containing the processed list of tuples and modified list of integers.
    """
    
    # Filter the tuples list: remove empty tuples and tuples where the first element is None
    filtered_tuples = [tpl for tpl in tuples_list if tpl and tpl[0] is not None]
    
    # Rearrange the integers list, moving zeros to the end
    non_zero_index = 0
    for i in range(len(integers_list)):
        if integers_list[i] != 0:
            integers_list[non_zero_index] = integers_list[i]
            non_zero_index += 1
    
    # Fill the remaining part of the list with zeros
    for i in range(non_zero_index, len(integers_list)):
        integers_list[i] = 0

    # Apply the lambda function to raise each non-zero number to the power of its position
    integers_list = [x if x == 0 else (lambda base, exp: base ** exp)(x, i) for i, x in enumerate(integers_list)]
    
    return filtered_tuples, integers_list
```
<|Solution End|>

```python
<|Test Begin|>
from solution import process_lists

def test_process_lists_basic():
    res = process_lists([(None, 1), (1, 2), (), (3, 4)], [0, 3, 2, 0, 4])
    assert res == ([(1, 2), (3, 4)], [9, 4, 0, 0])

def test_process_lists_no_zeros():
    res = process_lists([(1, 2), (2, 3)], [1, 2, 3])
    assert res == ([(1, 2), (2, 3)], [1, 2, 9])

def test_process_lists_all_zeros():
    res = process_lists([(1, 2), (None, 4)], [0, 0, 0])
    assert res == ([(1, 2)], [0, 0, 0])

def test_process_lists_mixed():
    res = process_lists([(5, 6), (), (None, 4)], [4, 0, 5, 0])
    assert res == ([(5, 6)], [4, 25, 0, 0])

def test_process_lists_all_empty_tuples():
    res = process_lists([(), (None,), (), (None, 4)], [0, 1, 2, 3])
    assert res == ([], [0, 1, 4, 27])
```
<|Test End|>