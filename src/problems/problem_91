QUESTION

Create a Python function that takes two inputs: a string and a 2D list (list of lists), where each nested list contains integers. The function should first identify words in the string that start with capital letters and then count these words. Depending on whether the count is odd or even, perform one of the following actions:

- If the count is even, calculate the nth Fibonacci number (where n is the count of capitalized words) and return a new list with the nth Fibonacci number added to each element of the 2D list's last column.
- If the count is odd, determine the odd factors of n (n being the count of capitalized words) and replace the last column of the 2D list with these factors, ensuring the factors are sorted using heap sort.

The function should then return the modified 2D list.

SOLUTION/TESTS

```python
<|Solution Begin|>
def solution(input_str, matrix):
    def fibonacci(n):
        """Calculate the n-th Fibonacci number"""
        a, b = 0, 1
        for _ in range(n):
            a, b = b, a + b
        return a

    def odd_factors(n):
        """Calculate the odd factors of n"""
        factors = []
        for i in range(1, n + 1, 2):
            if n % i == 0:
                factors.append(i)
        return heap_sort(factors)

    def heap_sort(nums):
        """Perform heap sort on a list"""
        def heapify(arr, n, i):
            largest = i
            left = 2 * i + 1
            right = 2 * i + 2

            if left < n and arr[largest] < arr[left]:
                largest = left

            if right < n and arr[largest] < arr[right]:
                largest = right

            if largest != i:
                arr[i], arr[largest] = arr[largest], arr[i]
                heapify(arr, n, largest)

        n = len(nums)
        for i in range(n // 2 - 1, -1, -1):
            heapify(nums, n, i)
        
        for i in range(n - 1, 0, -1):
            nums[i], nums[0] = nums[0], nums[i]
            heapify(nums, i, 0)

        return nums

    # Find words that start with capital letters
    words = input_str.split()
    capitalized_words_count = sum(1 for word in words if word[0].isupper())

    if capitalized_words_count % 2 == 0:
        # Even case: calculate Fibonacci number
        fib_number = fibonacci(capitalized_words_count)
        if matrix and matrix[0]:  # Check if matrix and matrix[0] are non-empty
            for row in matrix:
                row[-1] += fib_number
    else:
        # Odd case: get odd factors
        factors = odd_factors(capitalized_words_count)
        for i in range(len(matrix)):
            if i < len(factors):
                matrix[i][-1] = factors[i]
            else:
                matrix[i][-1] = 0  # Or whatever default behavior for extra rows

    return matrix
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_solution_with_even_capitalized_words():
    input_str = "Hello World this is a Test"
    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    expected_output = [[1, 2, 8], [4, 5, 11], [7, 8, 14]]
    assert solution(input_str, matrix) == expected_output

def test_solution_with_odd_capitalized_words():
    input_str = "One Two Three Capital"
    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    expected_output = [[1, 2, 1], [4, 5, 3], [7, 8, 0]]
    assert solution(input_str, matrix) == expected_output

def test_solution_with_no_capitalized_words():
    input_str = "no capital letters here"
    matrix = [[1, 2], [3, 4]]
    expected_output = [[1, 2], [3, 4]]
    assert solution(input_str, matrix) == expected_output

def test_solution_empty_matrix():
    input_str = "Some Random String"
    matrix = []
    expected_output = []
    assert solution(input_str, matrix) == expected_output

def test_solution_empty_string():
    input_str = ""
    matrix = [[1, 2, 3]]
    expected_output = [[1, 2, 1]]
    assert solution(input_str, matrix) == expected_output

def test_solution_empty_input():
    input_str = ""
    matrix = []
    expected_output = []
    assert solution(input_str, matrix) == expected_output

<|Test End|>
```