QUESTION

Here is a novel coding question that combines core concepts from the provided questions:

**New Question:**

Write a Python function that takes a list of strings and returns a dictionary where each key is a palindrome found in the list, and the value is the number of vowels in that palindrome. Use a lambda function to identify palindromes and ensure that your function also excludes strings that contain any NaN values in the list from consideration. Consider a lambda function's limitations for handling NaN values effectively. 

This question combines the concepts of finding palindromes (Questions 1 and 2), counting the number of vowels (Question 4), and handling NaN values (Question 5).

SOL & TESTS

<|Solution Begin|> 
```python
import math

def is_palindrome(s):
    """
    Returns True if the given string is a palindrome, False otherwise.
    """
    return s == s[::-1]

def count_vowels(s):
    """
    Returns the number of vowels in the given string.
    """
    vowels = 'aeiouAEIOU'
    return sum(1 for char in s if char in vowels)

def find_palindromes_with_vowels(strings):
    """
    Returns a dictionary with palindromes as keys and the number of vowels in them as values.
    Strings containing 'NaN' are excluded from consideration.
    """
    result = {}
    for s in strings:
        if isinstance(s, str) and s != 'NaN': # 'NaN' check should be different due to comparison limitations
            if is_palindrome(s):
                vowel_count = count_vowels(s)
                result[s] = vowel_count
    return result
```
<|Solution End|>

<|Test Begin|>
```python
import math
from solution import find_palindromes_with_vowels

def test_single_palindrome():
    assert find_palindromes_with_vowels(['anna']) == {'anna': 2}

def test_multiple_palindromes():
    assert find_palindromes_with_vowels(['anna', 'madam', 'level']) == {'anna': 2, 'madam': 2, 'level': 2}

def test_no_palindrome():
    assert find_palindromes_with_vowels(['python', 'code']) == {}

def test_with_nan_values():
    assert find_palindromes_with_vowels(['NaN', 'madam', 'nan']) == {'madam': 2, 'nan': 1}

def test_empty_list():
    assert find_palindromes_with_vowels([]) == {}

def test_no_vowels():
    assert find_palindromes_with_vowels(['bcb', 'dd', 'fff']) == {'bcb': 0, 'dd': 0}

def test_mixed():
    assert find_palindromes_with_vowels(['anna', 'civic', 'deified', 'rotor']) == {'anna': 2, 'civic': 2, 'deified': 4, 'rotor': 2}
```
<|Test End|>