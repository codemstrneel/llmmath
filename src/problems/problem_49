QUESTION

Write a Python function that takes a string, which may contain both repeated characters and numeric values, and an integer k. The function should return a tuple containing two elements:
1. A dictionary that maps each character in the string to its number of occurrences.
2. A modified version of the string where each numeric value found is incremented by k.

SOLUTION/TESTS

<|Solution Begin|>
def solution(s, k):
    """
    Takes a string and an integer k, returns a tuple with a dictionary of character counts,
    and a modified string with each numeric value increased by k.
    
    Parameters:
    s (str): The input string.
    k (int): The integer used to increment numeric values in the string.
    
    Returns:
    tuple: A dictionary of character counts and the modified string.
    """
    from collections import defaultdict

    # Create a dictionary to count occurrences of each character
    char_count = defaultdict(int)
    result = []

    for char in s:
        char_count[char] += 1
        if char.isdigit():
            # If the character is a digit, increment it by k
            new_char = str((int(char) + k) % 10)  # % 10 to handle single digit overflow
            result.append(new_char)
        else:
            result.append(char)

    return dict(char_count), ''.join(result)
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_no_digits():
    char_count, modified_string = solution("abc", 5)
    assert char_count == {'a': 1, 'b': 1, 'c': 1}
    assert modified_string == "abc"

def test_solution_with_digits():
    char_count, modified_string = solution("a1b2c3", 1)
    assert char_count == {'a': 1, '1': 1, 'b': 1, '2': 1, 'c': 1, '3': 1}
    assert modified_string == "a2b3c4"

def test_solution_with_larger_k():
    char_count, modified_string = solution("a1b2c3", 9)
    assert char_count == {'a': 1, '1': 1, 'b': 1, '2': 1, 'c': 1, '3': 1}
    assert modified_string == "a0b1c2"

def test_solution_overflow_digits():
    char_count, modified_string = solution("a9b8c7", 3)
    assert char_count == {'a': 1, '9': 1, 'b': 1, '8': 1, 'c': 1, '7': 1}
    assert modified_string == "a2b1c0"

def test_solution_empty_string():
    char_count, modified_string = solution("", 5)
    assert char_count == {}
    assert modified_string == ""

def test_solution_all_digits():
    char_count, modified_string = solution("1234567890", 2)
    assert char_count == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, '0': 1}
    assert modified_string == "3456789012"
<|Test End|>