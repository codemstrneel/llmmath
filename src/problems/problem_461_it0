QUESTION

Write a function that generates a square matrix of size n x n. This matrix should be filled with all possible products formed by distinct sublists of length 2 from the list of numbers `[1, 2, ..., n]`. Arrange these products in a spiral order starting from the top-left corner of the matrix.

SOLUTION/TESTS

<|Solution Begin|>
def solution(n):
    """
    Generates a n x n matrix filled with sorted products of distinct pairs from the list [1, 2, ..., n] 
    in a spiral order starting from the top-left corner.
    """
    from itertools import combinations

    # Get all distinct pairs using combinations from itertools
    pairs = combinations(range(1, n + 1), 2)
    # Calculate products
    products = sorted(a * b for a, b in pairs)
    
    # Initialize the n x n matrix with zeroes
    matrix = [[0] * n for _ in range(n)]

    # Define the boundaries of the spiral order
    top, left, bottom, right = 0, 0, n - 1, n - 1
    index = 0

    while top <= bottom and left <= right:
        # Traverse from left to right
        for i in range(left, right + 1):
            if index < len(products):
                matrix[top][i] = products[index]
                index += 1
        top += 1
        
        # Traverse from top to bottom
        for i in range(top, bottom + 1):
            if index < len(products):
                matrix[i][right] = products[index]
                index += 1
        right -= 1

        if top <= bottom:
            # Traverse from right to left
            for i in range(right, left - 1, -1):
                if index < len(products):
                    matrix[bottom][i] = products[index]
                    index += 1
            bottom -= 1

        if left <= right:
            # Traverse from bottom to top
            for i in range(bottom, top - 1, -1):
                if index < len(products):
                    matrix[i][left] = products[index]
                    index += 1
            left += 1

    return matrix
<|Solution End|>
<|Test Begin|>
def test_solution_n_1():
    assert solution(1) == [[0]]  # No combinations possible

def test_solution_n_2():
    assert solution(2) == [[2, 0], [0, 0]]  # Only one product: 2*1 = 2

def test_solution_n_3():
    assert solution(3) == [
        [2, 3, 4],
        [0, 0, 6],
        [0, 0, 0]
    ]  # Sorted products are [2, 3, 4, 6]

def test_solution_n_4():
    assert solution(4) == [
        [2, 3, 4, 6],
        [12, 0, 0, 8],
        [20, 0, 0, 9],
        [15, 14, 10, 12]
    ]  # All combinations result in 6 possible products: [2, 3, 4, 6, 8, 9, 10, 12, 12, 15, 14, 20]

def test_solution_n_5():
    assert solution(5) == [
        [2, 3, 4, 5, 6],
        [28, 0, 0, 0, 8],
        [40, 0, 0, 0, 9],
        [45, 0, 0, 0, 10],
        [35, 30, 24, 20, 15]
    ]
    # Products are [2, 3, 4, 5, 6, 8, 9, 10, 12, 12, 14, 15, 16, 18, 20, 20, 24, 25, 28, 30, 35, 36, 40, 45]
<|Test End|>