QUESTION

Create a function that accepts a list of pairs, where each pair consists of a string and a list of positive integers. The function should determine the pair with the list that has the maximum sum of integers. Return the string from that pair and the exact sum of the integers, rounded to the nearest whole number, as a tuple.

SOLUTION/TESTS

<|Solution Begin|>
def solution(pairs):
    """
    Determines the pair with the list that has the maximum sum of integers.
    Returns the string from that pair and the exact sum of the integers as a tuple.

    :param pairs: List of pairs, where each pair is a tuple (string, list of positive integers)
    :return: Tuple (string, sum of list of integers)
    """
    max_sum = -1
    result_pair = ("", 0)
    
    for s, numbers in pairs:
        current_sum = sum(numbers)
        if current_sum > max_sum:
            max_sum = current_sum
            result_pair = (s, round(current_sum))
    
    return result_pair
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_with_positive_integers():
    assert solution([("a", [1, 2, 3]), ("b", [4, 5, 6])]) == ("b", 15)

def test_solution_with_equal_sums():
    assert solution([("a", [1, 2, 3]), ("b", [3, 3]), ("c", [2, 4])]) == ("a", 6)

def test_solution_single_element_lists():
    assert solution([("a", [4]), ("b", [3]), ("c", [2])]) == ("a", 4)

def test_solution_single_pair():
    assert solution([("only", [1, 2, 3])]) == ("only", 6)

def test_solution_empty_lists_in_pairs():
    assert solution([("a", []), ("b", [2, 3, 1]), ("c", [])]) == ("b", 6)

def test_solution_large_numbers():
    assert solution([("a", [100000]), ("b", [1, 99998]), ("c", [50000, 50001])]) == ("a", 100000)

def test_solution_empty_input_list():
    assert solution([]) == ("", 0)
<|Test End|>