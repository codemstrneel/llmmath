QUESTION

Design a function that processes a list of dictionaries. Each dictionary has two keys: 'name', which maps to a string representing a name, and 'scores', which maps to a list of floats representing test scores. The function should accomplish the following:

1. Sort the list of dictionaries in decreasing order based on the average of the 'scores' list.
2. Identify the dictionary with the non-empty 'scores' list and the highest average.
3. For the identified dictionary, add all the scores and round the total sum to two decimal places, then multiply this result by the number of characters in the 'name' string.
4. Return a tuple containing the 'name' from the identified dictionary and the final calculated value. 

The task focuses on utilizing list manipulation, string operations, sorting based on computed averages, and arithmetic operations.

SOLUTION/TESTS

<|Solution Begin|>
def solution(dicts):
    """
    Processes a list of dictionaries, sorting by the average of scores,
    and computes a final value for the dictionary with the highest average score.
    """
    # Sort dictionaries based on the average score, in descending order
    sorted_dicts = sorted(
        dicts,
        key=lambda d: -float('inf') if not d['scores'] else sum(d['scores']) / len(d['scores']),
        reverse=True
    )

    # Find the dictionary with the non-empty scores list and highest average
    for d in sorted_dicts:
        if d['scores']:  # Ensure scores is non-empty
            highest_avg_dict = d
            break

    # Compute sum of scores and round it to 2 decimal places
    total_scores = round(sum(highest_avg_dict['scores']), 2)

    # Multiply this sum by the number of characters in the 'name'
    final_value = total_scores * len(highest_avg_dict['name'])

    return (highest_avg_dict['name'], final_value)
<|Solution End|>

<|Test Begin|>
from solution import solution

def test_multiple_dicts_with_non_empty_scores():
    data = [
        {'name': 'Alice', 'scores': [80.5, 90, 85]},
        {'name': 'Bob', 'scores': [70, 75.5, 82]},
        {'name': 'Charlie', 'scores': [88, 92, 84.5]}
    ]
    assert solution(data) == ('Charlie', 795.0)  # Average 88.1666..., name length 7, total_scores 264.5

def test_dict_with_empty_scores():
    data = [
        {'name': 'Dave', 'scores': []},
        {'name': 'Eve', 'scores': [90, 95, 100]}
    ]
    assert solution(data) == ('Eve', 855.0)  # Average 95, name length 3, total_scores 285

def test_single_dict():
    data = [
        {'name': 'Frank', 'scores': [50, 60, 70]}
    ]
    assert solution(data) == ('Frank', 900.0)  # Average 60, name length 5, total_scores 180

def test_tiebreaker_in_averages():
    data = [
        {'name': 'Grace', 'scores': [80, 80]},
        {'name': 'Heidi', 'scores': [60, 100]}
    ]
    # Both have average of 80, but Grace comes first
    assert solution(data) == ('Grace', 240.0)  # Total scores 160, name length 5

def test_all_empty_scores():
    data = [
        {'name': 'Ivan', 'scores': []},
        {'name': 'Jack', 'scores': []}
    ]
    # If all scores are empty, function behavior is not defined by the task
    # Assuming to handle gracefully: It could throw an error or return None.
    # Skipping this test due to undefined behavior in task description.
<|Test End|>