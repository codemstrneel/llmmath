QUESTION

Create a Python function that takes a string of integers and a list of coordinate pairs, where each coordinate pair represents a point in a 2D space. The string of integers can be converted into a tuple of integers representing potential valid x-coordinates. Your task is to identify all unique pairs of these coordinate points (treating (a, b) as the same as (b, a)) and check if both x-coordinates of these pairs are present in the tuple converted from the string of integers. For each valid pair, compute the absolute difference in both x and y coordinates, and return a list of tuples. Each tuple should contain these two points, their absolute x-coordinate difference, and their absolute y-coordinate difference, sorted alphabetically by the x-coordinate of the first point in each pair.

This problem combines elements of converting a string into a tuple (from Question 3), identifying unique pairs and calculating differences (from Question 4), and sorting tuples alphabetically (from Question 2).

SOL & TESTS

```python
<|Solution Begin|>
def find_valid_pairs_and_differences(coord_str, coords):
    """
    From a string of integers, convert it to a set of valid x-coordinates.
    Find all unique coordinate pairs from the list where both x-coordinates are in the set.
    Return a list of tuples containing these pairs and their absolute differences in x and y coordinates,
    sorted alphabetically by x-coordinate of the first point in each pair.

    :param coord_str: A string of space-separated integers.
    :param coords: A list of tuples representing coordinate points in 2D space.
    :return: A list of tuples with each entry containing a pair of coordinates and their absolute differences.
    """
    # Convert the string into a set of valid x-coordinates
    valid_x_coords = set(map(int, coord_str.split()))
    
    # Set to store unique pairs to avoid handling (a, b) and (b, a) separately
    unique_pairs = set()
    
    # Iterate through all pairs of coordinates
    results = []
    n = len(coords)
    for i in range(n):
        for j in range(i+1, n):
            point1, point2 = coords[i], coords[j]
            
            # Only consider pairs where both x-coordinates are in the set
            if point1[0] in valid_x_coords and point2[0] in valid_x_coords:
                # Uniquely identify a pair by sorting by their points
                sorted_pair = tuple(sorted([point1, point2]))
                
                if sorted_pair not in unique_pairs:
                    unique_pairs.add(sorted_pair)
                    
                    # Calculate the absolute differences
                    abs_x_diff = abs(point1[0] - point2[0])
                    abs_y_diff = abs(point1[1] - point2[1])
                    
                    # Add to results
                    results.append((*sorted_pair, abs_x_diff, abs_y_diff))
    
    # Sort the results alphabetically by x-coordinate of the first point
    results.sort(key=lambda x: (x[0][0], x[1][0]))

    return results
```
<|Solution End|>

```python
<|Test Begin|>
from solution import find_valid_pairs_and_differences

def test_find_valid_pairs_and_differences_basic():
    coord_str = "1 2 3"
    coords = [(1, 0), (2, 1), (3, 2), (4, 3)]
    expected = [
        ((1, 0), (2, 1), 1, 1),
        ((2, 1), (3, 2), 1, 1),
        ((1, 0), (3, 2), 2, 2)
    ]
    assert find_valid_pairs_and_differences(coord_str, coords) == expected

def test_find_valid_pairs_with_repeated_x():
    coord_str = "1 3"
    coords = [(1, 5), (3, 1), (1, 7), (3, 8)]
    expected = [
        ((1, 5), (1, 7), 0, 2),
        ((1, 5), (3, 1), 2, 4),
        ((3, 1), (3, 8), 0, 7),
        ((1, 7), (3, 8), 2, 1)
    ]
    assert find_valid_pairs_and_differences(coord_str, coords) == expected

def test_find_no_valid_pairs():
    coord_str = "7 8 9"
    coords = [(1, 0), (2, 1), (3, 2), (4, 3)]
    expected = []
    assert find_valid_pairs_and_differences(coord_str, coords) == expected

def test_find_valid_pairs_empty():
    coord_str = ""
    coords = []
    expected = []
    assert find_valid_pairs_and_differences(coord_str, coords) == expected

def test_find_single_valid_pair():
    coord_str = "3 5"
    coords = [(3, 3), (5, 6)]
    expected = [((3, 3), (5, 6), 2, 3)]
    assert find_valid_pairs_and_differences(coord_str, coords) == expected

def test_find_valid_pairs_mixed_coordinates():
    coord_str = "1 2 4"
    coords = [(1, 6), (2, 5), (2, 4), (4, 2), (5, 0)]
    expected = [
        ((1, 6), (2, 5), 1, 1),
        ((1, 6), (2, 4), 1, 2),
        ((2, 4), (4, 2), 2, 2),
        ((2, 5), (4, 2), 2, 3),
    ]
    assert find_valid_pairs_and_differences(coord_str, coords) == expected
```
<|Test End|>