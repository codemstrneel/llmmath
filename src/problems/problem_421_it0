QUESTION

Write a function that takes two lists: a list of numbers and a list of strings. The function should return a new list where each element is a tuple. Each tuple should contain an index, the sum of polite numbers up to that index from the list of numbers, and a concatenation of the corresponding string from the list of strings with whether the number at that index has even or odd parity. If the lists differ in length, only process up to the length of the shorter list.

SOLUTION/TESTS

## Solution

Here is a solution that meets the requirements for the task described in the question. The function `solution` takes two lists as input: a list of numbers and a list of strings. It constructs a new list where each element is a tuple consisting of an index, the cumulative sum of even numbers (polite numbers) up to that index, and a concatenated string consisting of the corresponding string from the list of strings and whether the number at that index is even or odd.

<|Solution Begin|>
```python
def solution(numbers, strings):
    result = []
    cumulative_sum = 0
    for i in range(min(len(numbers), len(strings))):
        if numbers[i] % 2 == 0:
            cumulative_sum += numbers[i]
        parity = "even" if numbers[i] % 2 == 0 else "odd"
        combined_string = strings[i] + parity
        result.append((i, cumulative_sum, combined_string))
    return result
```
<|Solution End|>

## Unit Tests

Let's write the unit tests to verify the correctness of the solution. We will import the solution and create several test cases to check the function's behavior with different inputs.

<|Test Begin|>
```python
from solution import solution

def test_solution_with_equal_lengths():
    numbers = [2, 3, 4, 5]
    strings = ["a", "b", "c", "d"]
    assert solution(numbers, strings) == [
        (0, 2, "aeven"),
        (1, 2, "bodd"),
        (2, 6, "ceven"),
        (3, 6, "dodd")
    ]

def test_solution_with_different_lengths():
    numbers = [1, 4, 2]
    strings = ["x", "y"]
    assert solution(numbers, strings) == [
        (0, 0, "xodd"),
        (1, 4, "yeven"),
    ]

def test_solution_with_empty_lists():
    assert solution([], []) == []
    assert solution([1, 2, 3], []) == []
    assert solution([], ["x", "y", "z"]) == []

def test_solution_with_all_even_numbers():
    numbers = [2, 4, 6, 8]
    strings = ["a", "b", "c", "d"]
    assert solution(numbers, strings) == [
        (0, 2, "aeven"),
        (1, 6, "beven"),
        (2, 12, "ceven"),
        (3, 20, "deven")
    ]

def test_solution_with_all_odd_numbers():
    numbers = [1, 3, 5, 7]
    strings = ["p", "q", "r", "s"]
    assert solution(numbers, strings) == [
        (0, 0, "podd"),
        (1, 0, "qodd"),
        (2, 0, "rodd"),
        (3, 0, "sodd")
    ]
```
<|Test End|>