QUESTION

Write a Python function that takes a string and a number as input. The function should do the following: 

1. If the length of the string is odd, return a sorted list of all the odd factors of the number using heap sort.
2. If the length of the string is even, check if the sum of the ASCII values of the characters in the string is between a given range (specified as additional parameters). If so, return the value 20; otherwise, return the original sum.

SOLUTION/TESTS

<|Solution Begin|>
def heapify(arr, n, i):
    """
    A function to heapify the tree rooted at index i.
    """
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    
    if l < n and arr[i] < arr[l]:
        largest = l
    
    if r < n and arr[largest] < arr[r]:
        largest = r
    
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    """
    Function to perform heap sort on the array.
    """
    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)
    
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    
    return arr

def is_odd(n):
    """
    Function to check if a number is odd.
    """
    return n % 2 != 0

def odd_factors(num):
    """
    Returns a list of odd factors of the given number.
    """
    return [i for i in range(1, num + 1) if num % i == 0 and is_odd(i)]

def solution(s, num, low, high):
    """
    Depending on the length of the string 's':
    - If odd, return a sorted list of odd factors of 'num' using heap sort.
    - If even, return 20 if the sum of ASCII values is between 'low' and 'high'; else, return the sum.
    """
    if len(s) % 2 != 0:
        factors = odd_factors(num)
        heap_sort(factors)
        return factors
    else:
        ascii_sum = sum(ord(c) for c in s)
        if low <= ascii_sum <= high:
            return 20
        else:
            return ascii_sum
<|Solution End|>
<|Test Begin|>
from solution import solution

def test_solution_odd_length_string():
    assert solution("abc", 12, 50, 150) == [1, 3]

def test_solution_even_length_string_ascii_in_range():
    assert solution("abcd", 15, 390, 400) == 20

def test_solution_even_length_string_ascii_not_in_range():
    assert solution("abcd", 15, 100, 200) == 394

def test_solution_odd_length_string_different_number():
    assert solution("abc", 30, 50, 150) == [1, 3, 5, 15]

def test_solution_even_length_string_ascii_edge_case():
    assert solution("ab", 10, 195, 197) == 195

def test_solution_empty_string_even_length():
    assert solution("", 10, 0, 0) == 20

def test_solution_empty_string_odd_length():
    assert solution("", 15, 1, 1) == [1, 3, 5, 15]

def test_solution_single_char_odd_length():
    assert solution("a", 9, 0, 200) == [1, 3, 9]

def test_solution_single_char_even_length():
    assert solution("a", 9, 97, 97) == 20

def test_solution_large_string_odd_length():
    long_string = "a" * 101
    assert solution(long_string, 16, 5000, 6000) == [1]
<|Test End|>