QUESTION

Write a function that takes three inputs: a list of integers, a list of strings, and a list of tuples. The function should perform the following tasks:

1. Filter out integers from the list of integers that are divisible by any "valid" key in the tuples. A valid key is an integer key that is neither `None` nor negative.
2. Construct a new list where each element is a tuple consisting of the index of each string from the list of strings and whether the integer at that index in the list of integers is odd or even. If the integer list is shorter than the string list, use only the available integers.
3. Merge the resultant list of tuples from step 2 with the list of tuples from the input. Each merged tuple should consist of the index and the number of unique characters (only alphanumeric characters) from the corresponding string at that index.
4. Return a list that contains:
   - A list of unique indices from the tuples constructed in step 3.
   - A dictionary with keys as the unique indices and values as the number of times each unique index appears in the tuples from step 3.

SOLUTION/TESTS

```python
<|Solution Begin|>
def solution(list_of_integers, list_of_strings, list_of_tuples):
    # Step 1: Filter out integers divisible by any valid key in the tuples
    valid_keys = [tpl[0] for tpl in list_of_tuples if tpl[0] is not None and tpl[0] >= 0]
    
    def is_valid_integer(n):
        return all(n % key != 0 for key in valid_keys)
    
    filtered_integers = [n for n in list_of_integers if is_valid_integer(n)]
    
    # Step 2: Construct new list of tuples (index, odd/even)
    indexed_odd_even = []
    for i, string in enumerate(list_of_strings):
        if i < len(filtered_integers):
            parity = "even" if filtered_integers[i] % 2 == 0 else "odd"
            indexed_odd_even.append((i, parity))
    
    # Step 3: Merge with list_of_tuples (index, unique char count)
    def count_unique_chars(s):
        return len(set(c for c in s if c.isalnum()))
    
    merged_tuples = [
        (index, count_unique_chars(list_of_strings[index]))
        for index, parity in indexed_odd_even
    ]
    
    # Step 4: Create list of unique indices and dictionary of index frequency
    unique_indices = list(set(index for index, _ in merged_tuples))
    
    index_frequency = {}
    for index, _ in merged_tuples:
        index_frequency[index] = index_frequency.get(index, 0) + 1
    
    return [unique_indices, index_frequency]
<|Solution End|>

<|Test Begin|>
def test_solution_with_valid_keys_and_integers():
    list_of_integers = [10, 21, 33, 47, 50]
    list_of_strings = ["hello!", "world", "test", "python", "unique!"]
    list_of_tuples = [(5, 'a'), (None, 'b'), (-3, 'c'), (2, 'd')]
    
    result = solution(list_of_integers, list_of_strings, list_of_tuples)
    assert result == [[1, 3], {1: 1, 3: 1}]

def test_solution_with_no_valid_keys():
    list_of_integers = [10, 20, 30, 40, 50]
    list_of_strings = ["abc", "de", "fgh", "ij", "klm"]
    list_of_tuples = [(None, 'a'), (-1, 'b')]
    
    result = solution(list_of_integers, list_of_strings, list_of_tuples)
    assert result == [[0, 1, 2, 3, 4], {0: 1, 1: 1, 2: 1, 3: 1, 4: 1}]

def test_solution_with_shorter_integers_list():
    list_of_integers = [3, 6]
    list_of_strings = ["foo", "bar", "baz"]
    list_of_tuples = [(2, 'one'), (4, 'two')]
    
    result = solution(list_of_integers, list_of_strings, list_of_tuples)
    assert result == [[0, 1], {0: 1, 1: 1}]

def test_solution_with_partial_input_overlap():
    list_of_integers = [5, 7, 9, 13]
    list_of_strings = ["aa", "bb", "cc", "dd"]
    list_of_tuples = [(5, 'x'), (None, 'y'), (-2, 'z')]
    
    result = solution(list_of_integers, list_of_strings, list_of_tuples)
    assert result == [[1, 2, 3], {1: 1, 2: 1, 3: 1}]

def test_solution_with_empty_lists():
    list_of_integers = []
    list_of_strings = []
    list_of_tuples = []
    
    result = solution(list_of_integers, list_of_strings, list_of_tuples)
    assert result == [[], {}]
<|Test End|>
```