QUESTION

**New Combined Coding Question:**

Write a Python function that accepts three inputs: a list of dictionaries `data_dicts`, a list of tuples `thresholds`, and a list of strings `text_list`. The function should perform the following tasks:

1. **Filter and Clean Dictionaries**: From the list `data_dicts`, filter out any dictionary that has no keys or where the value corresponding to the key 'status' is `None` or `'inactive'`. For the remaining dictionaries, remove any key-value pairs where the value is `None`.

2. **Threshold Tuple Filtering and Extraction**: From the list `thresholds`, filter out any tuple where the first element is `None`. Then, identify valid tuples that can be combined to form a sequence of ranges that do not overlap. A tuple `(x, y)` is part of a valid sequence if all `y` values are smaller than subsequent `x` values in the sequence. Extract the longest such sequence of non-overlapping tuples.

3. **String Processing and Substring Extraction**: For each string in `text_list`, perform the following:
   - Use regular expressions to remove all non-alphanumeric characters.
   - Calculate the length of each cleaned string.
   - From this cleaned version of `text_list`, extract substrings corresponding to the index ranges defined by the longest sequence of valid tuples from step 2. Ensure these extracted substrings do not overlap within each string. 
   
4. Return a tuple containing:
   - The filtered list of dictionaries,
   - The longest sequence of non-overlapping tuples,
   - For each processed string in `text_list`, return a sub-list containing tuples of the form `(original cleaned string, extracted non-overlapping substrings)`.

The function's signature should be:

```python
def process_data(
    data_dicts: List[Dict[str, Any]], 
    thresholds: List[Tuple[Optional[int], int]], 
    text_list: List[str]
) -> Tuple[List[Dict[str, Any]], List[Tuple[int, int]], List[Tuple[str, List[str]]]]:
    pass
```

The function emphasizes combining elements from multiple aspects of data processing, including data filtering, sequence and overlap management, string processing, and regular expression use to achieve complex processing.

SOL & TESTS

```python
import re
from typing import List, Dict, Any, Tuple, Optional

def process_data(
    data_dicts: List[Dict[str, Any]], 
    thresholds: List[Tuple[Optional[int], int]], 
    text_list: List[str]
) -> Tuple[List[Dict[str, Any]], List[Tuple[int, int]], List[Tuple[str, List[str]]]]:
    
    # Step 1: Filter and clean dictionaries
    filtered_dicts = []
    for d in data_dicts:
        if d and 'status' in d and d['status'] is not None and d['status'] != 'inactive':
            cleaned_dict = {k: v for k, v in d.items() if v is not None}
            filtered_dicts.append(cleaned_dict)
    
    # Step 2: Threshold tuple filtering and extraction
    filtered_thresholds = [t for t in thresholds if t[0] is not None]
    filtered_thresholds.sort()
    
    non_overlapping = []
    last_end = float('-inf')
    for x, y in filtered_thresholds:
        if x > last_end:
            non_overlapping.append((x, y))
            last_end = y
    
    # Step 3: String processing and substring extraction
    processed_texts = []
    for text in text_list:
        cleaned_text = re.sub(r'\W+', '', text)
        substrings = []
        
        for start, end in non_overlapping:
            if start < end <= len(cleaned_text):
                substrings.append(cleaned_text[start:end])
        
        processed_texts.append((cleaned_text, substrings))
    
    return (filtered_dicts, non_overlapping, processed_texts)
```

```python
from solution import process_data

def test_process_data_basic_case():
    data_dicts = [
        {'status': 'active', 'value': 10},
        {'status': None, 'value': 20},
        {},
        {'status': 'inactive', 'value': None}
    ]
    thresholds = [
        (1, 5),
        (None, 3),
        (8, 10),
        (12, 15),
        (6, 7)
    ]
    text_list = [
        "Hello, World!!",
        "Testing, 123.",
        "Overlap, Edge Cases."
    ]
    
    expected_output = (
        [{'status': 'active', 'value': 10}],
        [(1, 5), (8, 10), (12, 15)],
        [
            ('HelloWorld', ['ello', 'World']),
            ('Testing123', ['esti', 'ng12']),
            ('OverlapEdgeCases', ['verl', 'apEd'])
        ]
    )
    
    assert process_data(data_dicts, thresholds, text_list) == expected_output

def test_process_data_empty_case():
    data_dicts = []
    thresholds = []
    text_list = []
    
    expected_output = ([], [], [])
    
    assert process_data(data_dicts, thresholds, text_list) == expected_output

def test_process_data_no_valid_thresholds():
    data_dicts = [{'status': 'active'}]
    thresholds = [(None, 5)]
    text_list = ["Simple Test"]
    
    expected_output = (
        [{'status': 'active'}],
        [],
        [('SimpleTest', [])]
    )
    
    assert process_data(data_dicts, thresholds, text_list) == expected_output

def test_process_data_non_overlapping_thresholds():
    data_dicts = [{'status': 'active', 'extra': 'info', 'valid': None}]
    thresholds = [(0, 2), (3, 5), (6, 8)]
    text_list = ["SomeTextHere"]
    
    expected_output = (
        [{'status': 'active', 'extra': 'info'}],
        [(0, 2), (3, 5), (6, 8)],
        [('SomeTextHere', ['So', 'me', 'Te'])]
    )
    
    assert process_data(data_dicts, thresholds, text_list) == expected_output
```