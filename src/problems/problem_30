QUESTION

Write a function to check if a triangle of positive area is possible with the given angles and verify if such a triangle could also be classified as an isosceles triangle.

SOLUTION/TESTS

To solve the problem, we need to write a Python function that checks if a triangle is possible with given angles. A triangle is possible if the sum of the three angles is exactly 180 degrees and none of the angles is zero or negative. Furthermore, a triangle is classified as isosceles if at least two of its angles are equal.

Here is an implementation of the solution and the corresponding unit tests:

<|Solution Begin|>
def solution(a, b, c):
    """
    Returns a tuple where the first element is a boolean indicating if a 
    triangle with the given angles is possible, and the second element is a 
    boolean indicating if such a triangle can be classified as an isosceles 
    triangle.
    """
    if a <= 0 or b <= 0 or c <= 0:
        return (False, False)
    
    if a + b + c != 180:
        return (False, False)
    
    is_isosceles = a == b or b == c or a == c
    return (True, is_isosceles)
<|Solution End|>

<|Test Begin|>
def test_triangle_possible():
    assert solution(60, 60, 60) == (True, True)  # Equilateral triangle
    
def test_impossible_triangle():
    assert solution(0, 90, 90) == (False, False)  # One angle is zero
    assert solution(-10, 95, 95) == (False, False)  # Negative angle
    assert solution(100, 40, 40) == (False, False)  # Sum is more than 180
    assert solution(60, 60, 50) == (False, False)  # Sum is less than 180

def test_isosceles_triangle():
    assert solution(45, 45, 90) == (True, True)
    assert solution(70, 55, 55) == (True, True)

def test_non_isosceles_triangle():
    assert solution(50, 60, 70) == (True, False)
    assert solution(40, 60, 80) == (True, False)
<|Test End|>

This solution and tests address the problem requirements, ensuring the logic for determining the possibility of forming a triangle as well as verifying its classification as isosceles is handled correctly. The unit tests cover various scenarios, including edge cases for invalid angles and sum conditions, as well as checking the differentiation between isosceles and non-isosceles triangles.