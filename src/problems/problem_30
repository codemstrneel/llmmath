QUESTION

Write a Python function to find the maximum possible value for the given periodic function, considering any transformations such as scaling or shifting applied to the function within a specified interval. Additionally, ensure that your solution accounts for any discontinuities in the function and provides the exact time points within the interval where the maximum value occurs.

SOL & TESTS

<|Solution Begin|>
```python
import numpy as np

def max_periodic_function(f, interval_start, interval_end, num_points=1000):
    """
    Finds the maximum value of a given periodic function f within the specified interval.

    :param f: The periodic function to evaluate, should accept a single argument (time).
    :param interval_start: The start of the interval.
    :param interval_end: The end of the interval.
    :param num_points: Number of points to sample within the interval for finding the maximum.
    :returns: (max_value, [time_points]) tuple where max_value is the maximum value found
              and time_points is a list of time values where this maximum occurs.
    """
    times = np.linspace(interval_start, interval_end, num_points)
    values = f(times)

    max_value = np.max(values)
    max_indices = np.where(values == max_value)
    max_times = times[max_indices].tolist()

    return max_value, max_times
```
<|Solution End|>

<|Test Begin|>
```python
from solution import max_periodic_function
import numpy as np

def test_sine_wave_max():
    f = lambda t: np.sin(t)
    max_val, times = max_periodic_function(f, 0, 2 * np.pi)
    assert np.isclose(max_val, 1.0, atol=1e-5)
    for time in times:
        assert np.isclose(f(time), 1.0, atol=1e-5)

def test_cos_wave_max():
    f = lambda t: np.cos(t)
    max_val, times = max_periodic_function(f, 0, 2 * np.pi)
    assert np.isclose(max_val, 1.0, atol=1e-5)
    for time in times:
        assert np.isclose(f(time), 1.0, atol=1e-5)

def test_shifted_sine_wave_max():
    f = lambda t: np.sin(t) + 2
    max_val, times = max_periodic_function(f, 0, 2 * np.pi)
    assert np.isclose(max_val, 3.0, atol=1e-5)
    for time in times:
        assert np.isclose(f(time), 3.0, atol=1e-5)

def test_scaled_cos_wave_max():
    f = lambda t: 3 * np.cos(t)
    max_val, times = max_periodic_function(f, 0, 2 * np.pi)
    assert np.isclose(max_val, 3.0, atol=1e-5)
    for time in times:
        assert np.isclose(f(time), 3.0, atol=1e-5)

def test_complex_wave_max():
    f = lambda t: np.sin(t) + np.cos(2*t)
    max_val, times = max_periodic_function(f, 0, 2 * np.pi)
    # Since this function is more complex, we expect variations
    # and can't assert exact expected times, but we can check the value
    assert np.isclose(max_val, 1.5, atol=0.1)

def test_interval_zero_length():
    f = lambda t: np.sin(t)
    max_val, times = max_periodic_function(f, 0, 0)
    assert max_val == 0
    assert len(times) == 1
    assert times[0] == 0
```
<|Test End|>