QUESTION

Create a function that takes two lists of numbers and performs an element-wise operation to combine them. The function should add each pair of corresponding elements from the two lists if both elements are positive. If an element in either position is negative, perform a modulo operation between the corresponding elements of the two lists. The operation should be applied using map and lambda, and the function should return the resulting list.

For example, given the lists `[5, -3, 7, 0]` and `[2, 4, -5, 0]`, the function would perform the following operations:
- For the first pair `(5, 2)`, both are positive, so output `5 + 2 = 7`.
- For the second pair `(-3, 4)`, one element is negative, so output `-3 % 4 = 1`.
- For the third pair `(7, -5)`, one element is negative, so output `7 % -5 = -3`.
- For the fourth pair `(0, 0)`, neither is positive, so output `0 % 0 = 0` (Consider handling the division by zero scenario as appropriate in your implementation).

The function should return the list `[7, 1, -3, 0]`.

SOL & TESTS

<|Solution Begin|>
```python
def combine_lists(list1, list2):
    """
    Combines two lists by performing element-wise operations.
    Adds if both elements are positive, otherwise applies modulo operation.
    """
    
    def operation(x, y):
        if x > 0 and y > 0:
            return x + y
        elif (x == 0 and y == 0):
            return 0  # Handle case of 0 % 0 specifically
        else:
            return x % y

    return list(map(lambda x, y: operation(x, y), list1, list2))
```
<|Solution End|>

<|Test Begin|>
```python
from solution import combine_lists

def test_normal_cases():
    assert combine_lists([5, -3, 7, 0], [2, 4, -5, 0]) == [7, 1, -3, 0]
    assert combine_lists([4, -2, 5, 0], [3, -8, 2, 1]) == [7, -2, 7, 1]  # 4+3, -2%(-8), 5+2, 0%1

def test_edge_cases():
    assert combine_lists([0, 0, 0], [0, 0, 0]) == [0, 0, 0]  # Since 0 % 0 = 0
    assert combine_lists([-1, -2, -3], [-4, -5, -6]) == [-1, -2, -3]  # Negative modulo of same -ve is the same number
    assert combine_lists([1, 2, 3], [4, 5, 6]) == [5, 7, 9]  # All positives

def test_single_element_cases():
    assert combine_lists([5], [2]) == [7]  # Both positive
    assert combine_lists([-3], [4]) == [1]  # -3 % 4 = 1
    assert combine_lists([7], [-5]) == [-3]  # 7 % -5 = -3
    assert combine_lists([0], [0]) == [0]  # Handle 0 % 0

def test_zero_cases():
    assert combine_lists([0, 1, 2], [3, 0, 2]) == [0, 1, 4]  # 0%3, 1+0, 2+2
    assert combine_lists([1, 0, 3], [0, 2, 0]) == [1, 0, 3 % 0]  # 1+0, 0%2, handle 3%0 safely
```
<|Test End|>