QUESTION

Original Question: Write a python function to find the number of solutions in a quadratic equation.

New Question: Write a Python function to find the number of real solutions in a quadratic equation and determine their nature (real and distinct, real and repeated, or complex).

SOLUTION/TESTS

To solve this problem, we need to determine the nature of solutions of a quadratic equation of the form \( ax^2 + bx + c = 0 \). The key is to calculate the discriminant \( D = b^2 - 4ac \).

1. If \( D > 0 \), the equation has two real and distinct solutions.
2. If \( D = 0 \), the equation has two real and repeated (or equal) solutions.
3. If \( D < 0 \), the equation has two complex solutions.

The Python function will calculate the discriminant and return a description of the nature of the solutions.

Here's the implementation and testing code in the required format:

```python
<|Solution Begin|>
def solution(a, b, c):
    """
    Determines the nature of the solutions of a quadratic equation.
    
    Parameters:
    a (float): coefficient of x^2
    b (float): coefficient of x
    c (float): constant term
    
    Returns:
    str: Description of the solutions (real and distinct, real and repeated, or complex)
    """
    discriminant = b**2 - 4*a*c
    if discriminant > 0:
        return "real and distinct"
    elif discriminant == 0:
        return "real and repeated"
    else:
        return "complex"
<|Solution End|>
<|Test Begin|>
def test_solution_real_and_distinct():
    assert solution(1, -3, 2) == "real and distinct"  # D = 1
    assert solution(1, 0, -1) == "real and distinct"  # D = 4

def test_solution_real_and_repeated():
    assert solution(1, 2, 1) == "real and repeated"  # D = 0
    assert solution(1, -4, 4) == "real and repeated"  # D = 0

def test_solution_complex():
    assert solution(1, 0, 1) == "complex"  # D = -4
    assert solution(1, 2, 5) == "complex"  # D = -16

def test_solution_edge_cases():
    # When a is large compared to b and c, leading to a large negative discriminant
    assert solution(1000, 1, 1) == "complex"
    # Coefficients with zero values
    assert solution(1, 0, 0) == "real and repeated"  # D = 0
<|Test End|>
```

These tests check if the function `solution` correctly identifies the nature of the roots based on different discriminant conditions. The unit tests are designed to be independent of the specific details of how `solution` calculates the discriminant and decisions.