QUESTION

Here's a new coding question that combines concepts from both string manipulation with regex and numerical computations, drawing inspiration from the ideas in your provided questions:

**New Question:**

Create a function in Python that processes a list of strings and numbers with the following requirements:

1. Extract all numbers from each string using regex and calculate the sum of these numbers.
2. From the calculated sums, find the prime numbers.
3. Determine how many distinct alphabetical characters are present in each string that contains extracted numbers.
4. Create a max-heap from the list of these prime numbers.
5. Return a dictionary containing:
   - "sum_and_primes": A list of tuples for each string containing the sum of numbers extracted and a list of identified prime numbers from this sum.
   - "distinct_characters_count": A dictionary where keys are the indices of strings that contain numbers, and values are the counts of distinct alphabetical characters.
   - "prime_max_heap": A list representing the max-heap of all identified prime numbers.

**Function Signature:**
```python
def analyze_strings_and_numbers(strings: list) -> dict:
    pass
```

**Constraints:**
- Each number in the string is a whole number and can be positive or negative.
- Consider only English alphabet characters for the distinct character count.
- The function should handle strings that have no numbers gracefully and simply not process them for the point 2 and 3 mentioned above.
- Utilize efficient methods for checking primality and ensure the use of an appropriate heap-building algorithm.

This problem combines regex-driven string parsing, computational number theory with primes, data structure manipulation with heaps, and a bit of list and dictionary operation to stitch everything together.

SOL & TESTS

<|Solution Begin|>```python
import re
import heapq

def is_prime(n):
    """
    Check if a number is a prime number.
    """
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def analyze_strings_and_numbers(strings):
    # Result dictionary
    result = {
        "sum_and_primes": [],
        "distinct_characters_count": {},
        "prime_max_heap": []
    }
    
    for idx, s in enumerate(strings):
        # Extract numbers from the string
        numbers = list(map(int, re.findall(r'-?\d+', s)))
        
        if numbers:
            # Calculate the sum of numbers
            numbers_sum = sum(numbers)
            
            # Find prime numbers from this sum: here interestingly, it is boolean, sum could be a single number
            primes = [num for num in numbers if is_prime(num)]
            
            # Count distinct alphabetical characters
            distinct_characters = set(c.lower() for c in s if c.isalpha())
            result["distinct_characters_count"][idx] = len(distinct_characters)
            
            # Append to results
            result["sum_and_primes"].append((numbers_sum, primes))
            
            # Add primes to the heap (using negative for max-heap)
            for prime in primes:
                heapq.heappush(result["prime_max_heap"], -prime)
    
    # Convert heap into max-heap format for output
    result["prime_max_heap"] = [-heapq.heappop(result["prime_max_heap"]) for _ in range(len(result["prime_max_heap"]))]
    
    return result
```
<|Solution End|>

<|Test Begin|>```python
import pytest
from solution import analyze_strings_and_numbers

def test_basic_case():
    strings = ["abc123", "def456 ghi789", "jkl-101", "NoNumbersHere", "mix1234text"]
    result = analyze_strings_and_numbers(strings)
    assert result["sum_and_primes"] == [(123, []), (1245, [456, 789]), (-101, []), (1234, [])]
    assert result["distinct_characters_count"] == {0: 3, 1: 6, 2: 3, 4: 4}
    assert result["prime_max_heap"] == [789, 456]

def test_no_numbers():
    strings = ["abcdef", "ghijklmnop"]
    result = analyze_strings_and_numbers(strings)
    assert result["sum_and_primes"] == []
    assert result["distinct_characters_count"] == {}
    assert result["prime_max_heap"] == []

def test_all_negative_numbers():
    strings = ["negative -1 -2 -3", "only -5 here"]
    result = analyze_strings_and_numbers(strings)
    assert result["sum_and_primes"] == [(-6, []), (-5, [])]
    assert result["distinct_characters_count"] == {0: 8, 1: 4}
    assert result["prime_max_heap"] == []

def test_all_positive_numbers():
    strings = ["10 11 12 13", "17 is here"]
    result = analyze_strings_and_numbers(strings)
    assert result["sum_and_primes"] == [(46, [11, 13]), (17, [17])]
    assert result["distinct_characters_count"] == {0: 2, 1: 3}
    assert result["prime_max_heap"] == [17, 13, 11]

def test_mixed_no_distinct_characters():
    strings = ["-7 -13 is -20", "x18 y-2"]
    result = analyze_strings_and_numbers(strings)
    assert result["sum_and_primes"] == [(-40, [-7, -13]), (16, [])]
    assert result["distinct_characters_count"] == {0: 2, 1: 2}
    assert result["prime_max_heap"] == []

def test_duplicate_primes():
    strings = ["5 5 2 3"]
    result = analyze_strings_and_numbers(strings)
    assert result["sum_and_primes"] == [(15, [5, 5, 2, 3])]
    assert result["distinct_characters_count"] == {0: 0}
    assert result["prime_max_heap"] == [5, 5, 3, 2]
```
<|Test End|>