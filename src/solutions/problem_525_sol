```python
def solution(strings, n):
    import re
    from collections import defaultdict
    
    # Initial Transformation Phase
    cleaned_strings = [s.replace(" ", "") for s in strings]
    valid_strings = [s for s in cleaned_strings if re.match("^[a-zA-Z0-9]+$", s)]
    
    # Grouping by the initial character
    groups = defaultdict(list)
    for s in valid_strings:
        groups[s[0]].append(s)
    
    # Inversion Calculation
    def count_inversions(arr):
        inversions = [0] * len(arr)
        for i in range(len(arr)):
            for j in range(i + 1, len(arr)):
                if arr[i] > arr[j]:
                    inversions[i] += 1
                    inversions[j] += 1
        return inversions
    
    # Chunking and Summation
    result = []
    for key, group in groups.items():
        group_sorted = sorted(group)
        inversions = count_inversions(group_sorted)
        ordered_with_inversions = sorted(zip(group_sorted, inversions), key=lambda x: x[1])
        
        # Chunk group
        chunk = []
        total_length = 0
        for s, inv in ordered_with_inversions:
            if len(chunk) < n:
                chunk.append(s)
                total_length += len(s)
            if len(chunk) == n:
                if all(i == 0 for _, i in ordered_with_inversions[:n]):
                    chunk = []
                    total_length = 0
                else:
                    result.append((total_length, chunk))
                    chunk = []
                    total_length = 0
        
        # Handle the last partial chunk
        if chunk and not all(i == 0 for _, i in ordered_with_inversions[:len(chunk)]):
            result.append((total_length, chunk))
    
    return result
```