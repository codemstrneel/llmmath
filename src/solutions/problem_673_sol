```python
import re
from collections import Counter
from functools import reduce
from math import gcd
from typing import List, Tuple, Dict

def solution(input_string: str, nested_tuples: List[Tuple]) -> Dict:
    cleaned_string = re.sub(r'[^A-Za-z0-9]', '', input_string)
    unique_words = set(re.findall(r'\w+', input_string))
    unique_word_count = len(unique_words)

    vowels = 'aeiou'
    vowel_counts = Counter(char.lower() for char in cleaned_string if char.lower() in vowels)
    frequent_vowel = max(vowel_counts.items(), key=lambda x: (x[1], x[0]), default=(None, 0))

    def flatten(tup):
        for item in tup:
            if isinstance(item, tuple):
                yield from flatten(item)
            else:
                yield item

    flattened_list = list(flatten(nested_tuples))
    unique_integers = set(flattened_list)

    def lcm(x, y):
        return x * y // gcd(x, y)
    
    smallest_multiple = reduce(lcm, unique_integers, 1)

    max_value = max(flattened_list)
    distinct_representation = [max_value - num for num in flattened_list]

    return {
        "cleaned_string": cleaned_string,
        "unique_word_count": unique_word_count,
        "frequent_vowel": frequent_vowel,
        "smallest_multiple": smallest_multiple,
        "distinct_tuple_representation": distinct_representation
    }
```