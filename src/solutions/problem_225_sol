```python
def solution(input_string, tuples_list):
    from collections import defaultdict
    
    def remove_consecutive_duplicates(s):
        return ''.join(char for i, char in enumerate(s) if i == 0 or char != s[i-1])
    
    def digits_to_words(s):
        digit_map = {'0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four',
                     '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine'}
        return ''.join(digit_map[char] if char in digit_map else char for char in s)
    
    transformed_string = digits_to_words(remove_consecutive_duplicates(input_string))
    unique_chars = set(transformed_string)
    x = len(unique_chars)
    
    groups = defaultdict(list)
    for m, p, strings in tuples_list:
        groups[m % x].append((m, p, strings))
    
    result = {}
    
    for remainder, group in groups.items():
        filtered_group = [t for t in group if None not in t[2]]
        count = sum(1 for t in filtered_group if all(s[0].isupper() and s[1:].islower() for s in t[2]))
        max_length = max((len(s) for t in filtered_group for s in t[2] if s[0].isupper() and s[1:].islower()), default=0)
        
        result[remainder] = (count, max_length)
    
    return result
```