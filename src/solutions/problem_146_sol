```python
def solution(sentences, variables):
    import re
    from itertools import combinations
    from operator import mul

    def camel_to_snake(name):
        return re.sub('([A-Z])', r'_\1', name).lower().lstrip('_')

    def evaluate_expression(expr, var_dict):
        expr = re.sub(r'[A-Za-z0-9_]+', lambda match: str(var_dict[camel_to_snake(match.group(0))]), expr)
        return eval(expr)

    def highest_product_pair(numbers):
        if len(numbers) < 2:
            return None
        max_product = float('-inf')
        pair = None
        for a, b in combinations(numbers, 2):
            product = mul(a, b)
            if product > max_product:
                max_product = product
                pair = (a, b)
        return pair

    results = []
    for sentence in sentences:
        modified_sentence = sentence.replace('road', 'rd.')
        expressions = re.findall(r'\b[A-Za-z0-9_]+(?:[+\-*/][A-Za-z0-9_]+)+', modified_sentence)
        
        results_for_sentence = []
        for expr in expressions:
            result = evaluate_expression(expr, variables)
            numbers_in_expression = re.findall(r'\d+', expr)
            number_pairs = [int(n) for n in numbers_in_expression]
            best_pair = highest_product_pair(number_pairs)
            results_for_sentence.append((result, best_pair))
        
        result_sentence = modified_sentence + " " + str(results_for_sentence)
        results.append(result_sentence)

    return results
```