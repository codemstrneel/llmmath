```python
def solution(grid, point):
    import math
    from collections import deque

    def euclidean_distance(center, target):
        return math.sqrt((center[0] - target[0]) ** 2 + (center[1] - target[1]) ** 2)

    rows, cols = len(grid), len(grid[0])
    center = (rows // 2, cols // 2)
    distance = euclidean_distance(center, point)
    
    if grid[0][0] == 0 or grid[rows - 1][cols - 1] == 0:
        return "Total paths found: 0"

    queue = deque([(0, 0)])
    path_count = 0
    
    while queue:
        r, c = queue.popleft()
        
        if r == rows - 1 and c == cols - 1:
            path_count += 1
        
        for dr, dc in [(1, 0), (0, 1)]:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] > distance and grid[nr][nc] != 0:
                queue.append((nr, nc))
    
    return f"Total paths found: {path_count}"
```