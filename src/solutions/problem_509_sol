```python
def solution(strings):
    def count_inversions(arr):
        if len(arr) < 2:
            return 0
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]
        inversions = count_inversions(left) + count_inversions(right)
        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                inversions += len(left) - i
                j += 1
            k += 1
        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1
        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1
        return inversions

    filtered_list = [s.replace(" ", "") for s in strings if s and s[0].isupper()]
    count_dict = {}
    for s in filtered_list:
        count_dict[s] = count_dict.get(s, (0, 0))
        count_dict[s] = (count_dict[s][0] + 1, count_dict[s][1])

    unique_strings = list(count_dict.keys())
    inversion_count = count_inversions(unique_strings)
    
    for s in unique_strings:
        count_dict[s] = (count_dict[s][0], inversion_count)
    
    return count_dict
```