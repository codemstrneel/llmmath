```python
import re
from collections import OrderedDict

def reverse_middle_bits(n):
    bits = f'{n:08b}'
    if len(bits) < 8:
        return n
    mid_bits = bits[4:8]
    reversed_mid_bits = mid_bits[::-1]
    return int(bits[:4] + reversed_mid_bits + bits[8:], 2)

def solution(lst):
    patterns = []
    modified_numbers = []
    
    for item in lst:
        if isinstance(item, str):
            matches = re.findall(r'([a-zA-Z]{3})\d', item)
            patterns.extend(matches)
        elif isinstance(item, int):
            modified_numbers.append(item)
        elif isinstance(item, list):
            # Flatten the nested list structure and process further
            for nested_item in item:
                if isinstance(nested_item, str):
                    matches = re.findall(r'([a-zA-Z]{3})\d', nested_item)
                    patterns.extend(matches)
                elif isinstance(nested_item, int):
                    modified_numbers.append(nested_item)

    patterns = list(OrderedDict.fromkeys(patterns))
    altered_numbers = []

    for i in range(0, len(modified_numbers), 3):
        trio = modified_numbers[i:i+3]
        if len(trio) == 3:
            altered_numbers.append(reverse_middle_bits(trio[0]))
            altered_numbers.append(reverse_middle_bits(trio[1]))
            altered_numbers.append(reverse_middle_bits(trio[2]))
        else:
            altered_numbers.extend(trio)

    patterns.sort(reverse=True)
    altered_numbers.sort(reverse=True)

    pattern_identifier = ''.join(patterns)
    
    return {
        "modified_numbers": set(altered_numbers),
        "pattern_identifier": pattern_identifier
    }
```