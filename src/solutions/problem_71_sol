```python
def solution(mixed_list):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True
    
    def toggle_bits(n):
        return n ^ (~1)
    
    def process_integers(lst):
        results = []
        even_sum = 0
        odd_sum = 0
        even = []
        odd = []
        
        for num in lst:
            if isinstance(num, int) and is_prime(num):
                toggled = toggle_bits(num)
                if toggled % 2 == 0:
                    even.append(toggled)
                    even_sum += toggled
                else:
                    odd.append(toggled)
                    odd_sum += toggled
        
        if even:
            results.append((even, even_sum))
        if odd:
            results.append((odd, odd_sum))
        
        return results
    
    def process_tuples(lst):
        results = []
        for item in lst:
            if isinstance(item, tuple):
                if any(isinstance(x, int) and x % 3 == 0 for x in item):
                    formatted = ', '.join(
                        f"_{x}_" if isinstance(x, int) and x % 3 == 0 else str(x) for x in item
                    )
                    results.append(formatted)
        return results
    
    def process_strings(lst):
        results = []
        for item in lst:
            if isinstance(item, str):
                count = 0
                modified = item
                while True:
                    start = modified.find('a')
                    end = modified.find('b', start)
                    if start == -1 or end == -1:
                        break
                    count += 1
                    subsequence = modified[start+1:end]
                    modified = modified[:start+1] + subsequence[::-1] + modified[end:]
                
                results.append((modified, count))
        return results

    integers_results = process_integers(mixed_list)
    tuples_results = process_tuples(mixed_list)
    strings_results = process_strings(mixed_list)

    return integers_results + tuples_results + strings_results
```