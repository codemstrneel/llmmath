```python
def solution(nested_data):
    import re
    
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    def process_data(data):
        clean_strings = []
        prime_integers = []
        tuple_diffs = {}
        
        for i, item in enumerate(data):
            if isinstance(item, str):
                clean_str = re.sub(r'[^a-zA-Z0-9]', '', item)
                if clean_str:
                    clean_strings.append(clean_str)
            elif isinstance(item, int):
                if is_prime(item):
                    prime_integers.append(item)
            elif isinstance(item, tuple):
                if all(isinstance(x, int) for x in item):
                    if len(item) > 1:
                        if i not in tuple_diffs:
                            tuple_diffs[i] = []
                        tuple_diffs[i].extend(item[j] - item[j - 1] for j in range(1, len(item)))

            elif isinstance(item, list):
                nested_result = process_data(item)
                clean_strings.extend(nested_result[0])
                prime_integers.extend(nested_result[1])
                for key, value in nested_result[2].items():
                    if key in tuple_diffs:
                        tuple_diffs[key].extend(value)
                    else:
                        tuple_diffs[key] = value
        
        return clean_strings, prime_integers, tuple_diffs

    clean_strings, prime_integers, tuple_diffs = process_data(nested_data)
    return {"clean_strings": clean_strings, "prime_integers": prime_integers, "tuple_differences": tuple_diffs}
```