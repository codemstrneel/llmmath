```python
import heapq

def solution(data, n):
    processed_data = []

    for entry in data:
        unique_strings = sorted(set(entry['strings']))
        unique_count = len(unique_strings)
        decimal_places = str(entry['number']).split('.')[-1]
        decimal_count = len(decimal_places) if len(decimal_places) > 0 else 0
        processed_data.append((unique_count, decimal_count, unique_strings, entry['number']))

    processed_data.sort(key=lambda x: (-x[0], x[1]))

    largest_n = heapq.nlargest(n, processed_data, key=lambda x: x[3])

    concatenated_strings = ''.join(''.join(entry[2]) for entry in largest_n)
    max_length = max(len(s) for s in largest_n)

    return concatenated_strings, max_length
```