```python
import re
from collections import defaultdict
import heapq

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def analyze_strings_and_numbers(strings):
    sum_and_primes = []
    distinct_characters_count = {}
    prime_numbers = []

    for index, string in enumerate(strings):
        numbers = list(map(int, re.findall(r'-?\d+', string)))
        if numbers:
            total_sum = sum(numbers)
            primes = [num for num in range(total_sum + 1) if is_prime(num)]
            sum_and_primes.append((total_sum, primes))
            distinct_chars = set(filter(str.isalpha, string))
            distinct_characters_count[index] = len(distinct_chars)
            prime_numbers.extend(primes)

    max_heap = [-p for p in prime_numbers]
    heapq.heapify(max_heap)

    return {
        "sum_and_primes": sum_and_primes,
        "distinct_characters_count": distinct_characters_count,
        "prime_max_heap": [-heapq.heappop(max_heap) for _ in range(len(max_heap))]
    }
```