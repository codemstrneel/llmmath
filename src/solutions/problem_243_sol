```python
import re
from collections import defaultdict

def solution(data, k):
    def remove_consecutive_duplicates(s):
        return ''.join(ch for ch, _ in groupby(s)

    grouped_results = defaultdict(lambda: [0, 0])
    unique_chars = set()

    for key, tuples in data.items():
        pattern = re.compile(f'^{key}')
        for (a, b, strings) in tuples:
            for s in strings:
                if pattern.match(s):
                    cleaned_str = remove_consecutive_duplicates(s)
                    unique_chars.update(cleaned_str)
                    if cleaned_str and cleaned_str[-1].isalnum():
                        remainder = len(cleaned_str) % k
                        grouped_results[remainder][0] += 1
                        grouped_results[remainder][1] = max(grouped_results[remainder][1], len(cleaned_str))

    return {remainder: (count, max_length) for remainder, (count, max_length) in grouped_results.items() if count > 0}
```