```python
import re
import math

def solution(radius, angles, expressions):
    arc_lengths = [round((angle * math.pi * radius) / 180, 2) for angle in angles]
    even_arc_lengths = [length for length in arc_lengths if int(length) % 2 == 0]
    
    subsequences = []
    for i in range(len(angles)):
        temp_seq = []
        for j in range(i, len(angles)):
            if j == i or angles[j] - angles[j - 1] == 3:
                temp_seq.append(angles[j])
                if len(temp_seq) > 1:
                    subsequences.append(temp_seq.copy())
            else:
                break

    balanced_pattern = re.findall(r'\(\d+\)', expressions)
    
    return (even_arc_lengths, subsequences, balanced_pattern)
```