```python
def solution(edges, s):
    from collections import defaultdict, deque

    graph = defaultdict(list)
    indegree = defaultdict(int)
    
    for u, v in edges:
        graph[u].append(v)
        indegree[v] += 1
    
    longest_path = []
    queue = deque()
    
    for node in graph:
        if indegree[node] == 0:
            queue.append(node)
    
    while queue:
        current_path = []
        current_queue = deque(queue)
        while current_queue:
            node = current_queue.popleft()
            current_path.append(node)
            for neighbor in graph[node]:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    current_queue.append(neighbor)

        if len(current_path) > len(longest_path):
            longest_path = current_path

    substrings = []
    used_indices = set()
    
    for start in range(len(s)):
        for end in range(start + 1, len(s) + 1):
            substring = s[start:end]
            if len(substring) > 0 and all(start not in used_indices and end - 1 not in used_indices for start, end in zip(range(start, end), range(start + 1, end + 1))):
                substrings.append(substring)
                used_indices.update(range(start, end))

    return substrings
```